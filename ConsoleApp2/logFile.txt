
                                      CodeAnalysis - Version 1.4
    ==============================================================================================
     Thu Dec  7 23:16:14 2017
     Path: "C:\Users\Prakash\source\repos\ConsoleApp2"
     Args: *.h, *.cpp, *.cs, /m, /r, /d, /b, /f

  Test begin scope                : using Federation ; 
  Test end scope                  : using Federation ; 
  using declar   : using Federation ; 
  Test preproc statement:         : using Federation ; 
  Test namespace definition:      : using Federation ; 
  using declar   : using MessagePassingComm ; 
  Test class definition:          : using Federation ; 
  Test struct definition:         : using Federation ; 
  Test C# function definition:    : using Federation ; 
  using declar   : using MockTestHarness ; 
  Test control definition:        : using Federation ; 
  Test C# declaration:            : using Federation ; 
  using declar   : using System ; 
  Handle C# declaration:          : using Federation ; 
  Test begin scope                : using MessagePassingComm ; 
  Test end scope                  : using MessagePassingComm ; 
  Test preproc statement:         : using MessagePassingComm ; 
  using declar   : using System . Collections . Generic ; 
  Test namespace definition:      : using MessagePassingComm ; 
  Test class definition:          : using MessagePassingComm ; 
  using declar   : using System . Diagnostics ; 
  Test struct definition:         : using MessagePassingComm ; 
  Test C# function definition:    : using MessagePassingComm ; 
  using declar   : using System . IO ; 
  Test control definition:        : using MessagePassingComm ; 
  using declar   : using System . Linq ; 
  Test C# declaration:            : using MessagePassingComm ; 
  Handle C# declaration:          : using MessagePassingComm ; 
  using declar   : using System . Runtime . InteropServices ; 
  Test begin scope                : using MockTestHarness ; 
  Test end scope                  : using MockTestHarness ; 
  using declar   : using System . ServiceModel ; 
  Test preproc statement:         : using MockTestHarness ; 
  using declar   : using System . Text ; 
  Test namespace definition:      : using MockTestHarness ; 
  Test class definition:          : using MockTestHarness ; 
  using declar   : using System . Threading ; 
  Test struct definition:         : using MockTestHarness ; 
  Test C# function definition:    : using MockTestHarness ; 
  Test control definition:        : using MockTestHarness ; 
  using declar   : using System . Threading . Tasks ; 
  Test C# declaration:            : using MockTestHarness ; 
  using declar   : using Utilities ; 
  Handle C# declaration:          : using MockTestHarness ; 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Collections . Generic ; 
  Test end scope                  : using System . Collections . Generic ; 
  Test preproc statement:         : using System . Collections . Generic ; 
  Test namespace definition:      : using System . Collections . Generic ; 
  Test class definition:          : using System . Collections . Generic ; 
  Test struct definition:         : using System . Collections . Generic ; 
  Test C# function definition:    : using System . Collections . Generic ; 
  Test control definition:        : using System . Collections . Generic ; 
  Test C# declaration:            : using System . Collections . Generic ; 
  Handle C# declaration:          : using System . Collections . Generic ; 
  Test begin scope                : using System . Diagnostics ; 
  Test end scope                  : using System . Diagnostics ; 
  Test preproc statement:         : using System . Diagnostics ; 
  Test namespace definition:      : using System . Diagnostics ; 
  Test class definition:          : using System . Diagnostics ; 
  Test struct definition:         : using System . Diagnostics ; 
  Test C# function definition:    : using System . Diagnostics ; 
  Test control definition:        : using System . Diagnostics ; 
  Test C# declaration:            : using System . Diagnostics ; 
  Handle C# declaration:          : using System . Diagnostics ; 
  Test begin scope                : using System . IO ; 
  Test end scope                  : using System . IO ; 
  Test preproc statement:         : using System . IO ; 
  Test namespace definition:      : using System . IO ; 
  Test class definition:          : using System . IO ; 
  Test struct definition:         : using System . IO ; 
  Test C# function definition:    : using System . IO ; 
  Test control definition:        : using System . IO ; 
  Test C# declaration:            : using System . IO ; 
  Handle C# declaration:          : using System . IO ; 
  Test begin scope                : using System . Linq ; 
  Test end scope                  : using System . Linq ; 
  Test preproc statement:         : using System . Linq ; 
  Test namespace definition:      : using System . Linq ; 
  Test class definition:          : using System . Linq ; 
  Test struct definition:         : using System . Linq ; 
  Test C# function definition:    : using System . Linq ; 
  Test control definition:        : using System . Linq ; 
  Test C# declaration:            : using System . Linq ; 
  Handle C# declaration:          : using System . Linq ; 
  Test begin scope                : using System . Runtime . InteropServices ; 
  Test end scope                  : using System . Runtime . InteropServices ; 
  Test preproc statement:         : using System . Runtime . InteropServices ; 
  Test namespace definition:      : using System . Runtime . InteropServices ; 
  Test class definition:          : using System . Runtime . InteropServices ; 
  Test struct definition:         : using System . Runtime . InteropServices ; 
  Test C# function definition:    : using System . Runtime . InteropServices ; 
  Test control definition:        : using System . Runtime . InteropServices ; 
  Test C# declaration:            : using System . Runtime . InteropServices ; 
  Handle C# declaration:          : using System . Runtime . InteropServices ; 
  Test begin scope                : using System . ServiceModel ; 
  Test end scope                  : using System . ServiceModel ; 
  Test preproc statement:         : using System . ServiceModel ; 
  Test namespace definition:      : using System . ServiceModel ; 
  Test class definition:          : using System . ServiceModel ; 
  Test struct definition:         : using System . ServiceModel ; 
  Test C# function definition:    : using System . ServiceModel ; 
  Test control definition:        : using System . ServiceModel ; 
  Test C# declaration:            : using System . ServiceModel ; 
  Handle C# declaration:          : using System . ServiceModel ; 
  Test begin scope                : using System . Text ; 
  Test end scope                  : using System . Text ; 
  Test preproc statement:         : using System . Text ; 
  Test namespace definition:      : using System . Text ; 
  Test class definition:          : using System . Text ; 
  Test struct definition:         : using System . Text ; 
  Test C# function definition:    : using System . Text ; 
  Test control definition:        : using System . Text ; 
  Test C# declaration:            : using System . Text ; 
  Handle C# declaration:          : using System . Text ; 
  Test begin scope                : using System . Threading ; 
  Test end scope                  : using System . Threading ; 
  Test preproc statement:         : using System . Threading ; 
  Test namespace definition:      : using System . Threading ; 
  Test class definition:          : using System . Threading ; 
  Test struct definition:         : using System . Threading ; 
  Test C# function definition:    : using System . Threading ; 
  Test control definition:        : using System . Threading ; 
  Test C# declaration:            : using System . Threading ; 
  Handle C# declaration:          : using System . Threading ; 
  Test begin scope                : using System . Threading . Tasks ; 
  Test end scope                  : using System . Threading . Tasks ; 
  Test preproc statement:         : using System . Threading . Tasks ; 
  Test namespace definition:      : using System . Threading . Tasks ; 
  Test class definition:          : using System . Threading . Tasks ; 
  Test struct definition:         : using System . Threading . Tasks ; 
  Test C# function definition:    : using System . Threading . Tasks ; 
  Test control definition:        : using System . Threading . Tasks ; 
  Test C# declaration:            : using System . Threading . Tasks ; 
  Handle C# declaration:          : using System . Threading . Tasks ; 
  Test begin scope                : using Utilities ; 
  Test end scope                  : using Utilities ; 
  Test preproc statement:         : using Utilities ; 
  Test namespace definition:      : using Utilities ; 
  Test class definition:          : using Utilities ; 
  Test struct definition:         : using Utilities ; 
  Test C# function definition:    : using Utilities ; 
  Test control definition:        : using Utilities ; 
  Test C# declaration:            : using Utilities ; 
  Handle C# declaration:          : using Utilities ; 
  Test begin scope                : namespace Buider { 
  handle begin scope              : namespace Buider { 
--- stack size = 2 ---
  Test end scope                  : namespace Buider { 
  namespace def  : namespace Buider { 
  Test preproc statement:         : namespace Buider { 
  Test namespace definition:      : namespace Buider { 
  Handle namespace definition:    : namespace Buider { 
  Test begin scope                : public class Builder { 
  handle begin scope              : public class Builder { 
--- stack size = 3 ---
  Test end scope                  : public class Builder { 
  class def      : public class Builder { 
  Test preproc statement:         : public class Builder { 
  Test namespace definition:      : public class Builder { 
  Test class definition:          : public class Builder { 
  Handle class definition:        : public class Builder { 
  Test begin scope                : private List < string > fname { 
  handle begin scope              : private List < string > fname { 
--- stack size = 4 ---
  Test end scope                  : private List < string > fname { 
  Test preproc statement:         : private List < string > fname { 
  Test namespace definition:      : private List < string > fname { 
  default:       : private List < string > fname { 
  Test class definition:          : private List < string > fname { 
  default:       : get ; 
  Test struct definition:         : private List < string > fname { 
  Test C# function definition:    : private List < string > fname { 
  Test control definition:        : private List < string > fname { 
  default:       : set ; 
  Test C# declaration:            : private List < string > fname { 
--- stack size = 3 ---
  Test C# executable:             : private List < string > fname { 
  Test default:                   : private List < string > fname { 
  Handle default:                 : private List < string > fname { 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  function declar: = new List < string > ( ) ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = new List < string > ( ) ; 
  Test end scope                  : = new List < string > ( ) ; 
  Test preproc statement:         : = new List < string > ( ) ; 
  Test namespace definition:      : = new List < string > ( ) ; 
  Test class definition:          : = new List < string > ( ) ; 
  Test struct definition:         : = new List < string > ( ) ; 
  Test C# function definition:    : = new List < string > ( ) ; 
  Test control definition:        : = new List < string > ( ) ; 
  Test C# declaration:            : = new List < string > ( ) ; 
  Handle C# declaration:          : = new List < string > ( ) ; 
  Test begin scope                : private List < string > fnames { 
  handle begin scope              : private List < string > fnames { 
--- stack size = 4 ---
  Test end scope                  : private List < string > fnames { 
  Test preproc statement:         : private List < string > fnames { 
  Test namespace definition:      : private List < string > fnames { 
  Test class definition:          : private List < string > fnames { 
  default:       : private List < string > fnames { 
  Test struct definition:         : private List < string > fnames { 
  Test C# function definition:    : private List < string > fnames { 
  default:       : get ; 
  Test control definition:        : private List < string > fnames { 
  Test C# declaration:            : private List < string > fnames { 
  Test C# executable:             : private List < string > fnames { 
  default:       : set ; 
  Test default:                   : private List < string > fnames { 
--- stack size = 3 ---
  Handle default:                 : private List < string > fnames { 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  function declar: = new List < string > ( ) ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = new List < string > ( ) ; 
  Test end scope                  : = new List < string > ( ) ; 
  Test preproc statement:         : = new List < string > ( ) ; 
  Test namespace definition:      : = new List < string > ( ) ; 
  Test class definition:          : = new List < string > ( ) ; 
  Test struct definition:         : = new List < string > ( ) ; 
  Test C# function definition:    : = new List < string > ( ) ; 
  Test control definition:        : = new List < string > ( ) ; 
  Test C# declaration:            : = new List < string > ( ) ; 
  Handle C# declaration:          : = new List < string > ( ) ; 
  Test begin scope                : private static Comm comm { 
  handle begin scope              : private static Comm comm { 
--- stack size = 4 ---
  Test end scope                  : private static Comm comm { 
  Test preproc statement:         : private static Comm comm { 
  Test namespace definition:      : private static Comm comm { 
  default:       : private static Comm comm { 
  Test class definition:          : private static Comm comm { 
  Test struct definition:         : private static Comm comm { 
  Test C# function definition:    : private static Comm comm { 
  default:       : get ; 
  Test control definition:        : private static Comm comm { 
  Test C# declaration:            : private static Comm comm { 
  Test C# executable:             : private static Comm comm { 
  default:       : set ; 
  Test default:                   : private static Comm comm { 
--- stack size = 3 ---
  Handle default:                 : private static Comm comm { 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  executable     : = null ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = null ; 
  Test end scope                  : = null ; 
  Test preproc statement:         : = null ; 
  Test namespace definition:      : = null ; 
  Test class definition:          : = null ; 
  Test struct definition:         : = null ; 
  Test C# function definition:    : = null ; 
  Test control definition:        : = null ; 
  Test C# declaration:            : = null ; 
  Test C# executable:             : = null ; 
  Handle C# executable:           : = null ; 
  Test begin scope                : private static string port { 
  handle begin scope              : private static string port { 
--- stack size = 4 ---
  Test end scope                  : private static string port { 
  Test preproc statement:         : private static string port { 
  Test namespace definition:      : private static string port { 
  default:       : private static string port { 
  Test class definition:          : private static string port { 
  Test struct definition:         : private static string port { 
  default:       : get ; 
  Test C# function definition:    : private static string port { 
  Test control definition:        : private static string port { 
  default:       : set ; 
  Test C# declaration:            : private static string port { 
--- stack size = 3 ---
  Test C# executable:             : private static string port { 
  Test default:                   : private static string port { 
  Handle default:                 : private static string port { 
  Test begin scope                : get ; 
  executable     : = "" ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = "" ; 
  Test end scope                  : = "" ; 
  Test preproc statement:         : = "" ; 
  Test namespace definition:      : = "" ; 
  Test class definition:          : = "" ; 
  Test struct definition:         : = "" ; 
  Test C# function definition:    : = "" ; 
  Test control definition:        : = "" ; 
  Test C# declaration:            : = "" ; 
  Test C# executable:             : = "" ; 
  Handle C# executable:           : = "" ; 
  Test begin scope                : private static string files { 
  handle begin scope              : private static string files { 
--- stack size = 4 ---
  Test end scope                  : private static string files { 
  Test preproc statement:         : private static string files { 
  Test namespace definition:      : private static string files { 
  Test class definition:          : private static string files { 
  default:       : private static string files { 
  Test struct definition:         : private static string files { 
  Test C# function definition:    : private static string files { 
  default:       : get ; 
  Test control definition:        : private static string files { 
  Test C# declaration:            : private static string files { 
  default:       : set ; 
  Test C# executable:             : private static string files { 
--- stack size = 3 ---
  Test default:                   : private static string files { 
  Handle default:                 : private static string files { 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  executable     : = "" ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = "" ; 
  Test end scope                  : = "" ; 
  Test preproc statement:         : = "" ; 
  Test namespace definition:      : = "" ; 
  Test class definition:          : = "" ; 
  Test struct definition:         : = "" ; 
  Test C# function definition:    : = "" ; 
  Test control definition:        : = "" ; 
  Test C# declaration:            : = "" ; 
  Test C# executable:             : = "" ; 
  Handle C# executable:           : = "" ; 
  Test begin scope                : private static string allfiles { 
  handle begin scope              : private static string allfiles { 
--- stack size = 4 ---
  Test end scope                  : private static string allfiles { 
  Test preproc statement:         : private static string allfiles { 
  Test namespace definition:      : private static string allfiles { 
  default:       : private static string allfiles { 
  Test class definition:          : private static string allfiles { 
  Test struct definition:         : private static string allfiles { 
  default:       : get ; 
  Test C# function definition:    : private static string allfiles { 
  default:       : set ; 
  Test control definition:        : private static string allfiles { 
--- stack size = 3 ---
  Test C# declaration:            : private static string allfiles { 
  Test C# executable:             : private static string allfiles { 
  Test default:                   : private static string allfiles { 
  Handle default:                 : private static string allfiles { 
  executable     : = "" ; 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = "" ; 
  Test end scope                  : = "" ; 
  Test preproc statement:         : = "" ; 
  Test namespace definition:      : = "" ; 
  Test class definition:          : = "" ; 
  Test struct definition:         : = "" ; 
  Test C# function definition:    : = "" ; 
  Test control definition:        : = "" ; 
  Test C# declaration:            : = "" ; 
  Test C# executable:             : = "" ; 
  Handle C# executable:           : = "" ; 
  Test begin scope                : private static string receivePath { 
  handle begin scope              : private static string receivePath { 
--- stack size = 4 ---
  Test end scope                  : private static string receivePath { 
  Test preproc statement:         : private static string receivePath { 
  Test namespace definition:      : private static string receivePath { 
  default:       : private static string receivePath { 
  Test class definition:          : private static string receivePath { 
  Test struct definition:         : private static string receivePath { 
  default:       : get ; 
  Test C# function definition:    : private static string receivePath { 
  default:       : set ; 
  Test control definition:        : private static string receivePath { 
--- stack size = 3 ---
  Test C# declaration:            : private static string receivePath { 
  Test C# executable:             : private static string receivePath { 
  Test default:                   : private static string receivePath { 
  executable     : = "" ; 
  Handle default:                 : private static string receivePath { 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = "" ; 
  Test end scope                  : = "" ; 
  Test preproc statement:         : = "" ; 
  Test namespace definition:      : = "" ; 
  Test class definition:          : = "" ; 
  Test struct definition:         : = "" ; 
  Test C# function definition:    : = "" ; 
  Test control definition:        : = "" ; 
  Test C# declaration:            : = "" ; 
  Test C# executable:             : = "" ; 
  Handle C# executable:           : = "" ; 
  Test begin scope                : private static string request { 
  handle begin scope              : private static string request { 
--- stack size = 4 ---
  Test end scope                  : private static string request { 
  Test preproc statement:         : private static string request { 
  Test namespace definition:      : private static string request { 
  default:       : private static string request { 
  Test class definition:          : private static string request { 
  Test struct definition:         : private static string request { 
  default:       : get ; 
  Test C# function definition:    : private static string request { 
  default:       : set ; 
  Test control definition:        : private static string request { 
--- stack size = 3 ---
  Test C# declaration:            : private static string request { 
  Test C# executable:             : private static string request { 
  Test default:                   : private static string request { 
  executable     : = "" ; 
  Handle default:                 : private static string request { 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = "" ; 
  Test end scope                  : = "" ; 
  Test preproc statement:         : = "" ; 
  Test namespace definition:      : = "" ; 
  Test class definition:          : = "" ; 
  Test struct definition:         : = "" ; 
  Test C# function definition:    : = "" ; 
  Test control definition:        : = "" ; 
  Test C# declaration:            : = "" ; 
  Test C# executable:             : = "" ; 
  Handle C# executable:           : = "" ; 
  Test begin scope                : public Builder ( string portno ) { 
  handle begin scope              : public Builder ( string portno ) { 
--- stack size = 4 ---
  Test end scope                  : public Builder ( string portno ) { 
  Test preproc statement:         : public Builder ( string portno ) { 
  Test namespace definition:      : public Builder ( string portno ) { 
  function def   : public Builder ( string portno ) { 
  Test class definition:          : public Builder ( string portno ) { 
  Test struct definition:         : public Builder ( string portno ) { 
  Test C# function definition:    : public Builder ( string portno ) { 
  Handle C# function definition:  : public Builder ( string portno ) { 
  Test begin scope                : if ( receivePath == "" ) { 
  handle begin scope              : if ( receivePath == "" ) { 
--- stack size = 5 ---
  Test end scope                  : if ( receivePath == "" ) { 
  Test preproc statement:         : if ( receivePath == "" ) { 
  Test namespace definition:      : if ( receivePath == "" ) { 
  Test class definition:          : if ( receivePath == "" ) { 
  control def    : if ( receivePath == "" ) { 
  Test struct definition:         : if ( receivePath == "" ) { 
  Test C# function definition:    : if ( receivePath == "" ) { 
  Test control definition:        : if ( receivePath == "" ) { 
  Handle control definition:      : if ( receivePath == "" ) { 
  Test begin scope                : 
    if ( ! Directory . Exists ( "../../../Buider/buildStorage" + portno ) ) Directory . CreateDirectory ( "../../../Buider/buildStorage" + portno ) ; 
  Test end scope                  : 
    if ( ! Directory . Exists ( "../../../Buider/buildStorage" + portno ) ) Directory . CreateDirectory ( "../../../Buider/buildStorage" + portno ) ; 
  Test preproc statement:         : 
    if ( ! Directory . Exists ( "../../../Buider/buildStorage" + portno ) ) Directory . CreateDirectory ( "../../../Buider/buildStorage" + portno ) ; 
  Test namespace definition:      : 
    if ( ! Directory . Exists ( "../../../Buider/buildStorage" + portno ) ) Directory . CreateDirectory ( "../../../Buider/buildStorage" + portno ) ; 
  Test class definition:          : 
    if ( ! Directory . Exists ( "../../../Buider/buildStorage" + portno ) ) Directory . CreateDirectory ( "../../../Buider/buildStorage" + portno ) ; 
  executable     : 
    if ( ! Directory . Exists ( "../../../Buider/buildStorage" + portno ) ) Directory . CreateDirectory ( "../../../Buider/buildStorage" + portno ) ; 
  Test struct definition:         : 
    if ( ! Directory . Exists ( "../../../Buider/buildStorage" + portno ) ) Directory . CreateDirectory ( "../../../Buider/buildStorage" + portno ) ; 
  Test C# function definition:    : 
    if ( ! Directory . Exists ( "../../../Buider/buildStorage" + portno ) ) Directory . CreateDirectory ( "../../../Buider/buildStorage" + portno ) ; 
  executable     : receivePath = receivePath + "../../../Buider/buildStorage" + portno ; 
  Test control definition:        : 
    if ( ! Directory . Exists ( "../../../Buider/buildStorage" + portno ) ) Directory . CreateDirectory ( "../../../Buider/buildStorage" + portno ) ; 
--- stack size = 4 ---
  Test C# declaration:            : 
    if ( ! Directory . Exists ( "../../../Buider/buildStorage" + portno ) ) Directory . CreateDirectory ( "../../../Buider/buildStorage" + portno ) ; 
  Test C# executable:             : 
    if ( ! Directory . Exists ( "../../../Buider/buildStorage" + portno ) ) Directory . CreateDirectory ( "../../../Buider/buildStorage" + portno ) ; 
  Handle C# executable:           : 
    if ( ! Directory . Exists ( "../../../Buider/buildStorage" + portno ) ) Directory . CreateDirectory ( "../../../Buider/buildStorage" + portno ) ; 
  Test begin scope                : receivePath = receivePath + "../../../Buider/buildStorage" + portno ; 
  Test end scope                  : receivePath = receivePath + "../../../Buider/buildStorage" + portno ; 
  Test preproc statement:         : receivePath = receivePath + "../../../Buider/buildStorage" + portno ; 
  Test namespace definition:      : receivePath = receivePath + "../../../Buider/buildStorage" + portno ; 
  Test class definition:          : receivePath = receivePath + "../../../Buider/buildStorage" + portno ; 
  Test struct definition:         : receivePath = receivePath + "../../../Buider/buildStorage" + portno ; 
  Test C# function definition:    : receivePath = receivePath + "../../../Buider/buildStorage" + portno ; 
  Test control definition:        : receivePath = receivePath + "../../../Buider/buildStorage" + portno ; 
  Test C# declaration:            : receivePath = receivePath + "../../../Buider/buildStorage" + portno ; 
  Test C# executable:             : receivePath = receivePath + "../../../Buider/buildStorage" + portno ; 
  Handle C# executable:           : receivePath = receivePath + "../../../Buider/buildStorage" + portno ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  Test end scope                  : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  Test preproc statement:         : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  Test namespace definition:      : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  executable     : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  Test class definition:          : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
--- stack size = 4 ---
  Test struct definition:         : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
--- stack size = 3 ---
  Test C# function definition:    : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  Test control definition:        : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  Test C# declaration:            : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  Test C# executable:             : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  Handle C# executable:           : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public bool processRequest ( string request ) { 
  handle begin scope              : public bool processRequest ( string request ) { 
--- stack size = 4 ---
  Test end scope                  : public bool processRequest ( string request ) { 
  Test preproc statement:         : public bool processRequest ( string request ) { 
  function def   : public bool processRequest ( string request ) { 
  Test namespace definition:      : public bool processRequest ( string request ) { 
  Test class definition:          : public bool processRequest ( string request ) { 
  Test struct definition:         : public bool processRequest ( string request ) { 
  Test C# function definition:    : public bool processRequest ( string request ) { 
  Handle C# function definition:  : public bool processRequest ( string request ) { 
  Test begin scope                : TestRequest newRequest = request . FromXml < TestRequest > ( ) ; 
  data declar    : TestRequest newRequest = request . FromXml < TestRequest > ( ) ; 
  Test end scope                  : TestRequest newRequest = request . FromXml < TestRequest > ( ) ; 
  Test preproc statement:         : TestRequest newRequest = request . FromXml < TestRequest > ( ) ; 
  Test namespace definition:      : TestRequest newRequest = request . FromXml < TestRequest > ( ) ; 
  Test class definition:          : TestRequest newRequest = request . FromXml < TestRequest > ( ) ; 
  data declar    : string typeName = newRequest . GetType ( ) . Name ; 
  Test struct definition:         : TestRequest newRequest = request . FromXml < TestRequest > ( ) ; 
  Test C# function definition:    : TestRequest newRequest = request . FromXml < TestRequest > ( ) ; 
  Test control definition:        : TestRequest newRequest = request . FromXml < TestRequest > ( ) ; 
  Test C# declaration:            : TestRequest newRequest = request . FromXml < TestRequest > ( ) ; 
  executable     : Console . WriteLine ( "          ====================================" ) ; 
  Handle C# declaration:          : TestRequest newRequest = request . FromXml < TestRequest > ( ) ; 
  Test begin scope                : string typeName = newRequest . GetType ( ) . Name ; 
  executable     : Console . WriteLine ( "\n             Parsing the test request" ) ; 
  Test end scope                  : string typeName = newRequest . GetType ( ) . Name ; 
  Test preproc statement:         : string typeName = newRequest . GetType ( ) . Name ; 
  Test namespace definition:      : string typeName = newRequest . GetType ( ) . Name ; 
  Test class definition:          : string typeName = newRequest . GetType ( ) . Name ; 
  executable     : Console . WriteLine ( "          ====================================" ) ; 
  Test struct definition:         : string typeName = newRequest . GetType ( ) . Name ; 
  Test C# function definition:    : string typeName = newRequest . GetType ( ) . Name ; 
  Test control definition:        : string typeName = newRequest . GetType ( ) . Name ; 
  Test C# declaration:            : string typeName = newRequest . GetType ( ) . Name ; 
  Handle C# declaration:          : string typeName = newRequest . GetType ( ) . Name ; 
  executable     : 
    Console . Write ( "\n\nDeserializing xml string results in type: {0}" , typeName ) ; 
  Test begin scope                : Console . WriteLine ( "          ====================================" ) ; 
  Test end scope                  : Console . WriteLine ( "          ====================================" ) ; 
  Test preproc statement:         : Console . WriteLine ( "          ====================================" ) ; 
  executable     : Console . Write ( newRequest ) ; 
  Test namespace definition:      : Console . WriteLine ( "          ====================================" ) ; 
  Test class definition:          : Console . WriteLine ( "          ====================================" ) ; 
  Test struct definition:         : Console . WriteLine ( "          ====================================" ) ; 
  executable     : Console . WriteLine ( "\n**********************************************" ) ; 
  Test C# function definition:    : Console . WriteLine ( "          ====================================" ) ; 
  Test control definition:        : Console . WriteLine ( "          ====================================" ) ; 
  executable     : Console . WriteLine ( ) ; 
  Test C# declaration:            : Console . WriteLine ( "          ====================================" ) ; 
  Test C# executable:             : Console . WriteLine ( "          ====================================" ) ; 
  Handle C# executable:           : Console . WriteLine ( "          ====================================" ) ; 
  Test begin scope                : Console . WriteLine ( "\n             Parsing the test request" ) ; 
  Test end scope                  : Console . WriteLine ( "\n             Parsing the test request" ) ; 
  Test preproc statement:         : Console . WriteLine ( "\n             Parsing the test request" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n             Parsing the test request" ) ; 
  Test class definition:          : Console . WriteLine ( "\n             Parsing the test request" ) ; 
  Test struct definition:         : Console . WriteLine ( "\n             Parsing the test request" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n             Parsing the test request" ) ; 
  Test control definition:        : Console . WriteLine ( "\n             Parsing the test request" ) ; 
  Test C# declaration:            : Console . WriteLine ( "\n             Parsing the test request" ) ; 
  Test C# executable:             : Console . WriteLine ( "\n             Parsing the test request" ) ; 
  Handle C# executable:           : Console . WriteLine ( "\n             Parsing the test request" ) ; 
  Test begin scope                : Console . WriteLine ( "          ====================================" ) ; 
  Test end scope                  : Console . WriteLine ( "          ====================================" ) ; 
  Test preproc statement:         : Console . WriteLine ( "          ====================================" ) ; 
  Test namespace definition:      : Console . WriteLine ( "          ====================================" ) ; 
  Test class definition:          : Console . WriteLine ( "          ====================================" ) ; 
  Test struct definition:         : Console . WriteLine ( "          ====================================" ) ; 
  Test C# function definition:    : Console . WriteLine ( "          ====================================" ) ; 
  Test control definition:        : Console . WriteLine ( "          ====================================" ) ; 
  Test C# declaration:            : Console . WriteLine ( "          ====================================" ) ; 
  Test C# executable:             : Console . WriteLine ( "          ====================================" ) ; 
  Handle C# executable:           : Console . WriteLine ( "          ====================================" ) ; 
  Test begin scope                : 
    Console . Write ( "\n\nDeserializing xml string results in type: {0}" , typeName ) ; 
  Test end scope                  : 
    Console . Write ( "\n\nDeserializing xml string results in type: {0}" , typeName ) ; 
  Test preproc statement:         : 
    Console . Write ( "\n\nDeserializing xml string results in type: {0}" , typeName ) ; 
  Test namespace definition:      : 
    Console . Write ( "\n\nDeserializing xml string results in type: {0}" , typeName ) ; 
  Test class definition:          : 
    Console . Write ( "\n\nDeserializing xml string results in type: {0}" , typeName ) ; 
  Test struct definition:         : 
    Console . Write ( "\n\nDeserializing xml string results in type: {0}" , typeName ) ; 
  Test C# function definition:    : 
    Console . Write ( "\n\nDeserializing xml string results in type: {0}" , typeName ) ; 
  Test control definition:        : 
    Console . Write ( "\n\nDeserializing xml string results in type: {0}" , typeName ) ; 
  Test C# declaration:            : 
    Console . Write ( "\n\nDeserializing xml string results in type: {0}" , typeName ) ; 
  Test C# executable:             : 
    Console . Write ( "\n\nDeserializing xml string results in type: {0}" , typeName ) ; 
  Handle C# executable:           : 
    Console . Write ( "\n\nDeserializing xml string results in type: {0}" , typeName ) ; 
  Test begin scope                : Console . Write ( newRequest ) ; 
  Test end scope                  : Console . Write ( newRequest ) ; 
  Test preproc statement:         : Console . Write ( newRequest ) ; 
  Test namespace definition:      : Console . Write ( newRequest ) ; 
  Test class definition:          : Console . Write ( newRequest ) ; 
  Test struct definition:         : Console . Write ( newRequest ) ; 
  Test C# function definition:    : Console . Write ( newRequest ) ; 
  Test control definition:        : Console . Write ( newRequest ) ; 
  Test C# declaration:            : Console . Write ( newRequest ) ; 
  Test C# executable:             : Console . Write ( newRequest ) ; 
  Handle C# executable:           : Console . Write ( newRequest ) ; 
  Test begin scope                : Console . WriteLine ( "\n**********************************************" ) ; 
  Test end scope                  : Console . WriteLine ( "\n**********************************************" ) ; 
  Test preproc statement:         : Console . WriteLine ( "\n**********************************************" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n**********************************************" ) ; 
  Test class definition:          : Console . WriteLine ( "\n**********************************************" ) ; 
  Test struct definition:         : Console . WriteLine ( "\n**********************************************" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n**********************************************" ) ; 
  Test control definition:        : Console . WriteLine ( "\n**********************************************" ) ; 
  Test C# declaration:            : Console . WriteLine ( "\n**********************************************" ) ; 
  Test C# executable:             : Console . WriteLine ( "\n**********************************************" ) ; 
  Handle C# executable:           : Console . WriteLine ( "\n**********************************************" ) ; 
  Test begin scope                : Console . WriteLine ( ) ; 
  Test end scope                  : Console . WriteLine ( ) ; 
  Test preproc statement:         : Console . WriteLine ( ) ; 
  Test namespace definition:      : Console . WriteLine ( ) ; 
  Test class definition:          : Console . WriteLine ( ) ; 
  Test struct definition:         : Console . WriteLine ( ) ; 
  Test C# function definition:    : Console . WriteLine ( ) ; 
  Test control definition:        : Console . WriteLine ( ) ; 
  Test C# declaration:            : Console . WriteLine ( ) ; 
  Test C# executable:             : Console . WriteLine ( ) ; 
  Handle C# executable:           : Console . WriteLine ( ) ; 
  Test begin scope                : if ( newRequest . tests . Count ( ) > 0 ) { 
  handle begin scope              : if ( newRequest . tests . Count ( ) > 0 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( newRequest . tests . Count ( ) > 0 ) { 
  Test preproc statement:         : if ( newRequest . tests . Count ( ) > 0 ) { 
  Test namespace definition:      : if ( newRequest . tests . Count ( ) > 0 ) { 
  Test class definition:          : if ( newRequest . tests . Count ( ) > 0 ) { 
  control def    : if ( newRequest . tests . Count ( ) > 0 ) { 
  Test struct definition:         : if ( newRequest . tests . Count ( ) > 0 ) { 
  Test C# function definition:    : if ( newRequest . tests . Count ( ) > 0 ) { 
  Test control definition:        : if ( newRequest . tests . Count ( ) > 0 ) { 
  Handle control definition:      : if ( newRequest . tests . Count ( ) > 0 ) { 
  Test begin scope                : foreach ( TestElement test in newRequest . tests ) { 
  handle begin scope              : foreach ( TestElement test in newRequest . tests ) { 
--- stack size = 6 ---
  Test end scope                  : foreach ( TestElement test in newRequest . tests ) { 
  Test preproc statement:         : foreach ( TestElement test in newRequest . tests ) { 
  Test namespace definition:      : foreach ( TestElement test in newRequest . tests ) { 
  control def    : foreach ( TestElement test in newRequest . tests ) { 
  Test class definition:          : foreach ( TestElement test in newRequest . tests ) { 
  Test struct definition:         : foreach ( TestElement test in newRequest . tests ) { 
  Test C# function definition:    : foreach ( TestElement test in newRequest . tests ) { 
  Test control definition:        : foreach ( TestElement test in newRequest . tests ) { 
  Handle control definition:      : foreach ( TestElement test in newRequest . tests ) { 
  Test begin scope                : if ( test . testName != null ) { 
  handle begin scope              : if ( test . testName != null ) { 
--- stack size = 7 ---
  Test end scope                  : if ( test . testName != null ) { 
  Test preproc statement:         : if ( test . testName != null ) { 
  Test namespace definition:      : if ( test . testName != null ) { 
  control def    : if ( test . testName != null ) { 
  Test class definition:          : if ( test . testName != null ) { 
  Test struct definition:         : if ( test . testName != null ) { 
  Test C# function definition:    : if ( test . testName != null ) { 
  Test control definition:        : if ( test . testName != null ) { 
  Handle control definition:      : if ( test . testName != null ) { 
  Test begin scope                : files = files + test . testName + " " ; 
  Test end scope                  : files = files + test . testName + " " ; 
  executable     : files = files + test . testName + " " ; 
  Test preproc statement:         : files = files + test . testName + " " ; 
--- stack size = 6 ---
  Test namespace definition:      : files = files + test . testName + " " ; 
  Test class definition:          : files = files + test . testName + " " ; 
  Test struct definition:         : files = files + test . testName + " " ; 
  Test C# function definition:    : files = files + test . testName + " " ; 
  Test control definition:        : files = files + test . testName + " " ; 
  Test C# declaration:            : files = files + test . testName + " " ; 
  Test C# executable:             : files = files + test . testName + " " ; 
  Handle C# executable:           : files = files + test . testName + " " ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : if ( test . testDriver != null ) { 
  handle begin scope              : if ( test . testDriver != null ) { 
--- stack size = 7 ---
  Test end scope                  : if ( test . testDriver != null ) { 
  Test preproc statement:         : if ( test . testDriver != null ) { 
  Test namespace definition:      : if ( test . testDriver != null ) { 
  control def    : if ( test . testDriver != null ) { 
  Test class definition:          : if ( test . testDriver != null ) { 
  Test struct definition:         : if ( test . testDriver != null ) { 
  Test C# function definition:    : if ( test . testDriver != null ) { 
  Test control definition:        : if ( test . testDriver != null ) { 
  Handle control definition:      : if ( test . testDriver != null ) { 
  executable     : files = files + test . testDriver ; 
  Test begin scope                : files = files + test . testDriver ; 
  Test end scope                  : files = files + test . testDriver ; 
  Test preproc statement:         : files = files + test . testDriver ; 
  Test namespace definition:      : files = files + test . testDriver ; 
  Test class definition:          : files = files + test . testDriver ; 
  executable     : allfiles = allfiles + test . testDriver ; 
  Test struct definition:         : files = files + test . testDriver ; 
  Test C# function definition:    : files = files + test . testDriver ; 
  Test control definition:        : files = files + test . testDriver ; 
  Test C# declaration:            : files = files + test . testDriver ; 
  Test C# executable:             : files = files + test . testDriver ; 
  Handle C# executable:           : files = files + test . testDriver ; 
  executable     : fname . Add ( test . testDriver ) ; 
  Test begin scope                : allfiles = allfiles + test . testDriver ; 
--- stack size = 6 ---
  Test end scope                  : allfiles = allfiles + test . testDriver ; 
  Test preproc statement:         : allfiles = allfiles + test . testDriver ; 
  Test namespace definition:      : allfiles = allfiles + test . testDriver ; 
  Test class definition:          : allfiles = allfiles + test . testDriver ; 
  Test struct definition:         : allfiles = allfiles + test . testDriver ; 
  Test C# function definition:    : allfiles = allfiles + test . testDriver ; 
  Test control definition:        : allfiles = allfiles + test . testDriver ; 
  Test C# declaration:            : allfiles = allfiles + test . testDriver ; 
  Test C# executable:             : allfiles = allfiles + test . testDriver ; 
  Handle C# executable:           : allfiles = allfiles + test . testDriver ; 
  Test begin scope                : fname . Add ( test . testDriver ) ; 
  Test end scope                  : fname . Add ( test . testDriver ) ; 
  Test preproc statement:         : fname . Add ( test . testDriver ) ; 
  Test namespace definition:      : fname . Add ( test . testDriver ) ; 
  Test class definition:          : fname . Add ( test . testDriver ) ; 
  Test struct definition:         : fname . Add ( test . testDriver ) ; 
  Test C# function definition:    : fname . Add ( test . testDriver ) ; 
  Test control definition:        : fname . Add ( test . testDriver ) ; 
  Test C# declaration:            : fname . Add ( test . testDriver ) ; 
  Test C# executable:             : fname . Add ( test . testDriver ) ; 
  Handle C# executable:           : fname . Add ( test . testDriver ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : if ( test . testCodes != null ) { 
  handle begin scope              : if ( test . testCodes != null ) { 
--- stack size = 7 ---
  Test end scope                  : if ( test . testCodes != null ) { 
  Test preproc statement:         : if ( test . testCodes != null ) { 
  Test namespace definition:      : if ( test . testCodes != null ) { 
  Test class definition:          : if ( test . testCodes != null ) { 
  control def    : if ( test . testCodes != null ) { 
  Test struct definition:         : if ( test . testCodes != null ) { 
  Test C# function definition:    : if ( test . testCodes != null ) { 
  Test control definition:        : if ( test . testCodes != null ) { 
  Handle control definition:      : if ( test . testCodes != null ) { 
  Test begin scope                : foreach ( string testcode in test . testCodes ) { 
  handle begin scope              : foreach ( string testcode in test . testCodes ) { 
--- stack size = 8 ---
  Test end scope                  : foreach ( string testcode in test . testCodes ) { 
  Test preproc statement:         : foreach ( string testcode in test . testCodes ) { 
  Test namespace definition:      : foreach ( string testcode in test . testCodes ) { 
  control def    : foreach ( string testcode in test . testCodes ) { 
  Test class definition:          : foreach ( string testcode in test . testCodes ) { 
  Test struct definition:         : foreach ( string testcode in test . testCodes ) { 
  Test C# function definition:    : foreach ( string testcode in test . testCodes ) { 
  Test control definition:        : foreach ( string testcode in test . testCodes ) { 
  Handle control definition:      : foreach ( string testcode in test . testCodes ) { 
  executable     : files = files + " " + testcode + " " ; 
  Test begin scope                : files = files + " " + testcode + " " ; 
  Test end scope                  : files = files + " " + testcode + " " ; 
  Test preproc statement:         : files = files + " " + testcode + " " ; 
  Test namespace definition:      : files = files + " " + testcode + " " ; 
  Test class definition:          : files = files + " " + testcode + " " ; 
  Test struct definition:         : files = files + " " + testcode + " " ; 
  executable     : allfiles = allfiles + " " + testcode + " " ; 
  Test C# function definition:    : files = files + " " + testcode + " " ; 
  Test control definition:        : files = files + " " + testcode + " " ; 
  Test C# declaration:            : files = files + " " + testcode + " " ; 
  Test C# executable:             : files = files + " " + testcode + " " ; 
  Handle C# executable:           : files = files + " " + testcode + " " ; 
  executable     : fname . Add ( testcode ) ; 
  Test begin scope                : allfiles = allfiles + " " + testcode + " " ; 
--- stack size = 7 ---
  Test end scope                  : allfiles = allfiles + " " + testcode + " " ; 
  Test preproc statement:         : allfiles = allfiles + " " + testcode + " " ; 
  Test namespace definition:      : allfiles = allfiles + " " + testcode + " " ; 
  Test class definition:          : allfiles = allfiles + " " + testcode + " " ; 
  Test struct definition:         : allfiles = allfiles + " " + testcode + " " ; 
  Test C# function definition:    : allfiles = allfiles + " " + testcode + " " ; 
  executable     : fnames . Add ( files ) ; 
  Test control definition:        : allfiles = allfiles + " " + testcode + " " ; 
  Test C# declaration:            : allfiles = allfiles + " " + testcode + " " ; 
  Test C# executable:             : allfiles = allfiles + " " + testcode + " " ; 
  executable     : files = "" ; 
  Handle C# executable:           : allfiles = allfiles + " " + testcode + " " ; 
--- stack size = 6 ---
  Test begin scope                : fname . Add ( testcode ) ; 
--- stack size = 5 ---
  Test end scope                  : fname . Add ( testcode ) ; 
  Test preproc statement:         : fname . Add ( testcode ) ; 
  Test namespace definition:      : fname . Add ( testcode ) ; 
  Test class definition:          : fname . Add ( testcode ) ; 
  Test struct definition:         : fname . Add ( testcode ) ; 
  Test C# function definition:    : fname . Add ( testcode ) ; 
  Test control definition:        : fname . Add ( testcode ) ; 
  executable     : loadFilesToBuild ( allfiles ) ; 
  Test C# declaration:            : fname . Add ( testcode ) ; 
  Test C# executable:             : fname . Add ( testcode ) ; 
  Handle C# executable:           : fname . Add ( testcode ) ; 
  executable     : allfiles = "" ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  executable     : return true ; 
  Test begin scope                : fnames . Add ( files ) ; 
--- stack size = 4 ---
  Test end scope                  : fnames . Add ( files ) ; 
  Test preproc statement:         : fnames . Add ( files ) ; 
  Test namespace definition:      : fnames . Add ( files ) ; 
  Test class definition:          : fnames . Add ( files ) ; 
  Test struct definition:         : fnames . Add ( files ) ; 
  Test C# function definition:    : fnames . Add ( files ) ; 
  Test control definition:        : fnames . Add ( files ) ; 
  Test C# declaration:            : fnames . Add ( files ) ; 
  Test C# executable:             : fnames . Add ( files ) ; 
  Handle C# executable:           : fnames . Add ( files ) ; 
  Test begin scope                : files = "" ; 
  Test end scope                  : files = "" ; 
  Test preproc statement:         : files = "" ; 
  Test namespace definition:      : files = "" ; 
  Test class definition:          : files = "" ; 
  Test struct definition:         : files = "" ; 
  Test C# function definition:    : files = "" ; 
  Test control definition:        : files = "" ; 
  Test C# declaration:            : files = "" ; 
  Test C# executable:             : files = "" ; 
  Handle C# executable:           : files = "" ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : loadFilesToBuild ( allfiles ) ; 
  Test end scope                  : loadFilesToBuild ( allfiles ) ; 
  Test preproc statement:         : loadFilesToBuild ( allfiles ) ; 
  Test namespace definition:      : loadFilesToBuild ( allfiles ) ; 
  Test class definition:          : loadFilesToBuild ( allfiles ) ; 
  Test struct definition:         : loadFilesToBuild ( allfiles ) ; 
  Test C# function definition:    : loadFilesToBuild ( allfiles ) ; 
  Test control definition:        : loadFilesToBuild ( allfiles ) ; 
  Test C# declaration:            : loadFilesToBuild ( allfiles ) ; 
  Test C# executable:             : loadFilesToBuild ( allfiles ) ; 
  Handle C# executable:           : loadFilesToBuild ( allfiles ) ; 
  Test begin scope                : allfiles = "" ; 
  Test end scope                  : allfiles = "" ; 
  Test preproc statement:         : allfiles = "" ; 
  Test namespace definition:      : allfiles = "" ; 
  Test class definition:          : allfiles = "" ; 
  Test struct definition:         : allfiles = "" ; 
  Test C# function definition:    : allfiles = "" ; 
  Test control definition:        : allfiles = "" ; 
  Test C# declaration:            : allfiles = "" ; 
  Test C# executable:             : allfiles = "" ; 
  Handle C# executable:           : allfiles = "" ; 
  Test begin scope                : return true ; 
  Test end scope                  : return true ; 
  Test preproc statement:         : return true ; 
  Test namespace definition:      : return true ; 
  Test class definition:          : return true ; 
  Test struct definition:         : return true ; 
  Test C# function definition:    : return true ; 
  Test control definition:        : return true ; 
  Test C# declaration:            : return true ; 
  Test C# executable:             : return true ; 
  Handle C# executable:           : return true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : Console . WriteLine ( "\n\nNo test cases found" ) ; 
  Test end scope                  : Console . WriteLine ( "\n\nNo test cases found" ) ; 
  executable     : Console . WriteLine ( "\n\nNo test cases found" ) ; 
  Test preproc statement:         : Console . WriteLine ( "\n\nNo test cases found" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n\nNo test cases found" ) ; 
  Test class definition:          : Console . WriteLine ( "\n\nNo test cases found" ) ; 
  Test struct definition:         : Console . WriteLine ( "\n\nNo test cases found" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n\nNo test cases found" ) ; 
  Test control definition:        : Console . WriteLine ( "\n\nNo test cases found" ) ; 
  Test C# declaration:            : Console . WriteLine ( "\n\nNo test cases found" ) ; 
  executable     : Console . WriteLine ( "\n**********************************************" ) ; 
  Test C# executable:             : Console . WriteLine ( "\n\nNo test cases found" ) ; 
  Handle C# executable:           : Console . WriteLine ( "\n\nNo test cases found" ) ; 
  executable     : return false ; 
  Test begin scope                : Console . WriteLine ( "\n**********************************************" ) ; 
--- stack size = 4 ---
  Test end scope                  : Console . WriteLine ( "\n**********************************************" ) ; 
--- stack size = 3 ---
  Test preproc statement:         : Console . WriteLine ( "\n**********************************************" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n**********************************************" ) ; 
  Test class definition:          : Console . WriteLine ( "\n**********************************************" ) ; 
  Test struct definition:         : Console . WriteLine ( "\n**********************************************" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n**********************************************" ) ; 
  Test control definition:        : Console . WriteLine ( "\n**********************************************" ) ; 
  Test C# declaration:            : Console . WriteLine ( "\n**********************************************" ) ; 
  Test C# executable:             : Console . WriteLine ( "\n**********************************************" ) ; 
  Handle C# executable:           : Console . WriteLine ( "\n**********************************************" ) ; 
  Test begin scope                : return false ; 
  Test end scope                  : return false ; 
  Test preproc statement:         : return false ; 
  Test namespace definition:      : return false ; 
  Test class definition:          : return false ; 
  Test struct definition:         : return false ; 
  Test C# function definition:    : return false ; 
  Test control definition:        : return false ; 
  Test C# declaration:            : return false ; 
  Test C# executable:             : return false ; 
  Handle C# executable:           : return false ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void deletefiles ( ) { 
  handle begin scope              : private void deletefiles ( ) { 
--- stack size = 4 ---
  Test end scope                  : private void deletefiles ( ) { 
  Test preproc statement:         : private void deletefiles ( ) { 
  function def   : private void deletefiles ( ) { 
  Test namespace definition:      : private void deletefiles ( ) { 
  Test class definition:          : private void deletefiles ( ) { 
  Test struct definition:         : private void deletefiles ( ) { 
  Test C# function definition:    : private void deletefiles ( ) { 
  Handle C# function definition:  : private void deletefiles ( ) { 
  executable     : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test begin scope                : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test end scope                  : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : 
    Console . WriteLine ( "\n            Files in the temporary storage deleted" ) ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test class definition:          : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
--- stack size = 3 ---
  Test C# function definition:    : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test control definition:        : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# declaration:            : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test begin scope                : 
    Console . WriteLine ( "\n            Files in the temporary storage deleted" ) ; 
  Test end scope                  : 
    Console . WriteLine ( "\n            Files in the temporary storage deleted" ) ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n            Files in the temporary storage deleted" ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n            Files in the temporary storage deleted" ) ; 
  Test class definition:          : 
    Console . WriteLine ( "\n            Files in the temporary storage deleted" ) ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n            Files in the temporary storage deleted" ) ; 
  Test C# function definition:    : 
    Console . WriteLine ( "\n            Files in the temporary storage deleted" ) ; 
  Test control definition:        : 
    Console . WriteLine ( "\n            Files in the temporary storage deleted" ) ; 
  Test C# declaration:            : 
    Console . WriteLine ( "\n            Files in the temporary storage deleted" ) ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n            Files in the temporary storage deleted" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n            Files in the temporary storage deleted" ) ; 
  Test begin scope                : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test end scope                  : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test class definition:          : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# function definition:    : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test control definition:        : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# declaration:            : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void loadFilesToBuild ( string allfiles ) { 
  handle begin scope              : private void loadFilesToBuild ( string allfiles ) { 
--- stack size = 4 ---
  Test end scope                  : private void loadFilesToBuild ( string allfiles ) { 
  Test preproc statement:         : private void loadFilesToBuild ( string allfiles ) { 
  function def   : private void loadFilesToBuild ( string allfiles ) { 
  Test namespace definition:      : private void loadFilesToBuild ( string allfiles ) { 
  Test class definition:          : private void loadFilesToBuild ( string allfiles ) { 
  Test struct definition:         : private void loadFilesToBuild ( string allfiles ) { 
  Test C# function definition:    : private void loadFilesToBuild ( string allfiles ) { 
  executable     : 
    Console . WriteLine ( "\n             Loading files from repository to temporary build storage" ) ; 
  Handle C# function definition:  : private void loadFilesToBuild ( string allfiles ) { 
  Test begin scope                : 
    Console . WriteLine ( "\n             Loading files from repository to temporary build storage" ) ; 
  executable     : 
    Console . WriteLine ( "          =================================================================" ) ; 
  Test end scope                  : 
    Console . WriteLine ( "\n             Loading files from repository to temporary build storage" ) ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n             Loading files from repository to temporary build storage" ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n             Loading files from repository to temporary build storage" ) ; 
  Test class definition:          : 
    Console . WriteLine ( "\n             Loading files from repository to temporary build storage" ) ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n             Loading files from repository to temporary build storage" ) ; 
  Test C# function definition:    : 
    Console . WriteLine ( "\n             Loading files from repository to temporary build storage" ) ; 
  executable     : sndMsg . command = "confromCbuilder" ; 
  Test control definition:        : 
    Console . WriteLine ( "\n             Loading files from repository to temporary build storage" ) ; 
  Test C# declaration:            : 
    Console . WriteLine ( "\n             Loading files from repository to temporary build storage" ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n             Loading files from repository to temporary build storage" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n             Loading files from repository to temporary build storage" ) ; 
  executable     : sndMsg . to = ; 
  Test begin scope                : 
    Console . WriteLine ( "          =================================================================" ) ; 
  Test end scope                  : 
    Console . WriteLine ( "          =================================================================" ) ; 
  Test preproc statement:         : 
    Console . WriteLine ( "          =================================================================" ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "          =================================================================" ) ; 
  executable     : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test class definition:          : 
    Console . WriteLine ( "          =================================================================" ) ; 
  Test struct definition:         : 
    Console . WriteLine ( "          =================================================================" ) ; 
  executable     : sndMsg . body = "c2rconnect" ; 
  Test C# function definition:    : 
    Console . WriteLine ( "          =================================================================" ) ; 
  Test control definition:        : 
    Console . WriteLine ( "          =================================================================" ) ; 
  Test C# declaration:            : 
    Console . WriteLine ( "          =================================================================" ) ; 
  executable     : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# executable:             : 
    Console . WriteLine ( "          =================================================================" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "          =================================================================" ) ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  executable     : 
    Console . WriteLine ( "\n             Sending file request to the repository" ) ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  executable     : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  data declar    : CommMessage csndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test begin scope                : sndMsg . command = "confromCbuilder" ; 
  executable     : csndMsg . command = "reqfromCbuilder" ; 
  Test end scope                  : sndMsg . command = "confromCbuilder" ; 
  Test preproc statement:         : sndMsg . command = "confromCbuilder" ; 
  Test namespace definition:      : sndMsg . command = "confromCbuilder" ; 
  Test class definition:          : sndMsg . command = "confromCbuilder" ; 
  executable     : csndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . command = "confromCbuilder" ; 
  Test C# function definition:    : sndMsg . command = "confromCbuilder" ; 
  Test control definition:        : sndMsg . command = "confromCbuilder" ; 
  executable     : csndMsg . to = ; 
  Test C# declaration:            : sndMsg . command = "confromCbuilder" ; 
  Test C# executable:             : sndMsg . command = "confromCbuilder" ; 
  Handle C# executable:           : sndMsg . command = "confromCbuilder" ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : csndMsg . from = + port + "/IMessagePassingComm" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : csndMsg . body = receivePath + "," + allfiles ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = ; 
  Test end scope                  : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . to = ; 
  Test class definition:          : sndMsg . to = ; 
  Test struct definition:         : sndMsg . to = ; 
  Test C# function definition:    : sndMsg . to = ; 
  Test control definition:        : sndMsg . to = ; 
  executable     : csndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# declaration:            : sndMsg . to = ; 
  Test C# executable:             : sndMsg . to = ; 
  Handle C# executable:           : sndMsg . to = ; 
  Test begin scope                : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test end scope                  : sndMsg . from = + port + "/IMessagePassingComm" ; 
  executable     : comm . postMessage ( csndMsg ) ; 
  Test preproc statement:         : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test namespace definition:      : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test class definition:          : sndMsg . from = + port + "/IMessagePassingComm" ; 
  executable     : Console . WriteLine ( "\n**********************************************" ) ; 
  Test struct definition:         : sndMsg . from = + port + "/IMessagePassingComm" ; 
--- stack size = 3 ---
  Test C# function definition:    : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test control definition:        : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# declaration:            : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# executable:             : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Handle C# executable:           : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test begin scope                : sndMsg . body = "c2rconnect" ; 
  Test end scope                  : sndMsg . body = "c2rconnect" ; 
  Test preproc statement:         : sndMsg . body = "c2rconnect" ; 
  Test namespace definition:      : sndMsg . body = "c2rconnect" ; 
  Test class definition:          : sndMsg . body = "c2rconnect" ; 
  Test struct definition:         : sndMsg . body = "c2rconnect" ; 
  Test C# function definition:    : sndMsg . body = "c2rconnect" ; 
  Test control definition:        : sndMsg . body = "c2rconnect" ; 
  Test C# declaration:            : sndMsg . body = "c2rconnect" ; 
  Test C# executable:             : sndMsg . body = "c2rconnect" ; 
  Handle C# executable:           : sndMsg . body = "c2rconnect" ; 
  Test begin scope                : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test end scope                  : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test preproc statement:         : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test namespace definition:      : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test class definition:          : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test struct definition:         : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# function definition:    : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test control definition:        : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# declaration:            : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# executable:             : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Handle C# executable:           : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : 
    Console . WriteLine ( "\n             Sending file request to the repository" ) ; 
  Test end scope                  : 
    Console . WriteLine ( "\n             Sending file request to the repository" ) ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n             Sending file request to the repository" ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n             Sending file request to the repository" ) ; 
  Test class definition:          : 
    Console . WriteLine ( "\n             Sending file request to the repository" ) ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n             Sending file request to the repository" ) ; 
  Test C# function definition:    : 
    Console . WriteLine ( "\n             Sending file request to the repository" ) ; 
  Test control definition:        : 
    Console . WriteLine ( "\n             Sending file request to the repository" ) ; 
  Test C# declaration:            : 
    Console . WriteLine ( "\n             Sending file request to the repository" ) ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n             Sending file request to the repository" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n             Sending file request to the repository" ) ; 
  Test begin scope                : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test end scope                  : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test class definition:          : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# function definition:    : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test control definition:        : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# declaration:            : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test begin scope                : CommMessage csndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test end scope                  : CommMessage csndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test preproc statement:         : CommMessage csndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test namespace definition:      : CommMessage csndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test class definition:          : CommMessage csndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test struct definition:         : CommMessage csndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# function definition:    : CommMessage csndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test control definition:        : CommMessage csndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# declaration:            : CommMessage csndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Handle C# declaration:          : CommMessage csndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test begin scope                : csndMsg . command = "reqfromCbuilder" ; 
  Test end scope                  : csndMsg . command = "reqfromCbuilder" ; 
  Test preproc statement:         : csndMsg . command = "reqfromCbuilder" ; 
  Test namespace definition:      : csndMsg . command = "reqfromCbuilder" ; 
  Test class definition:          : csndMsg . command = "reqfromCbuilder" ; 
  Test struct definition:         : csndMsg . command = "reqfromCbuilder" ; 
  Test C# function definition:    : csndMsg . command = "reqfromCbuilder" ; 
  Test control definition:        : csndMsg . command = "reqfromCbuilder" ; 
  Test C# declaration:            : csndMsg . command = "reqfromCbuilder" ; 
  Test C# executable:             : csndMsg . command = "reqfromCbuilder" ; 
  Handle C# executable:           : csndMsg . command = "reqfromCbuilder" ; 
  Test begin scope                : csndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : csndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : csndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : csndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : csndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : csndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : csndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : csndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : csndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : csndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : csndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : csndMsg . to = ; 
  Test end scope                  : csndMsg . to = ; 
  Test preproc statement:         : csndMsg . to = ; 
  Test namespace definition:      : csndMsg . to = ; 
  Test class definition:          : csndMsg . to = ; 
  Test struct definition:         : csndMsg . to = ; 
  Test C# function definition:    : csndMsg . to = ; 
  Test control definition:        : csndMsg . to = ; 
  Test C# declaration:            : csndMsg . to = ; 
  Test C# executable:             : csndMsg . to = ; 
  Handle C# executable:           : csndMsg . to = ; 
  Test begin scope                : csndMsg . from = + port + "/IMessagePassingComm" ; 
  Test end scope                  : csndMsg . from = + port + "/IMessagePassingComm" ; 
  Test preproc statement:         : csndMsg . from = + port + "/IMessagePassingComm" ; 
  Test namespace definition:      : csndMsg . from = + port + "/IMessagePassingComm" ; 
  Test class definition:          : csndMsg . from = + port + "/IMessagePassingComm" ; 
  Test struct definition:         : csndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# function definition:    : csndMsg . from = + port + "/IMessagePassingComm" ; 
  Test control definition:        : csndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# declaration:            : csndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# executable:             : csndMsg . from = + port + "/IMessagePassingComm" ; 
  Handle C# executable:           : csndMsg . from = + port + "/IMessagePassingComm" ; 
  Test begin scope                : csndMsg . body = receivePath + "," + allfiles ; 
  Test end scope                  : csndMsg . body = receivePath + "," + allfiles ; 
  Test preproc statement:         : csndMsg . body = receivePath + "," + allfiles ; 
  Test namespace definition:      : csndMsg . body = receivePath + "," + allfiles ; 
  Test class definition:          : csndMsg . body = receivePath + "," + allfiles ; 
  Test struct definition:         : csndMsg . body = receivePath + "," + allfiles ; 
  Test C# function definition:    : csndMsg . body = receivePath + "," + allfiles ; 
  Test control definition:        : csndMsg . body = receivePath + "," + allfiles ; 
  Test C# declaration:            : csndMsg . body = receivePath + "," + allfiles ; 
  Test C# executable:             : csndMsg . body = receivePath + "," + allfiles ; 
  Handle C# executable:           : csndMsg . body = receivePath + "," + allfiles ; 
  Test begin scope                : csndMsg . port = Convert . ToInt32 ( port ) ; 
  Test end scope                  : csndMsg . port = Convert . ToInt32 ( port ) ; 
  Test preproc statement:         : csndMsg . port = Convert . ToInt32 ( port ) ; 
  Test namespace definition:      : csndMsg . port = Convert . ToInt32 ( port ) ; 
  Test class definition:          : csndMsg . port = Convert . ToInt32 ( port ) ; 
  Test struct definition:         : csndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# function definition:    : csndMsg . port = Convert . ToInt32 ( port ) ; 
  Test control definition:        : csndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# declaration:            : csndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# executable:             : csndMsg . port = Convert . ToInt32 ( port ) ; 
  Handle C# executable:           : csndMsg . port = Convert . ToInt32 ( port ) ; 
  Test begin scope                : comm . postMessage ( csndMsg ) ; 
  Test end scope                  : comm . postMessage ( csndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( csndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( csndMsg ) ; 
  Test class definition:          : comm . postMessage ( csndMsg ) ; 
  Test struct definition:         : comm . postMessage ( csndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( csndMsg ) ; 
  Test control definition:        : comm . postMessage ( csndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( csndMsg ) ; 
  Test C# executable:             : comm . postMessage ( csndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( csndMsg ) ; 
  Test begin scope                : Console . WriteLine ( "\n**********************************************" ) ; 
  Test end scope                  : Console . WriteLine ( "\n**********************************************" ) ; 
  Test preproc statement:         : Console . WriteLine ( "\n**********************************************" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n**********************************************" ) ; 
  Test class definition:          : Console . WriteLine ( "\n**********************************************" ) ; 
  Test struct definition:         : Console . WriteLine ( "\n**********************************************" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n**********************************************" ) ; 
  Test control definition:        : Console . WriteLine ( "\n**********************************************" ) ; 
  Test C# declaration:            : Console . WriteLine ( "\n**********************************************" ) ; 
  Test C# executable:             : Console . WriteLine ( "\n**********************************************" ) ; 
  Handle C# executable:           : Console . WriteLine ( "\n**********************************************" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private bool buildProcess ( List < string > filesnames ) { 
  handle begin scope              : private bool buildProcess ( List < string > filesnames ) { 
--- stack size = 4 ---
  Test end scope                  : private bool buildProcess ( List < string > filesnames ) { 
  Test preproc statement:         : private bool buildProcess ( List < string > filesnames ) { 
  function def   : private bool buildProcess ( List < string > filesnames ) { 
  Test namespace definition:      : private bool buildProcess ( List < string > filesnames ) { 
  Test class definition:          : private bool buildProcess ( List < string > filesnames ) { 
  Test struct definition:         : private bool buildProcess ( List < string > filesnames ) { 
  Test C# function definition:    : private bool buildProcess ( List < string > filesnames ) { 
  Handle C# function definition:  : private bool buildProcess ( List < string > filesnames ) { 
  Test begin scope                : try { 
  handle begin scope              : try { 
--- stack size = 5 ---
  Test end scope                  : try { 
  Test preproc statement:         : try { 
  control def    : try { 
  Test namespace definition:      : try { 
  Test class definition:          : try { 
  Test struct definition:         : try { 
  Test C# function definition:    : try { 
  Test control definition:        : try { 
  Handle control definition:      : try { 
  data declar    : string buildlog = "" ; 
  Test begin scope                : string buildlog = "" ; 
  Test end scope                  : string buildlog = "" ; 
  Test preproc statement:         : string buildlog = "" ; 
  Test namespace definition:      : string buildlog = "" ; 
  data declar    : string totaltests = "" ; 
  Test class definition:          : string buildlog = "" ; 
  Test struct definition:         : string buildlog = "" ; 
  Test C# function definition:    : string buildlog = "" ; 
  Test control definition:        : string buildlog = "" ; 
  Test C# declaration:            : string buildlog = "" ; 
  Handle C# declaration:          : string buildlog = "" ; 
  Test begin scope                : string totaltests = "" ; 
  Test end scope                  : string totaltests = "" ; 
  Test preproc statement:         : string totaltests = "" ; 
  Test namespace definition:      : string totaltests = "" ; 
  Test class definition:          : string totaltests = "" ; 
  Test struct definition:         : string totaltests = "" ; 
  Test C# function definition:    : string totaltests = "" ; 
  Test control definition:        : string totaltests = "" ; 
  Test C# declaration:            : string totaltests = "" ; 
  Handle C# declaration:          : string totaltests = "" ; 
  Test begin scope                : foreach ( string file in filesnames ) { 
  handle begin scope              : foreach ( string file in filesnames ) { 
--- stack size = 6 ---
  Test end scope                  : foreach ( string file in filesnames ) { 
  Test preproc statement:         : foreach ( string file in filesnames ) { 
  control def    : foreach ( string file in filesnames ) { 
  Test namespace definition:      : foreach ( string file in filesnames ) { 
  Test class definition:          : foreach ( string file in filesnames ) { 
  Test struct definition:         : foreach ( string file in filesnames ) { 
  Test C# function definition:    : foreach ( string file in filesnames ) { 
  Test control definition:        : foreach ( string file in filesnames ) { 
  Handle control definition:      : foreach ( string file in filesnames ) { 
  Test begin scope                : int index = file . IndexOf ( ' ' ) ; 
  data declar    : int index = file . IndexOf ( ' ' ) ; 
  Test end scope                  : int index = file . IndexOf ( ' ' ) ; 
  Test preproc statement:         : int index = file . IndexOf ( ' ' ) ; 
  Test namespace definition:      : int index = file . IndexOf ( ' ' ) ; 
  Test class definition:          : int index = file . IndexOf ( ' ' ) ; 
  Test struct definition:         : int index = file . IndexOf ( ' ' ) ; 
  Test C# function definition:    : int index = file . IndexOf ( ' ' ) ; 
  Test control definition:        : int index = file . IndexOf ( ' ' ) ; 
  Test C# declaration:            : int index = file . IndexOf ( ' ' ) ; 
  Handle C# declaration:          : int index = file . IndexOf ( ' ' ) ; 
  Test begin scope                : if ( index != - 1 ) { 
  handle begin scope              : if ( index != - 1 ) { 
--- stack size = 7 ---
  Test end scope                  : if ( index != - 1 ) { 
  Test preproc statement:         : if ( index != - 1 ) { 
  Test namespace definition:      : if ( index != - 1 ) { 
  control def    : if ( index != - 1 ) { 
  Test class definition:          : if ( index != - 1 ) { 
  Test struct definition:         : if ( index != - 1 ) { 
  Test C# function definition:    : if ( index != - 1 ) { 
  Test control definition:        : if ( index != - 1 ) { 
  Handle control definition:      : if ( index != - 1 ) { 
  Test begin scope                : string tname = file . Substring ( 0 , index ) ; 
  Test end scope                  : string tname = file . Substring ( 0 , index ) ; 
  Test preproc statement:         : string tname = file . Substring ( 0 , index ) ; 
  Test namespace definition:      : string tname = file . Substring ( 0 , index ) ; 
  data declar    : string tname = file . Substring ( 0 , index ) ; 
  Test class definition:          : string tname = file . Substring ( 0 , index ) ; 
  Test struct definition:         : string tname = file . Substring ( 0 , index ) ; 
  Test C# function definition:    : string tname = file . Substring ( 0 , index ) ; 
  Test control definition:        : string tname = file . Substring ( 0 , index ) ; 
  Test C# declaration:            : string tname = file . Substring ( 0 , index ) ; 
  Handle C# declaration:          : string tname = file . Substring ( 0 , index ) ; 
  Test begin scope                : string files = file . Substring ( index + 1 ) ; 
  data declar    : string files = file . Substring ( index + 1 ) ; 
  Test end scope                  : string files = file . Substring ( index + 1 ) ; 
  Test preproc statement:         : string files = file . Substring ( index + 1 ) ; 
  Test namespace definition:      : string files = file . Substring ( index + 1 ) ; 
  Test class definition:          : string files = file . Substring ( index + 1 ) ; 
  Test struct definition:         : string files = file . Substring ( index + 1 ) ; 
  function declar: Process p = new Process ( ) ; 
  Test C# function definition:    : string files = file . Substring ( index + 1 ) ; 
  Test control definition:        : string files = file . Substring ( index + 1 ) ; 
  Test C# declaration:            : string files = file . Substring ( index + 1 ) ; 
  Handle C# declaration:          : string files = file . Substring ( index + 1 ) ; 
  Test begin scope                : Process p = new Process ( ) ; 
  executable     : p . StartInfo . FileName = "cmd.exe" ; 
  Test end scope                  : Process p = new Process ( ) ; 
  Test preproc statement:         : Process p = new Process ( ) ; 
  Test namespace definition:      : Process p = new Process ( ) ; 
  Test class definition:          : Process p = new Process ( ) ; 
  Test struct definition:         : Process p = new Process ( ) ; 
  Test C# function definition:    : Process p = new Process ( ) ; 
  executable     : Console . WriteLine ( "\n             Building test library" ) ; 
  Test control definition:        : Process p = new Process ( ) ; 
  Test C# declaration:            : Process p = new Process ( ) ; 
  Handle C# declaration:          : Process p = new Process ( ) ; 
  Test begin scope                : p . StartInfo . FileName = "cmd.exe" ; 
  Test end scope                  : p . StartInfo . FileName = "cmd.exe" ; 
  Test preproc statement:         : p . StartInfo . FileName = "cmd.exe" ; 
  executable     : Console . WriteLine ( "          ===========================" ) ; 
  Test namespace definition:      : p . StartInfo . FileName = "cmd.exe" ; 
  Test class definition:          : p . StartInfo . FileName = "cmd.exe" ; 
  Test struct definition:         : p . StartInfo . FileName = "cmd.exe" ; 
  Test C# function definition:    : p . StartInfo . FileName = "cmd.exe" ; 
  Test control definition:        : p . StartInfo . FileName = "cmd.exe" ; 
  executable     : p . StartInfo . WindowStyle = ProcessWindowStyle . Hidden ; 
  Test C# declaration:            : p . StartInfo . FileName = "cmd.exe" ; 
  Test C# executable:             : p . StartInfo . FileName = "cmd.exe" ; 
  Handle C# executable:           : p . StartInfo . FileName = "cmd.exe" ; 
  Test begin scope                : Console . WriteLine ( "\n             Building test library" ) ; 
  Test end scope                  : Console . WriteLine ( "\n             Building test library" ) ; 
  Test preproc statement:         : Console . WriteLine ( "\n             Building test library" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n             Building test library" ) ; 
  Test class definition:          : Console . WriteLine ( "\n             Building test library" ) ; 
  Test struct definition:         : Console . WriteLine ( "\n             Building test library" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n             Building test library" ) ; 
  executable     : 
    p . StartInfo . Arguments = "/Ccsc /target:library /out:" + tname + ".dll " + files ; 
  Test control definition:        : Console . WriteLine ( "\n             Building test library" ) ; 
  Test C# declaration:            : Console . WriteLine ( "\n             Building test library" ) ; 
  Test C# executable:             : Console . WriteLine ( "\n             Building test library" ) ; 
  Handle C# executable:           : Console . WriteLine ( "\n             Building test library" ) ; 
  Test begin scope                : Console . WriteLine ( "          ===========================" ) ; 
  executable     : p . StartInfo . WorkingDirectory = @ receivePath ; 
  Test end scope                  : Console . WriteLine ( "          ===========================" ) ; 
  Test preproc statement:         : Console . WriteLine ( "          ===========================" ) ; 
  Test namespace definition:      : Console . WriteLine ( "          ===========================" ) ; 
  Test class definition:          : Console . WriteLine ( "          ===========================" ) ; 
  Test struct definition:         : Console . WriteLine ( "          ===========================" ) ; 
  executable     : p . StartInfo . RedirectStandardError = true ; 
  Test C# function definition:    : Console . WriteLine ( "          ===========================" ) ; 
  Test control definition:        : Console . WriteLine ( "          ===========================" ) ; 
  Test C# declaration:            : Console . WriteLine ( "          ===========================" ) ; 
  Test C# executable:             : Console . WriteLine ( "          ===========================" ) ; 
  Handle C# executable:           : Console . WriteLine ( "          ===========================" ) ; 
  Test begin scope                : p . StartInfo . WindowStyle = ProcessWindowStyle . Hidden ; 
  executable     : p . StartInfo . RedirectStandardOutput = true ; 
  Test end scope                  : p . StartInfo . WindowStyle = ProcessWindowStyle . Hidden ; 
  Test preproc statement:         : p . StartInfo . WindowStyle = ProcessWindowStyle . Hidden ; 
  Test namespace definition:      : p . StartInfo . WindowStyle = ProcessWindowStyle . Hidden ; 
  Test class definition:          : p . StartInfo . WindowStyle = ProcessWindowStyle . Hidden ; 
  Test struct definition:         : p . StartInfo . WindowStyle = ProcessWindowStyle . Hidden ; 
  executable     : p . StartInfo . UseShellExecute = false ; 
  Test C# function definition:    : p . StartInfo . WindowStyle = ProcessWindowStyle . Hidden ; 
  Test control definition:        : p . StartInfo . WindowStyle = ProcessWindowStyle . Hidden ; 
  Test C# declaration:            : p . StartInfo . WindowStyle = ProcessWindowStyle . Hidden ; 
  Test C# executable:             : p . StartInfo . WindowStyle = ProcessWindowStyle . Hidden ; 
  Handle C# executable:           : p . StartInfo . WindowStyle = ProcessWindowStyle . Hidden ; 
  Test begin scope                : 
    p . StartInfo . Arguments = "/Ccsc /target:library /out:" + tname + ".dll " + files ; 
  function declar: p . Start ( ) ; 
  Test end scope                  : 
    p . StartInfo . Arguments = "/Ccsc /target:library /out:" + tname + ".dll " + files ; 
  Test preproc statement:         : 
    p . StartInfo . Arguments = "/Ccsc /target:library /out:" + tname + ".dll " + files ; 
  Test namespace definition:      : 
    p . StartInfo . Arguments = "/Ccsc /target:library /out:" + tname + ".dll " + files ; 
  Test class definition:          : 
    p . StartInfo . Arguments = "/Ccsc /target:library /out:" + tname + ".dll " + files ; 
  function declar: p . WaitForExit ( ) ; 
  Test struct definition:         : 
    p . StartInfo . Arguments = "/Ccsc /target:library /out:" + tname + ".dll " + files ; 
  Test C# function definition:    : 
    p . StartInfo . Arguments = "/Ccsc /target:library /out:" + tname + ".dll " + files ; 
  Test control definition:        : 
    p . StartInfo . Arguments = "/Ccsc /target:library /out:" + tname + ".dll " + files ; 
  Test C# declaration:            : 
    p . StartInfo . Arguments = "/Ccsc /target:library /out:" + tname + ".dll " + files ; 
  Test C# executable:             : 
    p . StartInfo . Arguments = "/Ccsc /target:library /out:" + tname + ".dll " + files ; 
  function declar: string errors = p . StandardError . ReadToEnd ( ) ; 
  Handle C# executable:           : 
    p . StartInfo . Arguments = "/Ccsc /target:library /out:" + tname + ".dll " + files ; 
  Test begin scope                : p . StartInfo . WorkingDirectory = @ receivePath ; 
  Test end scope                  : p . StartInfo . WorkingDirectory = @ receivePath ; 
  Test preproc statement:         : p . StartInfo . WorkingDirectory = @ receivePath ; 
  Test namespace definition:      : p . StartInfo . WorkingDirectory = @ receivePath ; 
  Test class definition:          : p . StartInfo . WorkingDirectory = @ receivePath ; 
  Test struct definition:         : p . StartInfo . WorkingDirectory = @ receivePath ; 
  function declar: string output = p . StandardOutput . ReadToEnd ( ) ; 
  Test C# function definition:    : p . StartInfo . WorkingDirectory = @ receivePath ; 
  Test control definition:        : p . StartInfo . WorkingDirectory = @ receivePath ; 
  Test C# declaration:            : p . StartInfo . WorkingDirectory = @ receivePath ; 
  Test C# executable:             : p . StartInfo . WorkingDirectory = @ receivePath ; 
  executable     : Console . WriteLine ( errors ) ; 
  Handle C# executable:           : p . StartInfo . WorkingDirectory = @ receivePath ; 
  Test begin scope                : p . StartInfo . RedirectStandardError = true ; 
  Test end scope                  : p . StartInfo . RedirectStandardError = true ; 
  Test preproc statement:         : p . StartInfo . RedirectStandardError = true ; 
  Test namespace definition:      : p . StartInfo . RedirectStandardError = true ; 
  Test class definition:          : p . StartInfo . RedirectStandardError = true ; 
  executable     : Console . WriteLine ( output ) ; 
  Test struct definition:         : p . StartInfo . RedirectStandardError = true ; 
  Test C# function definition:    : p . StartInfo . RedirectStandardError = true ; 
  Test control definition:        : p . StartInfo . RedirectStandardError = true ; 
  Test C# declaration:            : p . StartInfo . RedirectStandardError = true ; 
  Test C# executable:             : p . StartInfo . RedirectStandardError = true ; 
  executable     : buildlog += output + errors + "\n" ; 
  Handle C# executable:           : p . StartInfo . RedirectStandardError = true ; 
  Test begin scope                : p . StartInfo . RedirectStandardOutput = true ; 
  Test end scope                  : p . StartInfo . RedirectStandardOutput = true ; 
  Test preproc statement:         : p . StartInfo . RedirectStandardOutput = true ; 
  Test namespace definition:      : p . StartInfo . RedirectStandardOutput = true ; 
  Test class definition:          : p . StartInfo . RedirectStandardOutput = true ; 
  Test struct definition:         : p . StartInfo . RedirectStandardOutput = true ; 
  Test C# function definition:    : p . StartInfo . RedirectStandardOutput = true ; 
  Test control definition:        : p . StartInfo . RedirectStandardOutput = true ; 
  Test C# declaration:            : p . StartInfo . RedirectStandardOutput = true ; 
  Test C# executable:             : p . StartInfo . RedirectStandardOutput = true ; 
  Handle C# executable:           : p . StartInfo . RedirectStandardOutput = true ; 
  Test begin scope                : p . StartInfo . UseShellExecute = false ; 
  Test end scope                  : p . StartInfo . UseShellExecute = false ; 
  Test preproc statement:         : p . StartInfo . UseShellExecute = false ; 
  Test namespace definition:      : p . StartInfo . UseShellExecute = false ; 
  Test class definition:          : p . StartInfo . UseShellExecute = false ; 
  Test struct definition:         : p . StartInfo . UseShellExecute = false ; 
  Test C# function definition:    : p . StartInfo . UseShellExecute = false ; 
  Test control definition:        : p . StartInfo . UseShellExecute = false ; 
  Test C# declaration:            : p . StartInfo . UseShellExecute = false ; 
  Test C# executable:             : p . StartInfo . UseShellExecute = false ; 
  Handle C# executable:           : p . StartInfo . UseShellExecute = false ; 
  Test begin scope                : p . Start ( ) ; 
  Test end scope                  : p . Start ( ) ; 
  Test preproc statement:         : p . Start ( ) ; 
  Test namespace definition:      : p . Start ( ) ; 
  Test class definition:          : p . Start ( ) ; 
  Test struct definition:         : p . Start ( ) ; 
  Test C# function definition:    : p . Start ( ) ; 
  Test control definition:        : p . Start ( ) ; 
  Test C# declaration:            : p . Start ( ) ; 
  Handle C# declaration:          : p . Start ( ) ; 
  Test begin scope                : p . WaitForExit ( ) ; 
  Test end scope                  : p . WaitForExit ( ) ; 
  Test preproc statement:         : p . WaitForExit ( ) ; 
  Test namespace definition:      : p . WaitForExit ( ) ; 
  Test class definition:          : p . WaitForExit ( ) ; 
  Test struct definition:         : p . WaitForExit ( ) ; 
  Test C# function definition:    : p . WaitForExit ( ) ; 
  Test control definition:        : p . WaitForExit ( ) ; 
  Test C# declaration:            : p . WaitForExit ( ) ; 
  Handle C# declaration:          : p . WaitForExit ( ) ; 
  Test begin scope                : string errors = p . StandardError . ReadToEnd ( ) ; 
  Test end scope                  : string errors = p . StandardError . ReadToEnd ( ) ; 
  Test preproc statement:         : string errors = p . StandardError . ReadToEnd ( ) ; 
  Test namespace definition:      : string errors = p . StandardError . ReadToEnd ( ) ; 
  Test class definition:          : string errors = p . StandardError . ReadToEnd ( ) ; 
  Test struct definition:         : string errors = p . StandardError . ReadToEnd ( ) ; 
  Test C# function definition:    : string errors = p . StandardError . ReadToEnd ( ) ; 
  Test control definition:        : string errors = p . StandardError . ReadToEnd ( ) ; 
  Test C# declaration:            : string errors = p . StandardError . ReadToEnd ( ) ; 
  Handle C# declaration:          : string errors = p . StandardError . ReadToEnd ( ) ; 
  Test begin scope                : string output = p . StandardOutput . ReadToEnd ( ) ; 
  Test end scope                  : string output = p . StandardOutput . ReadToEnd ( ) ; 
  Test preproc statement:         : string output = p . StandardOutput . ReadToEnd ( ) ; 
  Test namespace definition:      : string output = p . StandardOutput . ReadToEnd ( ) ; 
  Test class definition:          : string output = p . StandardOutput . ReadToEnd ( ) ; 
  Test struct definition:         : string output = p . StandardOutput . ReadToEnd ( ) ; 
  Test C# function definition:    : string output = p . StandardOutput . ReadToEnd ( ) ; 
  Test control definition:        : string output = p . StandardOutput . ReadToEnd ( ) ; 
  Test C# declaration:            : string output = p . StandardOutput . ReadToEnd ( ) ; 
  Handle C# declaration:          : string output = p . StandardOutput . ReadToEnd ( ) ; 
  Test begin scope                : Console . WriteLine ( errors ) ; 
  Test end scope                  : Console . WriteLine ( errors ) ; 
  Test preproc statement:         : Console . WriteLine ( errors ) ; 
  Test namespace definition:      : Console . WriteLine ( errors ) ; 
  Test class definition:          : Console . WriteLine ( errors ) ; 
  Test struct definition:         : Console . WriteLine ( errors ) ; 
  Test C# function definition:    : Console . WriteLine ( errors ) ; 
  Test control definition:        : Console . WriteLine ( errors ) ; 
  Test C# declaration:            : Console . WriteLine ( errors ) ; 
  Test C# executable:             : Console . WriteLine ( errors ) ; 
  Handle C# executable:           : Console . WriteLine ( errors ) ; 
  Test begin scope                : Console . WriteLine ( output ) ; 
  Test end scope                  : Console . WriteLine ( output ) ; 
  Test preproc statement:         : Console . WriteLine ( output ) ; 
  Test namespace definition:      : Console . WriteLine ( output ) ; 
  Test class definition:          : Console . WriteLine ( output ) ; 
  Test struct definition:         : Console . WriteLine ( output ) ; 
  Test C# function definition:    : Console . WriteLine ( output ) ; 
  Test control definition:        : Console . WriteLine ( output ) ; 
  Test C# declaration:            : Console . WriteLine ( output ) ; 
  Test C# executable:             : Console . WriteLine ( output ) ; 
  Handle C# executable:           : Console . WriteLine ( output ) ; 
  Test begin scope                : buildlog += output + errors + "\n" ; 
  Test end scope                  : buildlog += output + errors + "\n" ; 
  Test preproc statement:         : buildlog += output + errors + "\n" ; 
  Test namespace definition:      : buildlog += output + errors + "\n" ; 
  Test class definition:          : buildlog += output + errors + "\n" ; 
  Test struct definition:         : buildlog += output + errors + "\n" ; 
  Test C# function definition:    : buildlog += output + errors + "\n" ; 
  Test control definition:        : buildlog += output + errors + "\n" ; 
  Test C# declaration:            : buildlog += output + errors + "\n" ; 
  Test C# executable:             : buildlog += output + errors + "\n" ; 
  Handle C# executable:           : buildlog += output + errors + "\n" ; 
  Test begin scope                : if ( output . Contains ( "error" ) ) { 
  handle begin scope              : if ( output . Contains ( "error" ) ) { 
--- stack size = 8 ---
  Test end scope                  : if ( output . Contains ( "error" ) ) { 
  Test preproc statement:         : if ( output . Contains ( "error" ) ) { 
  Test namespace definition:      : if ( output . Contains ( "error" ) ) { 
  control def    : if ( output . Contains ( "error" ) ) { 
  Test class definition:          : if ( output . Contains ( "error" ) ) { 
  Test struct definition:         : if ( output . Contains ( "error" ) ) { 
  Test C# function definition:    : if ( output . Contains ( "error" ) ) { 
  Test control definition:        : if ( output . Contains ( "error" ) ) { 
  Handle control definition:      : if ( output . Contains ( "error" ) ) { 
  executable     : Console . WriteLine ( "Build failed" ) ; 
  Test begin scope                : Console . WriteLine ( "Build failed" ) ; 
  Test end scope                  : Console . WriteLine ( "Build failed" ) ; 
  Test preproc statement:         : Console . WriteLine ( "Build failed" ) ; 
  Test namespace definition:      : Console . WriteLine ( "Build failed" ) ; 
  Test class definition:          : Console . WriteLine ( "Build failed" ) ; 
  Test struct definition:         : Console . WriteLine ( "Build failed" ) ; 
  executable     : notifyclient ( "Build_Failed_for_" + tname ) ; 
  Test C# function definition:    : Console . WriteLine ( "Build failed" ) ; 
--- stack size = 7 ---
  Test control definition:        : Console . WriteLine ( "Build failed" ) ; 
  Test C# declaration:            : Console . WriteLine ( "Build failed" ) ; 
  Test C# executable:             : Console . WriteLine ( "Build failed" ) ; 
  Handle C# executable:           : Console . WriteLine ( "Build failed" ) ; 
  Test begin scope                : notifyclient ( "Build_Failed_for_" + tname ) ; 
  Test end scope                  : notifyclient ( "Build_Failed_for_" + tname ) ; 
  Test preproc statement:         : notifyclient ( "Build_Failed_for_" + tname ) ; 
  Test namespace definition:      : notifyclient ( "Build_Failed_for_" + tname ) ; 
  Test class definition:          : notifyclient ( "Build_Failed_for_" + tname ) ; 
  Test struct definition:         : notifyclient ( "Build_Failed_for_" + tname ) ; 
  Test C# function definition:    : notifyclient ( "Build_Failed_for_" + tname ) ; 
  Test control definition:        : notifyclient ( "Build_Failed_for_" + tname ) ; 
  Test C# declaration:            : notifyclient ( "Build_Failed_for_" + tname ) ; 
  Test C# executable:             : notifyclient ( "Build_Failed_for_" + tname ) ; 
  Handle C# executable:           : notifyclient ( "Build_Failed_for_" + tname ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 8 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : Console . WriteLine ( "Build succeed" ) ; 
  Test end scope                  : Console . WriteLine ( "Build succeed" ) ; 
  Test preproc statement:         : Console . WriteLine ( "Build succeed" ) ; 
  executable     : Console . WriteLine ( "Build succeed" ) ; 
  Test namespace definition:      : Console . WriteLine ( "Build succeed" ) ; 
  Test class definition:          : Console . WriteLine ( "Build succeed" ) ; 
  Test struct definition:         : Console . WriteLine ( "Build succeed" ) ; 
  Test C# function definition:    : Console . WriteLine ( "Build succeed" ) ; 
  Test control definition:        : Console . WriteLine ( "Build succeed" ) ; 
  Test C# declaration:            : Console . WriteLine ( "Build succeed" ) ; 
  executable     : totaltests = totaltests + tname + ".dll " + " " ; 
  Test C# executable:             : Console . WriteLine ( "Build succeed" ) ; 
--- stack size = 7 ---
  Handle C# executable:           : Console . WriteLine ( "Build succeed" ) ; 
  Test begin scope                : totaltests = totaltests + tname + ".dll " + " " ; 
  Test end scope                  : totaltests = totaltests + tname + ".dll " + " " ; 
  Test preproc statement:         : totaltests = totaltests + tname + ".dll " + " " ; 
  Test namespace definition:      : totaltests = totaltests + tname + ".dll " + " " ; 
  Test class definition:          : totaltests = totaltests + tname + ".dll " + " " ; 
  Test struct definition:         : totaltests = totaltests + tname + ".dll " + " " ; 
  Test C# function definition:    : totaltests = totaltests + tname + ".dll " + " " ; 
  executable     : Console . WriteLine ( " ----------------------------------------------" ) ; 
  Test control definition:        : totaltests = totaltests + tname + ".dll " + " " ; 
--- stack size = 6 ---
  Test C# declaration:            : totaltests = totaltests + tname + ".dll " + " " ; 
--- stack size = 5 ---
  Test C# executable:             : totaltests = totaltests + tname + ".dll " + " " ; 
  Handle C# executable:           : totaltests = totaltests + tname + ".dll " + " " ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  executable     : request = totaltests ; 
  Test begin scope                : Console . WriteLine ( " ----------------------------------------------" ) ; 
  Test end scope                  : Console . WriteLine ( " ----------------------------------------------" ) ; 
  Test preproc statement:         : Console . WriteLine ( " ----------------------------------------------" ) ; 
  executable     : createbuildlog ( buildlog ) ; 
  Test namespace definition:      : Console . WriteLine ( " ----------------------------------------------" ) ; 
  Test class definition:          : Console . WriteLine ( " ----------------------------------------------" ) ; 
  executable     : return true ; 
  Test struct definition:         : Console . WriteLine ( " ----------------------------------------------" ) ; 
--- stack size = 4 ---
  Test C# function definition:    : Console . WriteLine ( " ----------------------------------------------" ) ; 
  Test control definition:        : Console . WriteLine ( " ----------------------------------------------" ) ; 
  Test C# declaration:            : Console . WriteLine ( " ----------------------------------------------" ) ; 
  Test C# executable:             : Console . WriteLine ( " ----------------------------------------------" ) ; 
  Handle C# executable:           : Console . WriteLine ( " ----------------------------------------------" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : request = totaltests ; 
  Test end scope                  : request = totaltests ; 
  Test preproc statement:         : request = totaltests ; 
  Test namespace definition:      : request = totaltests ; 
  Test class definition:          : request = totaltests ; 
  Test struct definition:         : request = totaltests ; 
  Test C# function definition:    : request = totaltests ; 
  Test control definition:        : request = totaltests ; 
  Test C# declaration:            : request = totaltests ; 
  Test C# executable:             : request = totaltests ; 
  Handle C# executable:           : request = totaltests ; 
  Test begin scope                : createbuildlog ( buildlog ) ; 
  Test end scope                  : createbuildlog ( buildlog ) ; 
  Test preproc statement:         : createbuildlog ( buildlog ) ; 
  Test namespace definition:      : createbuildlog ( buildlog ) ; 
  Test class definition:          : createbuildlog ( buildlog ) ; 
  Test struct definition:         : createbuildlog ( buildlog ) ; 
  Test C# function definition:    : createbuildlog ( buildlog ) ; 
  Test control definition:        : createbuildlog ( buildlog ) ; 
  Test C# declaration:            : createbuildlog ( buildlog ) ; 
  Test C# executable:             : createbuildlog ( buildlog ) ; 
  Handle C# executable:           : createbuildlog ( buildlog ) ; 
  Test begin scope                : return true ; 
  Test end scope                  : return true ; 
  Test preproc statement:         : return true ; 
  Test namespace definition:      : return true ; 
  Test class definition:          : return true ; 
  Test struct definition:         : return true ; 
  Test C# function definition:    : return true ; 
  Test control definition:        : return true ; 
  Test C# declaration:            : return true ; 
  Test C# executable:             : return true ; 
  Handle C# executable:           : return true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : catch ( Exception ex ) { 
  handle begin scope              : catch ( Exception ex ) { 
--- stack size = 5 ---
  Test end scope                  : catch ( Exception ex ) { 
  Test preproc statement:         : catch ( Exception ex ) { 
  control def    : catch ( Exception ex ) { 
  Test namespace definition:      : catch ( Exception ex ) { 
  Test class definition:          : catch ( Exception ex ) { 
  Test struct definition:         : catch ( Exception ex ) { 
  Test C# function definition:    : catch ( Exception ex ) { 
  Test control definition:        : catch ( Exception ex ) { 
  Handle control definition:      : catch ( Exception ex ) { 
  Test begin scope                : Console . WriteLine ( ex . Message ) ; 
  Test end scope                  : Console . WriteLine ( ex . Message ) ; 
  Test preproc statement:         : Console . WriteLine ( ex . Message ) ; 
  Test namespace definition:      : Console . WriteLine ( ex . Message ) ; 
  Test class definition:          : Console . WriteLine ( ex . Message ) ; 
  Test struct definition:         : Console . WriteLine ( ex . Message ) ; 
  executable     : Console . WriteLine ( ex . Message ) ; 
  Test C# function definition:    : Console . WriteLine ( ex . Message ) ; 
  Test control definition:        : Console . WriteLine ( ex . Message ) ; 
  Test C# declaration:            : Console . WriteLine ( ex . Message ) ; 
  Test C# executable:             : Console . WriteLine ( ex . Message ) ; 
  Handle C# executable:           : Console . WriteLine ( ex . Message ) ; 
  Test begin scope                : notifyclient ( ex . Message ) ; 
  Test end scope                  : notifyclient ( ex . Message ) ; 
  Test preproc statement:         : notifyclient ( ex . Message ) ; 
  Test namespace definition:      : notifyclient ( ex . Message ) ; 
  executable     : notifyclient ( ex . Message ) ; 
  Test class definition:          : notifyclient ( ex . Message ) ; 
  Test struct definition:         : notifyclient ( ex . Message ) ; 
  executable     : return false ; 
  Test C# function definition:    : notifyclient ( ex . Message ) ; 
--- stack size = 4 ---
  Test control definition:        : notifyclient ( ex . Message ) ; 
--- stack size = 3 ---
  Test C# declaration:            : notifyclient ( ex . Message ) ; 
  Test C# executable:             : notifyclient ( ex . Message ) ; 
  Handle C# executable:           : notifyclient ( ex . Message ) ; 
  Test begin scope                : return false ; 
  Test end scope                  : return false ; 
  Test preproc statement:         : return false ; 
  Test namespace definition:      : return false ; 
  Test class definition:          : return false ; 
  Test struct definition:         : return false ; 
  Test C# function definition:    : return false ; 
  Test control definition:        : return false ; 
  Test C# declaration:            : return false ; 
  Test C# executable:             : return false ; 
  Handle C# executable:           : return false ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void notifyclient ( string body ) { 
  handle begin scope              : private void notifyclient ( string body ) { 
--- stack size = 4 ---
  Test end scope                  : private void notifyclient ( string body ) { 
  Test preproc statement:         : private void notifyclient ( string body ) { 
  Test namespace definition:      : private void notifyclient ( string body ) { 
  function def   : private void notifyclient ( string body ) { 
  Test class definition:          : private void notifyclient ( string body ) { 
  Test struct definition:         : private void notifyclient ( string body ) { 
  Test C# function definition:    : private void notifyclient ( string body ) { 
  Handle C# function definition:  : private void notifyclient ( string body ) { 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . command = "notification" ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . to = ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test begin scope                : sndMsg . command = "notification" ; 
  Test end scope                  : sndMsg . command = "notification" ; 
  Test preproc statement:         : sndMsg . command = "notification" ; 
  executable     : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test namespace definition:      : sndMsg . command = "notification" ; 
  Test class definition:          : sndMsg . command = "notification" ; 
  Test struct definition:         : sndMsg . command = "notification" ; 
  Test C# function definition:    : sndMsg . command = "notification" ; 
  executable     : sndMsg . body = body ; 
  Test control definition:        : sndMsg . command = "notification" ; 
  Test C# declaration:            : sndMsg . command = "notification" ; 
  Test C# executable:             : sndMsg . command = "notification" ; 
  Handle C# executable:           : sndMsg . command = "notification" ; 
  executable     : sndMsg . port = 8077 ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
--- stack size = 3 ---
  Test begin scope                : sndMsg . to = ; 
  Test end scope                  : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . to = ; 
  Test class definition:          : sndMsg . to = ; 
  Test struct definition:         : sndMsg . to = ; 
  Test C# function definition:    : sndMsg . to = ; 
  Test control definition:        : sndMsg . to = ; 
  Test C# declaration:            : sndMsg . to = ; 
  Test C# executable:             : sndMsg . to = ; 
  Handle C# executable:           : sndMsg . to = ; 
  Test begin scope                : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test end scope                  : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test preproc statement:         : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test namespace definition:      : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test class definition:          : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test struct definition:         : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# function definition:    : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test control definition:        : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# declaration:            : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# executable:             : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Handle C# executable:           : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test begin scope                : sndMsg . body = body ; 
  Test end scope                  : sndMsg . body = body ; 
  Test preproc statement:         : sndMsg . body = body ; 
  Test namespace definition:      : sndMsg . body = body ; 
  Test class definition:          : sndMsg . body = body ; 
  Test struct definition:         : sndMsg . body = body ; 
  Test C# function definition:    : sndMsg . body = body ; 
  Test control definition:        : sndMsg . body = body ; 
  Test C# declaration:            : sndMsg . body = body ; 
  Test C# executable:             : sndMsg . body = body ; 
  Handle C# executable:           : sndMsg . body = body ; 
  Test begin scope                : sndMsg . port = 8077 ; 
  Test end scope                  : sndMsg . port = 8077 ; 
  Test preproc statement:         : sndMsg . port = 8077 ; 
  Test namespace definition:      : sndMsg . port = 8077 ; 
  Test class definition:          : sndMsg . port = 8077 ; 
  Test struct definition:         : sndMsg . port = 8077 ; 
  Test C# function definition:    : sndMsg . port = 8077 ; 
  Test control definition:        : sndMsg . port = 8077 ; 
  Test C# declaration:            : sndMsg . port = 8077 ; 
  Test C# executable:             : sndMsg . port = 8077 ; 
  Handle C# executable:           : sndMsg . port = 8077 ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : static void createbuildlog ( string buildlog ) { 
  handle begin scope              : static void createbuildlog ( string buildlog ) { 
--- stack size = 4 ---
  Test end scope                  : static void createbuildlog ( string buildlog ) { 
  Test preproc statement:         : static void createbuildlog ( string buildlog ) { 
  function def   : static void createbuildlog ( string buildlog ) { 
  Test namespace definition:      : static void createbuildlog ( string buildlog ) { 
  Test class definition:          : static void createbuildlog ( string buildlog ) { 
  Test struct definition:         : static void createbuildlog ( string buildlog ) { 
  Test C# function definition:    : static void createbuildlog ( string buildlog ) { 
  Handle C# function definition:  : static void createbuildlog ( string buildlog ) { 
  Test begin scope                : if ( buildlog != "" ) { 
  handle begin scope              : if ( buildlog != "" ) { 
--- stack size = 5 ---
  Test end scope                  : if ( buildlog != "" ) { 
  Test preproc statement:         : if ( buildlog != "" ) { 
  Test namespace definition:      : if ( buildlog != "" ) { 
  control def    : if ( buildlog != "" ) { 
  Test class definition:          : if ( buildlog != "" ) { 
  Test struct definition:         : if ( buildlog != "" ) { 
  Test C# function definition:    : if ( buildlog != "" ) { 
  Test control definition:        : if ( buildlog != "" ) { 
  Handle control definition:      : if ( buildlog != "" ) { 
  Test begin scope                : 
    StreamWriter stream = new StreamWriter ( receivePath + "/Buildlog" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".txt" ) ; 
  Test end scope                  : 
    StreamWriter stream = new StreamWriter ( receivePath + "/Buildlog" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".txt" ) ; 
  Test preproc statement:         : 
    StreamWriter stream = new StreamWriter ( receivePath + "/Buildlog" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".txt" ) ; 
  Test namespace definition:      : 
    StreamWriter stream = new StreamWriter ( receivePath + "/Buildlog" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".txt" ) ; 
  Test class definition:          : 
    StreamWriter stream = new StreamWriter ( receivePath + "/Buildlog" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".txt" ) ; 
  Test struct definition:         : 
    StreamWriter stream = new StreamWriter ( receivePath + "/Buildlog" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".txt" ) ; 
  Test C# function definition:    : 
    StreamWriter stream = new StreamWriter ( receivePath + "/Buildlog" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".txt" ) ; 
  data declar    : 
    StreamWriter stream = new StreamWriter ( receivePath + "/Buildlog" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".txt" ) ; 
  Test control definition:        : 
    StreamWriter stream = new StreamWriter ( receivePath + "/Buildlog" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".txt" ) ; 
  executable     : stream . WriteLine ( buildlog ) ; 
  Test C# declaration:            : 
    StreamWriter stream = new StreamWriter ( receivePath + "/Buildlog" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".txt" ) ; 
  Handle C# declaration:          : 
    StreamWriter stream = new StreamWriter ( receivePath + "/Buildlog" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".txt" ) ; 
  Test begin scope                : stream . WriteLine ( buildlog ) ; 
  Test end scope                  : stream . WriteLine ( buildlog ) ; 
  Test preproc statement:         : stream . WriteLine ( buildlog ) ; 
  function declar: stream . Close ( ) ; 
  Test namespace definition:      : stream . WriteLine ( buildlog ) ; 
  Test class definition:          : stream . WriteLine ( buildlog ) ; 
  Test struct definition:         : stream . WriteLine ( buildlog ) ; 
  Test C# function definition:    : stream . WriteLine ( buildlog ) ; 
  Test control definition:        : stream . WriteLine ( buildlog ) ; 
  Test C# declaration:            : stream . WriteLine ( buildlog ) ; 
  Test C# executable:             : stream . WriteLine ( buildlog ) ; 
  Handle C# executable:           : stream . WriteLine ( buildlog ) ; 
  Test begin scope                : stream . Close ( ) ; 
  Test end scope                  : stream . Close ( ) ; 
  Test preproc statement:         : stream . Close ( ) ; 
  Test namespace definition:      : stream . Close ( ) ; 
  executable     : Console . WriteLine ( "\n            sending buildlogs to the Repository" ) ; 
  Test class definition:          : stream . Close ( ) ; 
  Test struct definition:         : stream . Close ( ) ; 
  Test C# function definition:    : stream . Close ( ) ; 
  Test control definition:        : stream . Close ( ) ; 
  Test C# declaration:            : stream . Close ( ) ; 
  Handle C# declaration:          : stream . Close ( ) ; 
  Test begin scope                : Console . WriteLine ( "\n            sending buildlogs to the Repository" ) ; 
  executable     : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test end scope                  : Console . WriteLine ( "\n            sending buildlogs to the Repository" ) ; 
  Test preproc statement:         : Console . WriteLine ( "\n            sending buildlogs to the Repository" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n            sending buildlogs to the Repository" ) ; 
  Test class definition:          : Console . WriteLine ( "\n            sending buildlogs to the Repository" ) ; 
  Test struct definition:         : Console . WriteLine ( "\n            sending buildlogs to the Repository" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n            sending buildlogs to the Repository" ) ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test control definition:        : Console . WriteLine ( "\n            sending buildlogs to the Repository" ) ; 
  executable     : sndMsg . command = "show" ; 
  Test C# declaration:            : Console . WriteLine ( "\n            sending buildlogs to the Repository" ) ; 
  Test C# executable:             : Console . WriteLine ( "\n            sending buildlogs to the Repository" ) ; 
  Handle C# executable:           : Console . WriteLine ( "\n            sending buildlogs to the Repository" ) ; 
  Test begin scope                : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test end scope                  : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test class definition:          : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# function definition:    : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : sndMsg . to = ; 
  Test control definition:        : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# declaration:            : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  executable     : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  executable     : sndMsg . body = "logtransferstarted" ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test begin scope                : sndMsg . command = "show" ; 
  Test end scope                  : sndMsg . command = "show" ; 
  Test preproc statement:         : sndMsg . command = "show" ; 
  Test namespace definition:      : sndMsg . command = "show" ; 
  Test class definition:          : sndMsg . command = "show" ; 
  function declar: List < string > names = getlogList ( ) ; 
  Test struct definition:         : sndMsg . command = "show" ; 
  Test C# function definition:    : sndMsg . command = "show" ; 
  Test control definition:        : sndMsg . command = "show" ; 
  Test C# declaration:            : sndMsg . command = "show" ; 
  Test C# executable:             : sndMsg . command = "show" ; 
  Handle C# executable:           : sndMsg . command = "show" ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = ; 
  Test end scope                  : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . to = ; 
  Test class definition:          : sndMsg . to = ; 
  Test struct definition:         : sndMsg . to = ; 
  Test C# function definition:    : sndMsg . to = ; 
  Test control definition:        : sndMsg . to = ; 
  Test C# declaration:            : sndMsg . to = ; 
  Test C# executable:             : sndMsg . to = ; 
  Handle C# executable:           : sndMsg . to = ; 
  Test begin scope                : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test end scope                  : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test preproc statement:         : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test namespace definition:      : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test class definition:          : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test struct definition:         : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# function definition:    : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test control definition:        : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# declaration:            : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# executable:             : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Handle C# executable:           : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test begin scope                : sndMsg . body = "logtransferstarted" ; 
  Test end scope                  : sndMsg . body = "logtransferstarted" ; 
  Test preproc statement:         : sndMsg . body = "logtransferstarted" ; 
  Test namespace definition:      : sndMsg . body = "logtransferstarted" ; 
  Test class definition:          : sndMsg . body = "logtransferstarted" ; 
  Test struct definition:         : sndMsg . body = "logtransferstarted" ; 
  Test C# function definition:    : sndMsg . body = "logtransferstarted" ; 
  Test control definition:        : sndMsg . body = "logtransferstarted" ; 
  Test C# declaration:            : sndMsg . body = "logtransferstarted" ; 
  Test C# executable:             : sndMsg . body = "logtransferstarted" ; 
  Handle C# executable:           : sndMsg . body = "logtransferstarted" ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : List < string > names = getlogList ( ) ; 
  Test end scope                  : List < string > names = getlogList ( ) ; 
  Test preproc statement:         : List < string > names = getlogList ( ) ; 
  Test namespace definition:      : List < string > names = getlogList ( ) ; 
  Test class definition:          : List < string > names = getlogList ( ) ; 
  Test struct definition:         : List < string > names = getlogList ( ) ; 
  Test C# function definition:    : List < string > names = getlogList ( ) ; 
  Test control definition:        : List < string > names = getlogList ( ) ; 
  Test C# declaration:            : List < string > names = getlogList ( ) ; 
  Handle C# declaration:          : List < string > names = getlogList ( ) ; 
  Test begin scope                : foreach ( string file in names ) { 
  handle begin scope              : foreach ( string file in names ) { 
--- stack size = 6 ---
  Test end scope                  : foreach ( string file in names ) { 
  Test preproc statement:         : foreach ( string file in names ) { 
  Test namespace definition:      : foreach ( string file in names ) { 
  control def    : foreach ( string file in names ) { 
  Test class definition:          : foreach ( string file in names ) { 
  Test struct definition:         : foreach ( string file in names ) { 
  Test C# function definition:    : foreach ( string file in names ) { 
  data declar    : string fileSpec = file ; 
  Test control definition:        : foreach ( string file in names ) { 
  Handle control definition:      : foreach ( string file in names ) { 
  Test begin scope                : string fileSpec = file ; 
  Test end scope                  : string fileSpec = file ; 
  Test preproc statement:         : string fileSpec = file ; 
  Test namespace definition:      : string fileSpec = file ; 
  Test class definition:          : string fileSpec = file ; 
  Test struct definition:         : string fileSpec = file ; 
  Test C# function definition:    : string fileSpec = file ; 
  data declar    : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test control definition:        : string fileSpec = file ; 
  Test C# declaration:            : string fileSpec = file ; 
  Handle C# declaration:          : string fileSpec = file ; 
  Test begin scope                : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test end scope                  : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test preproc statement:         : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test namespace definition:      : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test class definition:          : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test struct definition:         : string fileName = Path . GetFileName ( fileSpec ) ; 
  executable     : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  Test C# function definition:    : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test control definition:        : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test C# declaration:            : string fileName = Path . GetFileName ( fileSpec ) ; 
  Handle C# declaration:          : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test begin scope                : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  Test end scope                  : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  Test preproc statement:         : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  Test namespace definition:      : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  executable     : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test class definition:          : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  Test struct definition:         : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  Test C# function definition:    : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  Test control definition:        : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  Test C# declaration:            : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  data declar    : bool transferSuccess = comm . postFile ( file , "cb2r" , receivePath ) ; 
  Test C# executable:             : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  Handle C# executable:           : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  Test begin scope                : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test end scope                  : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  executable     : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test preproc statement:         : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
--- stack size = 5 ---
  Test namespace definition:      : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test class definition:          : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test struct definition:         : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test C# function definition:    : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  executable     : 
    Console . WriteLine ( "\n            Build logs captured and sent to repository" ) ; 
  Test control definition:        : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test C# declaration:            : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test C# executable:             : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  executable     : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Handle C# executable:           : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test begin scope                : bool transferSuccess = comm . postFile ( file , "cb2r" , receivePath ) ; 
  Test end scope                  : bool transferSuccess = comm . postFile ( file , "cb2r" , receivePath ) ; 
  Test preproc statement:         : bool transferSuccess = comm . postFile ( file , "cb2r" , receivePath ) ; 
  Test namespace definition:      : bool transferSuccess = comm . postFile ( file , "cb2r" , receivePath ) ; 
  Test class definition:          : bool transferSuccess = comm . postFile ( file , "cb2r" , receivePath ) ; 
  executable     : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test struct definition:         : bool transferSuccess = comm . postFile ( file , "cb2r" , receivePath ) ; 
  Test C# function definition:    : bool transferSuccess = comm . postFile ( file , "cb2r" , receivePath ) ; 
  executable     : sndMsg . command = "logTransferCompleted" ; 
  Test control definition:        : bool transferSuccess = comm . postFile ( file , "cb2r" , receivePath ) ; 
  Test C# declaration:            : bool transferSuccess = comm . postFile ( file , "cb2r" , receivePath ) ; 
  Handle C# declaration:          : bool transferSuccess = comm . postFile ( file , "cb2r" , receivePath ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test end scope                  : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test preproc statement:         : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test namespace definition:      : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  executable     : sndMsg . to = ; 
  Test class definition:          : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test struct definition:         : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test C# function definition:    : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test control definition:        : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test C# declaration:            : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test C# executable:             : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Handle C# executable:           : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test begin scope                : } 
  executable     : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    Console . WriteLine ( "\n            Build logs captured and sent to repository" ) ; 
  Test end scope                  : 
    Console . WriteLine ( "\n            Build logs captured and sent to repository" ) ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n            Build logs captured and sent to repository" ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n            Build logs captured and sent to repository" ) ; 
  Test class definition:          : 
    Console . WriteLine ( "\n            Build logs captured and sent to repository" ) ; 
  executable     : sndMsg . body = "logTransferCompleted" ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n            Build logs captured and sent to repository" ) ; 
  Test C# function definition:    : 
    Console . WriteLine ( "\n            Build logs captured and sent to repository" ) ; 
  Test control definition:        : 
    Console . WriteLine ( "\n            Build logs captured and sent to repository" ) ; 
  Test C# declaration:            : 
    Console . WriteLine ( "\n            Build logs captured and sent to repository" ) ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n            Build logs captured and sent to repository" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n            Build logs captured and sent to repository" ) ; 
  Test begin scope                : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test end scope                  : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test class definition:          : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : 
    Console . WriteLine ( "\n        =================================================" ) ; 
--- stack size = 4 ---
  Test control definition:        : 
    Console . WriteLine ( "\n        =================================================" ) ; 
--- stack size = 3 ---
  Test C# declaration:            : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test begin scope                : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test end scope                  : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test preproc statement:         : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test namespace definition:      : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test class definition:          : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test struct definition:         : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test C# function definition:    : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test control definition:        : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test C# declaration:            : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test C# executable:             : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Handle C# executable:           : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test begin scope                : sndMsg . command = "logTransferCompleted" ; 
  Test end scope                  : sndMsg . command = "logTransferCompleted" ; 
  Test preproc statement:         : sndMsg . command = "logTransferCompleted" ; 
  Test namespace definition:      : sndMsg . command = "logTransferCompleted" ; 
  Test class definition:          : sndMsg . command = "logTransferCompleted" ; 
  Test struct definition:         : sndMsg . command = "logTransferCompleted" ; 
  Test C# function definition:    : sndMsg . command = "logTransferCompleted" ; 
  Test control definition:        : sndMsg . command = "logTransferCompleted" ; 
  Test C# declaration:            : sndMsg . command = "logTransferCompleted" ; 
  Test C# executable:             : sndMsg . command = "logTransferCompleted" ; 
  Handle C# executable:           : sndMsg . command = "logTransferCompleted" ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = ; 
  Test end scope                  : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . to = ; 
  Test class definition:          : sndMsg . to = ; 
  Test struct definition:         : sndMsg . to = ; 
  Test C# function definition:    : sndMsg . to = ; 
  Test control definition:        : sndMsg . to = ; 
  Test C# declaration:            : sndMsg . to = ; 
  Test C# executable:             : sndMsg . to = ; 
  Handle C# executable:           : sndMsg . to = ; 
  Test begin scope                : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test end scope                  : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test preproc statement:         : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test namespace definition:      : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test class definition:          : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test struct definition:         : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# function definition:    : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test control definition:        : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# declaration:            : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# executable:             : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Handle C# executable:           : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test begin scope                : sndMsg . body = "logTransferCompleted" ; 
  Test end scope                  : sndMsg . body = "logTransferCompleted" ; 
  Test preproc statement:         : sndMsg . body = "logTransferCompleted" ; 
  Test namespace definition:      : sndMsg . body = "logTransferCompleted" ; 
  Test class definition:          : sndMsg . body = "logTransferCompleted" ; 
  Test struct definition:         : sndMsg . body = "logTransferCompleted" ; 
  Test C# function definition:    : sndMsg . body = "logTransferCompleted" ; 
  Test control definition:        : sndMsg . body = "logTransferCompleted" ; 
  Test C# declaration:            : sndMsg . body = "logTransferCompleted" ; 
  Test C# executable:             : sndMsg . body = "logTransferCompleted" ; 
  Handle C# executable:           : sndMsg . body = "logTransferCompleted" ; 
  Test begin scope                : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test end scope                  : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test preproc statement:         : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test namespace definition:      : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test class definition:          : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test struct definition:         : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# function definition:    : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test control definition:        : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# declaration:            : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# executable:             : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Handle C# executable:           : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public static List < string > getlogList ( ) { 
  handle begin scope              : public static List < string > getlogList ( ) { 
--- stack size = 4 ---
  Test end scope                  : public static List < string > getlogList ( ) { 
  Test preproc statement:         : public static List < string > getlogList ( ) { 
  Test namespace definition:      : public static List < string > getlogList ( ) { 
  function def   : public static List < string > getlogList ( ) { 
  Test class definition:          : public static List < string > getlogList ( ) { 
  Test struct definition:         : public static List < string > getlogList ( ) { 
  Test C# function definition:    : public static List < string > getlogList ( ) { 
  Handle C# function definition:  : public static List < string > getlogList ( ) { 
  Test begin scope                : List < string > names = new List < string > ( ) ; 
  Test end scope                  : List < string > names = new List < string > ( ) ; 
  data declar    : List < string > names = new List < string > ( ) ; 
  Test preproc statement:         : List < string > names = new List < string > ( ) ; 
  Test namespace definition:      : List < string > names = new List < string > ( ) ; 
  Test class definition:          : List < string > names = new List < string > ( ) ; 
  Test struct definition:         : List < string > names = new List < string > ( ) ; 
  Test C# function definition:    : List < string > names = new List < string > ( ) ; 
  data declar    : List < string > files = new List < string > ( ) ; 
  Test control definition:        : List < string > names = new List < string > ( ) ; 
  Test C# declaration:            : List < string > names = new List < string > ( ) ; 
  Handle C# declaration:          : List < string > names = new List < string > ( ) ; 
  Test begin scope                : List < string > files = new List < string > ( ) ; 
  Test end scope                  : List < string > files = new List < string > ( ) ; 
  Test preproc statement:         : List < string > files = new List < string > ( ) ; 
  Test namespace definition:      : List < string > files = new List < string > ( ) ; 
  executable     : string [ ] list = Directory . GetFiles ( receivePath , "*.txt" ) ; 
  Test class definition:          : List < string > files = new List < string > ( ) ; 
  Test struct definition:         : List < string > files = new List < string > ( ) ; 
  Test C# function definition:    : List < string > files = new List < string > ( ) ; 
  Test control definition:        : List < string > files = new List < string > ( ) ; 
  Test C# declaration:            : List < string > files = new List < string > ( ) ; 
  Handle C# declaration:          : List < string > files = new List < string > ( ) ; 
  Test begin scope                : string [ ] list = Directory . GetFiles ( receivePath , "*.txt" ) ; 
  Test end scope                  : string [ ] list = Directory . GetFiles ( receivePath , "*.txt" ) ; 
  Test preproc statement:         : string [ ] list = Directory . GetFiles ( receivePath , "*.txt" ) ; 
  Test namespace definition:      : string [ ] list = Directory . GetFiles ( receivePath , "*.txt" ) ; 
  Test class definition:          : string [ ] list = Directory . GetFiles ( receivePath , "*.txt" ) ; 
  Test struct definition:         : string [ ] list = Directory . GetFiles ( receivePath , "*.txt" ) ; 
  Test C# function definition:    : string [ ] list = Directory . GetFiles ( receivePath , "*.txt" ) ; 
  Test control definition:        : string [ ] list = Directory . GetFiles ( receivePath , "*.txt" ) ; 
  Test C# declaration:            : string [ ] list = Directory . GetFiles ( receivePath , "*.txt" ) ; 
  Test C# executable:             : string [ ] list = Directory . GetFiles ( receivePath , "*.txt" ) ; 
  Handle C# executable:           : string [ ] list = Directory . GetFiles ( receivePath , "*.txt" ) ; 
  Test begin scope                : foreach ( string file in list ) { 
  handle begin scope              : foreach ( string file in list ) { 
--- stack size = 5 ---
  Test end scope                  : foreach ( string file in list ) { 
  Test preproc statement:         : foreach ( string file in list ) { 
  Test namespace definition:      : foreach ( string file in list ) { 
  Test class definition:          : foreach ( string file in list ) { 
  Test struct definition:         : foreach ( string file in list ) { 
  Test C# function definition:    : foreach ( string file in list ) { 
  control def    : foreach ( string file in list ) { 
  Test control definition:        : foreach ( string file in list ) { 
  Handle control definition:      : foreach ( string file in list ) { 
  Test begin scope                : names . Add ( Path . GetFileName ( file ) ) ; 
  Test end scope                  : names . Add ( Path . GetFileName ( file ) ) ; 
  Test preproc statement:         : names . Add ( Path . GetFileName ( file ) ) ; 
  Test namespace definition:      : names . Add ( Path . GetFileName ( file ) ) ; 
  Test class definition:          : names . Add ( Path . GetFileName ( file ) ) ; 
  Test struct definition:         : names . Add ( Path . GetFileName ( file ) ) ; 
  Test C# function definition:    : names . Add ( Path . GetFileName ( file ) ) ; 
  Test control definition:        : names . Add ( Path . GetFileName ( file ) ) ; 
  Test C# declaration:            : names . Add ( Path . GetFileName ( file ) ) ; 
  Test C# executable:             : names . Add ( Path . GetFileName ( file ) ) ; 
  Handle C# executable:           : names . Add ( Path . GetFileName ( file ) ) ; 
  executable     : names . Add ( Path . GetFileName ( file ) ) ; 
  Test begin scope                : } 
--- stack size = 4 ---
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : return names ; 
  Test end scope                  : return names ; 
  Test preproc statement:         : return names ; 
  executable     : return names ; 
  Test namespace definition:      : return names ; 
--- stack size = 3 ---
  Test class definition:          : return names ; 
  Test struct definition:         : return names ; 
  Test C# function definition:    : return names ; 
  Test control definition:        : return names ; 
  Test C# declaration:            : return names ; 
  Test C# executable:             : return names ; 
  Handle C# executable:           : return names ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : static void Main ( string [ ] args ) { 
  handle begin scope              : static void Main ( string [ ] args ) { 
--- stack size = 4 ---
  Test end scope                  : static void Main ( string [ ] args ) { 
  Test preproc statement:         : static void Main ( string [ ] args ) { 
  Test namespace definition:      : static void Main ( string [ ] args ) { 
  Test class definition:          : static void Main ( string [ ] args ) { 
  function def   : static void Main ( string [ ] args ) { 
  Test struct definition:         : static void Main ( string [ ] args ) { 
  Test C# function definition:    : static void Main ( string [ ] args ) { 
  data declar    : Thread listenTrd = null ; 
  Handle C# function definition:  : static void Main ( string [ ] args ) { 
  Test begin scope                : Thread listenTrd = null ; 
  executable     : Console . Title = "Child process" ; 
  Test end scope                  : Thread listenTrd = null ; 
  Test preproc statement:         : Thread listenTrd = null ; 
  executable     : Console . BackgroundColor = ConsoleColor . White ; 
  Test namespace definition:      : Thread listenTrd = null ; 
  Test class definition:          : Thread listenTrd = null ; 
  Test struct definition:         : Thread listenTrd = null ; 
  executable     : Console . ForegroundColor = ConsoleColor . DarkRed ; 
  Test C# function definition:    : Thread listenTrd = null ; 
  Test control definition:        : Thread listenTrd = null ; 
  Test C# declaration:            : Thread listenTrd = null ; 
  Handle C# declaration:          : Thread listenTrd = null ; 
  Test begin scope                : Console . Title = "Child process" ; 
  Test end scope                  : Console . Title = "Child process" ; 
  Test preproc statement:         : Console . Title = "Child process" ; 
  executable     : TestUtilities . vbtitle ( "Child Process Started" ) ; 
  Test namespace definition:      : Console . Title = "Child process" ; 
  Test class definition:          : Console . Title = "Child process" ; 
  Test struct definition:         : Console . Title = "Child process" ; 
  Test C# function definition:    : Console . Title = "Child process" ; 
  Test control definition:        : Console . Title = "Child process" ; 
  Test C# declaration:            : Console . Title = "Child process" ; 
  Test C# executable:             : Console . Title = "Child process" ; 
  Handle C# executable:           : Console . Title = "Child process" ; 
  data declar    : Builder builder = new Builder ( args [ 0 ] ) ; 
  Test begin scope                : Console . BackgroundColor = ConsoleColor . White ; 
  Test end scope                  : Console . BackgroundColor = ConsoleColor . White ; 
  Test preproc statement:         : Console . BackgroundColor = ConsoleColor . White ; 
  Test namespace definition:      : Console . BackgroundColor = ConsoleColor . White ; 
  Test class definition:          : Console . BackgroundColor = ConsoleColor . White ; 
  executable     : port = args [ 0 ] ; 
  Test struct definition:         : Console . BackgroundColor = ConsoleColor . White ; 
  Test C# function definition:    : Console . BackgroundColor = ConsoleColor . White ; 
  Test control definition:        : Console . BackgroundColor = ConsoleColor . White ; 
  Test C# declaration:            : Console . BackgroundColor = ConsoleColor . White ; 
  Test C# executable:             : Console . BackgroundColor = ConsoleColor . White ; 
  Handle C# executable:           : Console . BackgroundColor = ConsoleColor . White ; 
  Test begin scope                : Console . ForegroundColor = ConsoleColor . DarkRed ; 
  Test end scope                  : Console . ForegroundColor = ConsoleColor . DarkRed ; 
  Test preproc statement:         : Console . ForegroundColor = ConsoleColor . DarkRed ; 
  Test namespace definition:      : Console . ForegroundColor = ConsoleColor . DarkRed ; 
  Test class definition:          : Console . ForegroundColor = ConsoleColor . DarkRed ; 
  executable     : comm = new Comm ( , Convert . ToInt32 ( port ) ) ; 
  Test struct definition:         : Console . ForegroundColor = ConsoleColor . DarkRed ; 
  Test C# function definition:    : Console . ForegroundColor = ConsoleColor . DarkRed ; 
  Test control definition:        : Console . ForegroundColor = ConsoleColor . DarkRed ; 
  Test C# declaration:            : Console . ForegroundColor = ConsoleColor . DarkRed ; 
  Test C# executable:             : Console . ForegroundColor = ConsoleColor . DarkRed ; 
  executable     : listenTrd = new Thread ( listen ) ; 
  Handle C# executable:           : Console . ForegroundColor = ConsoleColor . DarkRed ; 
  Test begin scope                : TestUtilities . vbtitle ( "Child Process Started" ) ; 
  Test end scope                  : TestUtilities . vbtitle ( "Child Process Started" ) ; 
  executable     : listenTrd . Start ( ) ; 
  Test preproc statement:         : TestUtilities . vbtitle ( "Child Process Started" ) ; 
  Test namespace definition:      : TestUtilities . vbtitle ( "Child Process Started" ) ; 
  Test class definition:          : TestUtilities . vbtitle ( "Child Process Started" ) ; 
  Test struct definition:         : TestUtilities . vbtitle ( "Child Process Started" ) ; 
  Test C# function definition:    : TestUtilities . vbtitle ( "Child Process Started" ) ; 
  Test control definition:        : TestUtilities . vbtitle ( "Child Process Started" ) ; 
  Test C# declaration:            : TestUtilities . vbtitle ( "Child Process Started" ) ; 
  Test C# executable:             : TestUtilities . vbtitle ( "Child Process Started" ) ; 
  Handle C# executable:           : TestUtilities . vbtitle ( "Child Process Started" ) ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test begin scope                : Builder builder = new Builder ( args [ 0 ] ) ; 
  Test end scope                  : Builder builder = new Builder ( args [ 0 ] ) ; 
  Test preproc statement:         : Builder builder = new Builder ( args [ 0 ] ) ; 
  Test namespace definition:      : Builder builder = new Builder ( args [ 0 ] ) ; 
  Test class definition:          : Builder builder = new Builder ( args [ 0 ] ) ; 
  executable     : sndMsg . command = "show" ; 
  Test struct definition:         : Builder builder = new Builder ( args [ 0 ] ) ; 
  Test C# function definition:    : Builder builder = new Builder ( args [ 0 ] ) ; 
  Test control definition:        : Builder builder = new Builder ( args [ 0 ] ) ; 
  Test C# declaration:            : Builder builder = new Builder ( args [ 0 ] ) ; 
  Handle C# declaration:          : Builder builder = new Builder ( args [ 0 ] ) ; 
  Test begin scope                : port = args [ 0 ] ; 
  Test end scope                  : port = args [ 0 ] ; 
  Test preproc statement:         : port = args [ 0 ] ; 
  Test namespace definition:      : port = args [ 0 ] ; 
  Test class definition:          : port = args [ 0 ] ; 
  Test struct definition:         : port = args [ 0 ] ; 
  Test C# function definition:    : port = args [ 0 ] ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : port = args [ 0 ] ; 
  Test C# declaration:            : port = args [ 0 ] ; 
  Test C# executable:             : port = args [ 0 ] ; 
  Handle C# executable:           : port = args [ 0 ] ; 
  executable     : sndMsg . to = ; 
  Test begin scope                : comm = new Comm ( , Convert . ToInt32 ( port ) ) ; 
  Test end scope                  : comm = new Comm ( , Convert . ToInt32 ( port ) ) ; 
  Test preproc statement:         : comm = new Comm ( , Convert . ToInt32 ( port ) ) ; 
  Test namespace definition:      : comm = new Comm ( , Convert . ToInt32 ( port ) ) ; 
  Test class definition:          : comm = new Comm ( , Convert . ToInt32 ( port ) ) ; 
  Test struct definition:         : comm = new Comm ( , Convert . ToInt32 ( port ) ) ; 
  executable     : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# function definition:    : comm = new Comm ( , Convert . ToInt32 ( port ) ) ; 
  Test control definition:        : comm = new Comm ( , Convert . ToInt32 ( port ) ) ; 
  Test C# declaration:            : comm = new Comm ( , Convert . ToInt32 ( port ) ) ; 
  executable     : sndMsg . body = "processReady" ; 
  Test C# executable:             : comm = new Comm ( , Convert . ToInt32 ( port ) ) ; 
  Handle C# executable:           : comm = new Comm ( , Convert . ToInt32 ( port ) ) ; 
  Test begin scope                : listenTrd = new Thread ( listen ) ; 
  Test end scope                  : listenTrd = new Thread ( listen ) ; 
  Test preproc statement:         : listenTrd = new Thread ( listen ) ; 
  Test namespace definition:      : listenTrd = new Thread ( listen ) ; 
  Test class definition:          : listenTrd = new Thread ( listen ) ; 
  executable     : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test struct definition:         : listenTrd = new Thread ( listen ) ; 
  Test C# function definition:    : listenTrd = new Thread ( listen ) ; 
  Test control definition:        : listenTrd = new Thread ( listen ) ; 
  Test C# declaration:            : listenTrd = new Thread ( listen ) ; 
  executable     : Console . WriteLine ( "\n reached here" ) ; 
  Test C# executable:             : listenTrd = new Thread ( listen ) ; 
  Handle C# executable:           : listenTrd = new Thread ( listen ) ; 
  Test begin scope                : listenTrd . Start ( ) ; 
  Test end scope                  : listenTrd . Start ( ) ; 
  Test preproc statement:         : listenTrd . Start ( ) ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : listenTrd . Start ( ) ; 
--- stack size = 3 ---
  Test class definition:          : listenTrd . Start ( ) ; 
  Test struct definition:         : listenTrd . Start ( ) ; 
  Test C# function definition:    : listenTrd . Start ( ) ; 
  Test control definition:        : listenTrd . Start ( ) ; 
  Test C# declaration:            : listenTrd . Start ( ) ; 
  Test C# executable:             : listenTrd . Start ( ) ; 
  Handle C# executable:           : listenTrd . Start ( ) ; 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test begin scope                : sndMsg . command = "show" ; 
  Test end scope                  : sndMsg . command = "show" ; 
  Test preproc statement:         : sndMsg . command = "show" ; 
  Test namespace definition:      : sndMsg . command = "show" ; 
  Test class definition:          : sndMsg . command = "show" ; 
  Test struct definition:         : sndMsg . command = "show" ; 
  Test C# function definition:    : sndMsg . command = "show" ; 
  Test control definition:        : sndMsg . command = "show" ; 
  Test C# declaration:            : sndMsg . command = "show" ; 
  Test C# executable:             : sndMsg . command = "show" ; 
  Handle C# executable:           : sndMsg . command = "show" ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = ; 
  Test end scope                  : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . to = ; 
  Test class definition:          : sndMsg . to = ; 
  Test struct definition:         : sndMsg . to = ; 
  Test C# function definition:    : sndMsg . to = ; 
  Test control definition:        : sndMsg . to = ; 
  Test C# declaration:            : sndMsg . to = ; 
  Test C# executable:             : sndMsg . to = ; 
  Handle C# executable:           : sndMsg . to = ; 
  Test begin scope                : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test end scope                  : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test preproc statement:         : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test namespace definition:      : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test class definition:          : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test struct definition:         : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# function definition:    : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test control definition:        : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# declaration:            : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# executable:             : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Handle C# executable:           : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test begin scope                : sndMsg . body = "processReady" ; 
  Test end scope                  : sndMsg . body = "processReady" ; 
  Test preproc statement:         : sndMsg . body = "processReady" ; 
  Test namespace definition:      : sndMsg . body = "processReady" ; 
  Test class definition:          : sndMsg . body = "processReady" ; 
  Test struct definition:         : sndMsg . body = "processReady" ; 
  Test C# function definition:    : sndMsg . body = "processReady" ; 
  Test control definition:        : sndMsg . body = "processReady" ; 
  Test C# declaration:            : sndMsg . body = "processReady" ; 
  Test C# executable:             : sndMsg . body = "processReady" ; 
  Handle C# executable:           : sndMsg . body = "processReady" ; 
  Test begin scope                : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test end scope                  : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test preproc statement:         : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test namespace definition:      : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test class definition:          : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test struct definition:         : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# function definition:    : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test control definition:        : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# declaration:            : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# executable:             : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Handle C# executable:           : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test begin scope                : Console . WriteLine ( "\n reached here" ) ; 
  Test end scope                  : Console . WriteLine ( "\n reached here" ) ; 
  Test preproc statement:         : Console . WriteLine ( "\n reached here" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n reached here" ) ; 
  Test class definition:          : Console . WriteLine ( "\n reached here" ) ; 
  Test struct definition:         : Console . WriteLine ( "\n reached here" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n reached here" ) ; 
  Test control definition:        : Console . WriteLine ( "\n reached here" ) ; 
  Test C# declaration:            : Console . WriteLine ( "\n reached here" ) ; 
  Test C# executable:             : Console . WriteLine ( "\n reached here" ) ; 
  Handle C# executable:           : Console . WriteLine ( "\n reached here" ) ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : static void listen ( ) { 
  handle begin scope              : static void listen ( ) { 
--- stack size = 4 ---
  Test end scope                  : static void listen ( ) { 
  Test preproc statement:         : static void listen ( ) { 
  Test namespace definition:      : static void listen ( ) { 
  function def   : static void listen ( ) { 
  Test class definition:          : static void listen ( ) { 
  Test struct definition:         : static void listen ( ) { 
  Test C# function definition:    : static void listen ( ) { 
  Handle C# function definition:  : static void listen ( ) { 
  Test begin scope                : Builder builder = new Builder ( port ) ; 
  Test end scope                  : Builder builder = new Builder ( port ) ; 
  data declar    : Builder builder = new Builder ( port ) ; 
  Test preproc statement:         : Builder builder = new Builder ( port ) ; 
  Test namespace definition:      : Builder builder = new Builder ( port ) ; 
  Test class definition:          : Builder builder = new Builder ( port ) ; 
  Test struct definition:         : Builder builder = new Builder ( port ) ; 
  Test C# function definition:    : Builder builder = new Builder ( port ) ; 
  Test control definition:        : Builder builder = new Builder ( port ) ; 
  Test C# declaration:            : Builder builder = new Builder ( port ) ; 
  Handle C# declaration:          : Builder builder = new Builder ( port ) ; 
  Test begin scope                : while ( true ) { 
  handle begin scope              : while ( true ) { 
--- stack size = 5 ---
  Test end scope                  : while ( true ) { 
  Test preproc statement:         : while ( true ) { 
  Test namespace definition:      : while ( true ) { 
  Test class definition:          : while ( true ) { 
  control def    : while ( true ) { 
  Test struct definition:         : while ( true ) { 
  Test C# function definition:    : while ( true ) { 
  Test control definition:        : while ( true ) { 
  Handle control definition:      : while ( true ) { 
  Test begin scope                : ClientEnvironment . verbose = true ; 
  executable     : ClientEnvironment . verbose = true ; 
  Test end scope                  : ClientEnvironment . verbose = true ; 
  Test preproc statement:         : ClientEnvironment . verbose = true ; 
  Test namespace definition:      : ClientEnvironment . verbose = true ; 
  Test class definition:          : ClientEnvironment . verbose = true ; 
  Test struct definition:         : ClientEnvironment . verbose = true ; 
  Test C# function definition:    : ClientEnvironment . verbose = true ; 
  Test control definition:        : ClientEnvironment . verbose = true ; 
  function declar: CommMessage crcvMsg = comm . getMessage ( ) ; 
  Test C# declaration:            : ClientEnvironment . verbose = true ; 
  Test C# executable:             : ClientEnvironment . verbose = true ; 
  Handle C# executable:           : ClientEnvironment . verbose = true ; 
  Test begin scope                : CommMessage crcvMsg = comm . getMessage ( ) ; 
  Test end scope                  : CommMessage crcvMsg = comm . getMessage ( ) ; 
  Test preproc statement:         : CommMessage crcvMsg = comm . getMessage ( ) ; 
  Test namespace definition:      : CommMessage crcvMsg = comm . getMessage ( ) ; 
  Test class definition:          : CommMessage crcvMsg = comm . getMessage ( ) ; 
  Test struct definition:         : CommMessage crcvMsg = comm . getMessage ( ) ; 
  Test C# function definition:    : CommMessage crcvMsg = comm . getMessage ( ) ; 
  Test control definition:        : CommMessage crcvMsg = comm . getMessage ( ) ; 
  Test C# declaration:            : CommMessage crcvMsg = comm . getMessage ( ) ; 
  Handle C# declaration:          : CommMessage crcvMsg = comm . getMessage ( ) ; 
  Test begin scope                : if ( crcvMsg . body != null ) { 
  handle begin scope              : if ( crcvMsg . body != null ) { 
--- stack size = 6 ---
  Test end scope                  : if ( crcvMsg . body != null ) { 
  Test preproc statement:         : if ( crcvMsg . body != null ) { 
  Test namespace definition:      : if ( crcvMsg . body != null ) { 
  control def    : if ( crcvMsg . body != null ) { 
  Test class definition:          : if ( crcvMsg . body != null ) { 
  Test struct definition:         : if ( crcvMsg . body != null ) { 
  Test C# function definition:    : if ( crcvMsg . body != null ) { 
  Test control definition:        : if ( crcvMsg . body != null ) { 
  Handle control definition:      : if ( crcvMsg . body != null ) { 
  Test begin scope                : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test end scope                  : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  executable     : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test preproc statement:         : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test namespace definition:      : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test class definition:          : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test struct definition:         : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test C# function definition:    : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test control definition:        : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test C# declaration:            : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test C# executable:             : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Handle C# executable:           : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test begin scope                : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "request" ) ) { 
  handle begin scope              : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "request" ) ) { 
--- stack size = 7 ---
  Test end scope                  : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "request" ) ) { 
  Test preproc statement:         : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "request" ) ) { 
  Test namespace definition:      : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "request" ) ) { 
  Test class definition:          : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "request" ) ) { 
  control def    : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "request" ) ) { 
  Test struct definition:         : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "request" ) ) { 
  Test C# function definition:    : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "request" ) ) { 
  Test control definition:        : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "request" ) ) { 
  Handle control definition:      : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "request" ) ) { 
  Test begin scope                : bool result = builder . processRequest ( crcvMsg . body ) ; 
  data declar    : bool result = builder . processRequest ( crcvMsg . body ) ; 
  Test end scope                  : bool result = builder . processRequest ( crcvMsg . body ) ; 
--- stack size = 6 ---
  Test preproc statement:         : bool result = builder . processRequest ( crcvMsg . body ) ; 
  Test namespace definition:      : bool result = builder . processRequest ( crcvMsg . body ) ; 
  Test class definition:          : bool result = builder . processRequest ( crcvMsg . body ) ; 
  Test struct definition:         : bool result = builder . processRequest ( crcvMsg . body ) ; 
  Test C# function definition:    : bool result = builder . processRequest ( crcvMsg . body ) ; 
  Test control definition:        : bool result = builder . processRequest ( crcvMsg . body ) ; 
  Test C# declaration:            : bool result = builder . processRequest ( crcvMsg . body ) ; 
  Handle C# declaration:          : bool result = builder . processRequest ( crcvMsg . body ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "Quit" ) ) { 
  handle begin scope              : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "Quit" ) ) { 
--- stack size = 7 ---
  Test end scope                  : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "Quit" ) ) { 
  Test preproc statement:         : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "Quit" ) ) { 
  Test namespace definition:      : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "Quit" ) ) { 
  Test class definition:          : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "Quit" ) ) { 
  Test struct definition:         : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "Quit" ) ) { 
  Test C# function definition:    : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "Quit" ) ) { 
  control def    : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "Quit" ) ) { 
  Test control definition:        : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "Quit" ) ) { 
  Handle control definition:      : if ( crcvMsg . port == 8080 && crcvMsg . command . Equals ( "Quit" ) ) { 
  Test begin scope                : sendQuitMessage ( ) ; 
  Test end scope                  : sendQuitMessage ( ) ; 
  Test preproc statement:         : sendQuitMessage ( ) ; 
  function declar: sendQuitMessage ( ) ; 
  Test namespace definition:      : sendQuitMessage ( ) ; 
  Test class definition:          : sendQuitMessage ( ) ; 
  Test struct definition:         : sendQuitMessage ( ) ; 
  Test C# function definition:    : sendQuitMessage ( ) ; 
  Test control definition:        : sendQuitMessage ( ) ; 
  Test C# declaration:            : sendQuitMessage ( ) ; 
  Handle C# declaration:          : sendQuitMessage ( ) ; 
  Test begin scope                : try { 
  handle begin scope              : try { 
--- stack size = 8 ---
  Test end scope                  : try { 
  Test preproc statement:         : try { 
  Test namespace definition:      : try { 
  Test class definition:          : try { 
  Test struct definition:         : try { 
  control def    : try { 
  Test C# function definition:    : try { 
  Test control definition:        : try { 
  Handle control definition:      : try { 
  Test begin scope                : Console . WriteLine ( "\n------------------------------------" ) ; 
  Test end scope                  : Console . WriteLine ( "\n------------------------------------" ) ; 
  Test preproc statement:         : Console . WriteLine ( "\n------------------------------------" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n------------------------------------" ) ; 
  executable     : Console . WriteLine ( "\n------------------------------------" ) ; 
  Test class definition:          : Console . WriteLine ( "\n------------------------------------" ) ; 
  Test struct definition:         : Console . WriteLine ( "\n------------------------------------" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n------------------------------------" ) ; 
  Test control definition:        : Console . WriteLine ( "\n------------------------------------" ) ; 
  Test C# declaration:            : Console . WriteLine ( "\n------------------------------------" ) ; 
  Test C# executable:             : Console . WriteLine ( "\n------------------------------------" ) ; 
  executable     : Console . WriteLine ( "\n--Killing child Process--" ) ; 
  Handle C# executable:           : Console . WriteLine ( "\n------------------------------------" ) ; 
  Test begin scope                : Console . WriteLine ( "\n--Killing child Process--" ) ; 
  Test end scope                  : Console . WriteLine ( "\n--Killing child Process--" ) ; 
  Test preproc statement:         : Console . WriteLine ( "\n--Killing child Process--" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n--Killing child Process--" ) ; 
  Test class definition:          : Console . WriteLine ( "\n--Killing child Process--" ) ; 
  Test struct definition:         : Console . WriteLine ( "\n--Killing child Process--" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n--Killing child Process--" ) ; 
  Test control definition:        : Console . WriteLine ( "\n--Killing child Process--" ) ; 
  Test C# declaration:            : Console . WriteLine ( "\n--Killing child Process--" ) ; 
  Test C# executable:             : Console . WriteLine ( "\n--Killing child Process--" ) ; 
  Handle C# executable:           : Console . WriteLine ( "\n--Killing child Process--" ) ; 
  Test begin scope                : comm . closeConnection ( ) ; 
  Test end scope                  : comm . closeConnection ( ) ; 
  function declar: comm . closeConnection ( ) ; 
  Test preproc statement:         : comm . closeConnection ( ) ; 
  Test namespace definition:      : comm . closeConnection ( ) ; 
  Test class definition:          : comm . closeConnection ( ) ; 
  Test struct definition:         : comm . closeConnection ( ) ; 
  Test C# function definition:    : comm . closeConnection ( ) ; 
  Test control definition:        : comm . closeConnection ( ) ; 
  Test C# declaration:            : comm . closeConnection ( ) ; 
  Handle C# declaration:          : comm . closeConnection ( ) ; 
  Test begin scope                : foreach ( Process proc in Process . GetProcessesByName ( "Builder" ) ) { 
  handle begin scope              : foreach ( Process proc in Process . GetProcessesByName ( "Builder" ) ) { 
--- stack size = 9 ---
  Test end scope                  : foreach ( Process proc in Process . GetProcessesByName ( "Builder" ) ) { 
  Test preproc statement:         : foreach ( Process proc in Process . GetProcessesByName ( "Builder" ) ) { 
  Test namespace definition:      : foreach ( Process proc in Process . GetProcessesByName ( "Builder" ) ) { 
  Test class definition:          : foreach ( Process proc in Process . GetProcessesByName ( "Builder" ) ) { 
  Test struct definition:         : foreach ( Process proc in Process . GetProcessesByName ( "Builder" ) ) { 
  Test C# function definition:    : foreach ( Process proc in Process . GetProcessesByName ( "Builder" ) ) { 
  control def    : foreach ( Process proc in Process . GetProcessesByName ( "Builder" ) ) { 
  Test control definition:        : foreach ( Process proc in Process . GetProcessesByName ( "Builder" ) ) { 
  Handle control definition:      : foreach ( Process proc in Process . GetProcessesByName ( "Builder" ) ) { 
  Test begin scope                : proc . Kill ( ) ; 
  Test end scope                  : proc . Kill ( ) ; 
  Test preproc statement:         : proc . Kill ( ) ; 
  Test namespace definition:      : proc . Kill ( ) ; 
  Test class definition:          : proc . Kill ( ) ; 
  Test struct definition:         : proc . Kill ( ) ; 
  function declar: proc . Kill ( ) ; 
  Test C# function definition:    : proc . Kill ( ) ; 
  Test control definition:        : proc . Kill ( ) ; 
--- stack size = 8 ---
  Test C# declaration:            : proc . Kill ( ) ; 
  Handle C# declaration:          : proc . Kill ( ) ; 
--- stack size = 7 ---
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : catch ( Exception ex ) { 
  handle begin scope              : catch ( Exception ex ) { 
--- stack size = 8 ---
  Test end scope                  : catch ( Exception ex ) { 
  Test preproc statement:         : catch ( Exception ex ) { 
  Test namespace definition:      : catch ( Exception ex ) { 
  control def    : catch ( Exception ex ) { 
  Test class definition:          : catch ( Exception ex ) { 
  Test struct definition:         : catch ( Exception ex ) { 
  Test C# function definition:    : catch ( Exception ex ) { 
  Test control definition:        : catch ( Exception ex ) { 
  Handle control definition:      : catch ( Exception ex ) { 
  Test begin scope                : Console . WriteLine ( ex . Message ) ; 
  Test end scope                  : Console . WriteLine ( ex . Message ) ; 
  Test preproc statement:         : Console . WriteLine ( ex . Message ) ; 
  Test namespace definition:      : Console . WriteLine ( ex . Message ) ; 
  executable     : Console . WriteLine ( ex . Message ) ; 
  Test class definition:          : Console . WriteLine ( ex . Message ) ; 
--- stack size = 7 ---
  Test struct definition:         : Console . WriteLine ( ex . Message ) ; 
--- stack size = 6 ---
  Test C# function definition:    : Console . WriteLine ( ex . Message ) ; 
  Test control definition:        : Console . WriteLine ( ex . Message ) ; 
  Test C# declaration:            : Console . WriteLine ( ex . Message ) ; 
  Test C# executable:             : Console . WriteLine ( ex . Message ) ; 
  Handle C# executable:           : Console . WriteLine ( ex . Message ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "TransferCompleted" ) ) { 
  handle begin scope              : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "TransferCompleted" ) ) { 
--- stack size = 7 ---
  Test end scope                  : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "TransferCompleted" ) ) { 
  Test preproc statement:         : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "TransferCompleted" ) ) { 
  Test namespace definition:      : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "TransferCompleted" ) ) { 
  Test class definition:          : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "TransferCompleted" ) ) { 
  Test struct definition:         : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "TransferCompleted" ) ) { 
  Test C# function definition:    : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "TransferCompleted" ) ) { 
  control def    : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "TransferCompleted" ) ) { 
  Test control definition:        : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "TransferCompleted" ) ) { 
  Handle control definition:      : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "TransferCompleted" ) ) { 
  Test begin scope                : builder . buildProcess ( builder . fnames ) ; 
  Test end scope                  : builder . buildProcess ( builder . fnames ) ; 
  Test preproc statement:         : builder . buildProcess ( builder . fnames ) ; 
  Test namespace definition:      : builder . buildProcess ( builder . fnames ) ; 
  executable     : builder . buildProcess ( builder . fnames ) ; 
  Test class definition:          : builder . buildProcess ( builder . fnames ) ; 
--- stack size = 6 ---
  Test struct definition:         : builder . buildProcess ( builder . fnames ) ; 
  Test C# function definition:    : builder . buildProcess ( builder . fnames ) ; 
  Test control definition:        : builder . buildProcess ( builder . fnames ) ; 
  Test C# declaration:            : builder . buildProcess ( builder . fnames ) ; 
  Test C# executable:             : builder . buildProcess ( builder . fnames ) ; 
  Handle C# executable:           : builder . buildProcess ( builder . fnames ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "logsreceived" ) ) { 
  handle begin scope              : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "logsreceived" ) ) { 
--- stack size = 7 ---
  Test end scope                  : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "logsreceived" ) ) { 
  Test preproc statement:         : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "logsreceived" ) ) { 
  Test namespace definition:      : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "logsreceived" ) ) { 
  Test class definition:          : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "logsreceived" ) ) { 
  control def    : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "logsreceived" ) ) { 
  Test struct definition:         : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "logsreceived" ) ) { 
  Test C# function definition:    : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "logsreceived" ) ) { 
  Test control definition:        : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "logsreceived" ) ) { 
  Handle control definition:      : 
    else if ( crcvMsg . port == 8095 && crcvMsg . body != null && crcvMsg . body . Equals ( "logsreceived" ) ) { 
  Test begin scope                : if ( request != null &&! ( request . Equals ( "" ) ) ) { 
  handle begin scope              : if ( request != null &&! ( request . Equals ( "" ) ) ) { 
--- stack size = 8 ---
  Test end scope                  : if ( request != null &&! ( request . Equals ( "" ) ) ) { 
  Test preproc statement:         : if ( request != null &&! ( request . Equals ( "" ) ) ) { 
  Test namespace definition:      : if ( request != null &&! ( request . Equals ( "" ) ) ) { 
  control def    : if ( request != null &&! ( request . Equals ( "" ) ) ) { 
  Test class definition:          : if ( request != null &&! ( request . Equals ( "" ) ) ) { 
  Test struct definition:         : if ( request != null &&! ( request . Equals ( "" ) ) ) { 
  Test C# function definition:    : if ( request != null &&! ( request . Equals ( "" ) ) ) { 
  Test control definition:        : if ( request != null &&! ( request . Equals ( "" ) ) ) { 
  Handle control definition:      : if ( request != null &&! ( request . Equals ( "" ) ) ) { 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . command = "testrequest" ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test begin scope                : sndMsg . command = "testrequest" ; 
  Test end scope                  : sndMsg . command = "testrequest" ; 
  executable     : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . command = "testrequest" ; 
  Test namespace definition:      : sndMsg . command = "testrequest" ; 
  Test class definition:          : sndMsg . command = "testrequest" ; 
  Test struct definition:         : sndMsg . command = "testrequest" ; 
  Test C# function definition:    : sndMsg . command = "testrequest" ; 
  Test control definition:        : sndMsg . command = "testrequest" ; 
  executable     : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# declaration:            : sndMsg . command = "testrequest" ; 
  Test C# executable:             : sndMsg . command = "testrequest" ; 
  Handle C# executable:           : sndMsg . command = "testrequest" ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : sndMsg . body = request ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = ; 
  Test end scope                  : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . to = ; 
  Test class definition:          : sndMsg . to = ; 
  Test struct definition:         : sndMsg . to = ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : sndMsg . to = ; 
--- stack size = 7 ---
  Test control definition:        : sndMsg . to = ; 
--- stack size = 6 ---
  Test C# declaration:            : sndMsg . to = ; 
  Test C# executable:             : sndMsg . to = ; 
  Handle C# executable:           : sndMsg . to = ; 
  Test begin scope                : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test end scope                  : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test preproc statement:         : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test namespace definition:      : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test class definition:          : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test struct definition:         : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# function definition:    : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test control definition:        : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# declaration:            : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# executable:             : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Handle C# executable:           : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test begin scope                : sndMsg . body = request ; 
  Test end scope                  : sndMsg . body = request ; 
  Test preproc statement:         : sndMsg . body = request ; 
  Test namespace definition:      : sndMsg . body = request ; 
  Test class definition:          : sndMsg . body = request ; 
  Test struct definition:         : sndMsg . body = request ; 
  Test C# function definition:    : sndMsg . body = request ; 
  Test control definition:        : sndMsg . body = request ; 
  Test C# declaration:            : sndMsg . body = request ; 
  Test C# executable:             : sndMsg . body = request ; 
  Handle C# executable:           : sndMsg . body = request ; 
  Test begin scope                : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test end scope                  : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test preproc statement:         : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test namespace definition:      : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test class definition:          : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test struct definition:         : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# function definition:    : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test control definition:        : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# declaration:            : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# executable:             : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Handle C# executable:           : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    else if ( crcvMsg . port == 8077 && crcvMsg . command . Equals ( "dllrequest" ) ) { 
  handle begin scope              : 
    else if ( crcvMsg . port == 8077 && crcvMsg . command . Equals ( "dllrequest" ) ) { 
--- stack size = 7 ---
  Test end scope                  : 
    else if ( crcvMsg . port == 8077 && crcvMsg . command . Equals ( "dllrequest" ) ) { 
  Test preproc statement:         : 
    else if ( crcvMsg . port == 8077 && crcvMsg . command . Equals ( "dllrequest" ) ) { 
  Test namespace definition:      : 
    else if ( crcvMsg . port == 8077 && crcvMsg . command . Equals ( "dllrequest" ) ) { 
  Test class definition:          : 
    else if ( crcvMsg . port == 8077 && crcvMsg . command . Equals ( "dllrequest" ) ) { 
  control def    : 
    else if ( crcvMsg . port == 8077 && crcvMsg . command . Equals ( "dllrequest" ) ) { 
  Test struct definition:         : 
    else if ( crcvMsg . port == 8077 && crcvMsg . command . Equals ( "dllrequest" ) ) { 
  Test C# function definition:    : 
    else if ( crcvMsg . port == 8077 && crcvMsg . command . Equals ( "dllrequest" ) ) { 
  Test control definition:        : 
    else if ( crcvMsg . port == 8077 && crcvMsg . command . Equals ( "dllrequest" ) ) { 
  Handle control definition:      : 
    else if ( crcvMsg . port == 8077 && crcvMsg . command . Equals ( "dllrequest" ) ) { 
  Test begin scope                : sendDllFiles ( crcvMsg . port , crcvMsg . body ) ; 
  Test end scope                  : sendDllFiles ( crcvMsg . port , crcvMsg . body ) ; 
  Test preproc statement:         : sendDllFiles ( crcvMsg . port , crcvMsg . body ) ; 
  Test namespace definition:      : sendDllFiles ( crcvMsg . port , crcvMsg . body ) ; 
  Test class definition:          : sendDllFiles ( crcvMsg . port , crcvMsg . body ) ; 
  Test struct definition:         : sendDllFiles ( crcvMsg . port , crcvMsg . body ) ; 
  executable     : sendDllFiles ( crcvMsg . port , crcvMsg . body ) ; 
  Test C# function definition:    : sendDllFiles ( crcvMsg . port , crcvMsg . body ) ; 
  Test control definition:        : sendDllFiles ( crcvMsg . port , crcvMsg . body ) ; 
  Test C# declaration:            : sendDllFiles ( crcvMsg . port , crcvMsg . body ) ; 
  Test C# executable:             : sendDllFiles ( crcvMsg . port , crcvMsg . body ) ; 
  Handle C# executable:           : sendDllFiles ( crcvMsg . port , crcvMsg . body ) ; 
  function declar: sendReadyMessage ( ) ; 
  Test begin scope                : sendReadyMessage ( ) ; 
--- stack size = 6 ---
  Test end scope                  : sendReadyMessage ( ) ; 
--- stack size = 5 ---
  Test preproc statement:         : sendReadyMessage ( ) ; 
  Test namespace definition:      : sendReadyMessage ( ) ; 
  Test class definition:          : sendReadyMessage ( ) ; 
  Test struct definition:         : sendReadyMessage ( ) ; 
  Test C# function definition:    : sendReadyMessage ( ) ; 
  Test control definition:        : sendReadyMessage ( ) ; 
  Test C# declaration:            : sendReadyMessage ( ) ; 
  Handle C# declaration:          : sendReadyMessage ( ) ; 
  executable     : Thread . Sleep ( 1000 ) ; 
  Test begin scope                : } 
--- stack size = 4 ---
  Test end scope                  : } 
  Handle end scope                : } 
--- stack size = 3 ---
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : Thread . Sleep ( 1000 ) ; 
  Test end scope                  : Thread . Sleep ( 1000 ) ; 
  Test preproc statement:         : Thread . Sleep ( 1000 ) ; 
  Test namespace definition:      : Thread . Sleep ( 1000 ) ; 
  Test class definition:          : Thread . Sleep ( 1000 ) ; 
  Test struct definition:         : Thread . Sleep ( 1000 ) ; 
  Test C# function definition:    : Thread . Sleep ( 1000 ) ; 
  Test control definition:        : Thread . Sleep ( 1000 ) ; 
  Test C# declaration:            : Thread . Sleep ( 1000 ) ; 
  Test C# executable:             : Thread . Sleep ( 1000 ) ; 
  Handle C# executable:           : Thread . Sleep ( 1000 ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public static void sendQuitMessage ( ) { 
  handle begin scope              : public static void sendQuitMessage ( ) { 
--- stack size = 4 ---
  Test end scope                  : public static void sendQuitMessage ( ) { 
  Test preproc statement:         : public static void sendQuitMessage ( ) { 
  function def   : public static void sendQuitMessage ( ) { 
  Test namespace definition:      : public static void sendQuitMessage ( ) { 
  Test class definition:          : public static void sendQuitMessage ( ) { 
  Test struct definition:         : public static void sendQuitMessage ( ) { 
  Test C# function definition:    : public static void sendQuitMessage ( ) { 
  Handle C# function definition:  : public static void sendQuitMessage ( ) { 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . command = "Exit" ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test begin scope                : sndMsg . command = "Exit" ; 
  Test end scope                  : sndMsg . command = "Exit" ; 
  Test preproc statement:         : sndMsg . command = "Exit" ; 
  executable     : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . command = "Exit" ; 
  Test class definition:          : sndMsg . command = "Exit" ; 
  Test struct definition:         : sndMsg . command = "Exit" ; 
  Test C# function definition:    : sndMsg . command = "Exit" ; 
  Test control definition:        : sndMsg . command = "Exit" ; 
  Test C# declaration:            : sndMsg . command = "Exit" ; 
  Test C# executable:             : sndMsg . command = "Exit" ; 
  Handle C# executable:           : sndMsg . command = "Exit" ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : sndMsg . body = "Exit" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = ; 
  Test end scope                  : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . to = ; 
  Test class definition:          : sndMsg . to = ; 
  Test struct definition:         : sndMsg . to = ; 
  executable     : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# function definition:    : sndMsg . to = ; 
  Test control definition:        : sndMsg . to = ; 
  Test C# declaration:            : sndMsg . to = ; 
  Test C# executable:             : sndMsg . to = ; 
  Handle C# executable:           : sndMsg . to = ; 
  Test begin scope                : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test end scope                  : sndMsg . from = + port + "/IMessagePassingComm" ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : sndMsg . from = + port + "/IMessagePassingComm" ; 
--- stack size = 3 ---
  Test namespace definition:      : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test class definition:          : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test struct definition:         : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# function definition:    : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test control definition:        : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# declaration:            : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# executable:             : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Handle C# executable:           : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test begin scope                : sndMsg . body = "Exit" ; 
  Test end scope                  : sndMsg . body = "Exit" ; 
  Test preproc statement:         : sndMsg . body = "Exit" ; 
  Test namespace definition:      : sndMsg . body = "Exit" ; 
  Test class definition:          : sndMsg . body = "Exit" ; 
  Test struct definition:         : sndMsg . body = "Exit" ; 
  Test C# function definition:    : sndMsg . body = "Exit" ; 
  Test control definition:        : sndMsg . body = "Exit" ; 
  Test C# declaration:            : sndMsg . body = "Exit" ; 
  Test C# executable:             : sndMsg . body = "Exit" ; 
  Handle C# executable:           : sndMsg . body = "Exit" ; 
  Test begin scope                : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test end scope                  : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test preproc statement:         : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test namespace definition:      : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test class definition:          : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test struct definition:         : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# function definition:    : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test control definition:        : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# declaration:            : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# executable:             : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Handle C# executable:           : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public static void sendReadyMessage ( ) { 
  handle begin scope              : public static void sendReadyMessage ( ) { 
--- stack size = 4 ---
  Test end scope                  : public static void sendReadyMessage ( ) { 
  Test preproc statement:         : public static void sendReadyMessage ( ) { 
  function def   : public static void sendReadyMessage ( ) { 
  Test namespace definition:      : public static void sendReadyMessage ( ) { 
  Test class definition:          : public static void sendReadyMessage ( ) { 
  Test struct definition:         : public static void sendReadyMessage ( ) { 
  Test C# function definition:    : public static void sendReadyMessage ( ) { 
  Handle C# function definition:  : public static void sendReadyMessage ( ) { 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . command = "show" ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . to = ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test begin scope                : sndMsg . command = "show" ; 
  Test end scope                  : sndMsg . command = "show" ; 
  Test preproc statement:         : sndMsg . command = "show" ; 
  Test namespace definition:      : sndMsg . command = "show" ; 
  executable     : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test class definition:          : sndMsg . command = "show" ; 
  Test struct definition:         : sndMsg . command = "show" ; 
  Test C# function definition:    : sndMsg . command = "show" ; 
  Test control definition:        : sndMsg . command = "show" ; 
  executable     : sndMsg . body = "processReady" ; 
  Test C# declaration:            : sndMsg . command = "show" ; 
  Test C# executable:             : sndMsg . command = "show" ; 
  Handle C# executable:           : sndMsg . command = "show" ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
--- stack size = 3 ---
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = ; 
  Test end scope                  : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . to = ; 
  Test class definition:          : sndMsg . to = ; 
  Test struct definition:         : sndMsg . to = ; 
  Test C# function definition:    : sndMsg . to = ; 
  Test control definition:        : sndMsg . to = ; 
  Test C# declaration:            : sndMsg . to = ; 
  Test C# executable:             : sndMsg . to = ; 
  Handle C# executable:           : sndMsg . to = ; 
  Test begin scope                : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test end scope                  : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test preproc statement:         : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test namespace definition:      : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test class definition:          : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test struct definition:         : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# function definition:    : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test control definition:        : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# declaration:            : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# executable:             : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Handle C# executable:           : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test begin scope                : sndMsg . body = "processReady" ; 
  Test end scope                  : sndMsg . body = "processReady" ; 
  Test preproc statement:         : sndMsg . body = "processReady" ; 
  Test namespace definition:      : sndMsg . body = "processReady" ; 
  Test class definition:          : sndMsg . body = "processReady" ; 
  Test struct definition:         : sndMsg . body = "processReady" ; 
  Test C# function definition:    : sndMsg . body = "processReady" ; 
  Test control definition:        : sndMsg . body = "processReady" ; 
  Test C# declaration:            : sndMsg . body = "processReady" ; 
  Test C# executable:             : sndMsg . body = "processReady" ; 
  Handle C# executable:           : sndMsg . body = "processReady" ; 
  Test begin scope                : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test end scope                  : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test preproc statement:         : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test namespace definition:      : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test class definition:          : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test struct definition:         : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# function definition:    : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test control definition:        : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# declaration:            : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# executable:             : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Handle C# executable:           : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public static void sendDllFiles ( int portno , string Files ) { 
  handle begin scope              : public static void sendDllFiles ( int portno , string Files ) { 
--- stack size = 4 ---
  Test end scope                  : public static void sendDllFiles ( int portno , string Files ) { 
  Test preproc statement:         : public static void sendDllFiles ( int portno , string Files ) { 
  Test namespace definition:      : public static void sendDllFiles ( int portno , string Files ) { 
  function def   : public static void sendDllFiles ( int portno , string Files ) { 
  Test class definition:          : public static void sendDllFiles ( int portno , string Files ) { 
  Test struct definition:         : public static void sendDllFiles ( int portno , string Files ) { 
  Test C# function definition:    : public static void sendDllFiles ( int portno , string Files ) { 
  Handle C# function definition:  : public static void sendDllFiles ( int portno , string Files ) { 
  executable     : 
    Console . WriteLine ( "\n     started sending files to the Test harness local storage" ) ; 
  Test begin scope                : 
    Console . WriteLine ( "\n     started sending files to the Test harness local storage" ) ; 
  Test end scope                  : 
    Console . WriteLine ( "\n     started sending files to the Test harness local storage" ) ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n     started sending files to the Test harness local storage" ) ; 
  executable     : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n     started sending files to the Test harness local storage" ) ; 
  Test class definition:          : 
    Console . WriteLine ( "\n     started sending files to the Test harness local storage" ) ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n     started sending files to the Test harness local storage" ) ; 
  Test C# function definition:    : 
    Console . WriteLine ( "\n     started sending files to the Test harness local storage" ) ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test control definition:        : 
    Console . WriteLine ( "\n     started sending files to the Test harness local storage" ) ; 
  Test C# declaration:            : 
    Console . WriteLine ( "\n     started sending files to the Test harness local storage" ) ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n     started sending files to the Test harness local storage" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n     started sending files to the Test harness local storage" ) ; 
  executable     : sndMsg . command = "show" ; 
  Test begin scope                : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test end scope                  : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test class definition:          : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# function definition:    : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test control definition:        : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test C# declaration:            : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  executable     : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  executable     : sndMsg . body = port ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : sndMsg . command = "show" ; 
  Test end scope                  : sndMsg . command = "show" ; 
  Test preproc statement:         : sndMsg . command = "show" ; 
  Test namespace definition:      : sndMsg . command = "show" ; 
  Test class definition:          : sndMsg . command = "show" ; 
  Test struct definition:         : sndMsg . command = "show" ; 
  data declar    : List < string > names = getDllFileList ( Files ) ; 
  Test C# function definition:    : sndMsg . command = "show" ; 
  Test control definition:        : sndMsg . command = "show" ; 
  Test C# declaration:            : sndMsg . command = "show" ; 
  Test C# executable:             : sndMsg . command = "show" ; 
  Handle C# executable:           : sndMsg . command = "show" ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test end scope                  : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test preproc statement:         : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test namespace definition:      : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test class definition:          : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test struct definition:         : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test C# function definition:    : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test control definition:        : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test C# declaration:            : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test C# executable:             : sndMsg . to = + portno + "/IPluggableComm" ; 
  Handle C# executable:           : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test begin scope                : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test end scope                  : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test preproc statement:         : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test namespace definition:      : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test class definition:          : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test struct definition:         : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# function definition:    : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test control definition:        : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# declaration:            : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# executable:             : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Handle C# executable:           : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test begin scope                : sndMsg . body = port ; 
  Test end scope                  : sndMsg . body = port ; 
  Test preproc statement:         : sndMsg . body = port ; 
  Test namespace definition:      : sndMsg . body = port ; 
  Test class definition:          : sndMsg . body = port ; 
  Test struct definition:         : sndMsg . body = port ; 
  Test C# function definition:    : sndMsg . body = port ; 
  Test control definition:        : sndMsg . body = port ; 
  Test C# declaration:            : sndMsg . body = port ; 
  Test C# executable:             : sndMsg . body = port ; 
  Handle C# executable:           : sndMsg . body = port ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : List < string > names = getDllFileList ( Files ) ; 
  Test end scope                  : List < string > names = getDllFileList ( Files ) ; 
  Test preproc statement:         : List < string > names = getDllFileList ( Files ) ; 
  Test namespace definition:      : List < string > names = getDllFileList ( Files ) ; 
  Test class definition:          : List < string > names = getDllFileList ( Files ) ; 
  Test struct definition:         : List < string > names = getDllFileList ( Files ) ; 
  Test C# function definition:    : List < string > names = getDllFileList ( Files ) ; 
  Test control definition:        : List < string > names = getDllFileList ( Files ) ; 
  Test C# declaration:            : List < string > names = getDllFileList ( Files ) ; 
  Handle C# declaration:          : List < string > names = getDllFileList ( Files ) ; 
  Test begin scope                : foreach ( string file in names ) { 
  handle begin scope              : foreach ( string file in names ) { 
--- stack size = 5 ---
  Test end scope                  : foreach ( string file in names ) { 
  Test preproc statement:         : foreach ( string file in names ) { 
  Test namespace definition:      : foreach ( string file in names ) { 
  Test class definition:          : foreach ( string file in names ) { 
  control def    : foreach ( string file in names ) { 
  Test struct definition:         : foreach ( string file in names ) { 
  Test C# function definition:    : foreach ( string file in names ) { 
  Test control definition:        : foreach ( string file in names ) { 
  Handle control definition:      : foreach ( string file in names ) { 
  data declar    : string fileSpec = file ; 
  Test begin scope                : string fileSpec = file ; 
  Test end scope                  : string fileSpec = file ; 
  Test preproc statement:         : string fileSpec = file ; 
  Test namespace definition:      : string fileSpec = file ; 
  Test class definition:          : string fileSpec = file ; 
  Test struct definition:         : string fileSpec = file ; 
  Test C# function definition:    : string fileSpec = file ; 
  Test control definition:        : string fileSpec = file ; 
  Test C# declaration:            : string fileSpec = file ; 
  Handle C# declaration:          : string fileSpec = file ; 
  Test begin scope                : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test end scope                  : string fileName = Path . GetFileName ( fileSpec ) ; 
  data declar    : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test preproc statement:         : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test namespace definition:      : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test class definition:          : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test struct definition:         : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test C# function definition:    : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test control definition:        : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test C# declaration:            : string fileName = Path . GetFileName ( fileSpec ) ; 
  Handle C# declaration:          : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test begin scope                : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , TestEnvironment . fileStorage ) ; 
  executable     : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , TestEnvironment . fileStorage ) ; 
  Test end scope                  : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , TestEnvironment . fileStorage ) ; 
  Test preproc statement:         : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , TestEnvironment . fileStorage ) ; 
  Test namespace definition:      : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , TestEnvironment . fileStorage ) ; 
  Test class definition:          : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , TestEnvironment . fileStorage ) ; 
  Test struct definition:         : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , TestEnvironment . fileStorage ) ; 
  Test C# function definition:    : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , TestEnvironment . fileStorage ) ; 
  executable     : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test control definition:        : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , TestEnvironment . fileStorage ) ; 
  Test C# declaration:            : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , TestEnvironment . fileStorage ) ; 
  Test C# executable:             : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , TestEnvironment . fileStorage ) ; 
  Handle C# executable:           : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , TestEnvironment . fileStorage ) ; 
  Test begin scope                : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test end scope                  : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test preproc statement:         : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  data declar    : bool transferSuccess = comm . postFile ( file , "cb2th" , receivePath ) ; 
  Test namespace definition:      : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test class definition:          : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test struct definition:         : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test C# function definition:    : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test control definition:        : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test C# declaration:            : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test C# executable:             : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  executable     : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Handle C# executable:           : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test begin scope                : bool transferSuccess = comm . postFile ( file , "cb2th" , receivePath ) ; 
  Test end scope                  : bool transferSuccess = comm . postFile ( file , "cb2th" , receivePath ) ; 
  Test preproc statement:         : bool transferSuccess = comm . postFile ( file , "cb2th" , receivePath ) ; 
  Test namespace definition:      : bool transferSuccess = comm . postFile ( file , "cb2th" , receivePath ) ; 
  Test class definition:          : bool transferSuccess = comm . postFile ( file , "cb2th" , receivePath ) ; 
  executable     : Thread . Sleep ( 2000 ) ; 
  Test struct definition:         : bool transferSuccess = comm . postFile ( file , "cb2th" , receivePath ) ; 
--- stack size = 4 ---
  Test C# function definition:    : bool transferSuccess = comm . postFile ( file , "cb2th" , receivePath ) ; 
  Test control definition:        : bool transferSuccess = comm . postFile ( file , "cb2th" , receivePath ) ; 
  Test C# declaration:            : bool transferSuccess = comm . postFile ( file , "cb2th" , receivePath ) ; 
  Handle C# declaration:          : bool transferSuccess = comm . postFile ( file , "cb2th" , receivePath ) ; 
  Test begin scope                : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  executable     : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test end scope                  : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test preproc statement:         : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test namespace definition:      : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test class definition:          : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test struct definition:         : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test C# function definition:    : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test control definition:        : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test C# declaration:            : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test C# executable:             : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Handle C# executable:           : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test begin scope                : Thread . Sleep ( 2000 ) ; 
  Test end scope                  : Thread . Sleep ( 2000 ) ; 
  executable     : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test preproc statement:         : Thread . Sleep ( 2000 ) ; 
  Test namespace definition:      : Thread . Sleep ( 2000 ) ; 
  Test class definition:          : Thread . Sleep ( 2000 ) ; 
  Test struct definition:         : Thread . Sleep ( 2000 ) ; 
  Test C# function definition:    : Thread . Sleep ( 2000 ) ; 
  Test control definition:        : Thread . Sleep ( 2000 ) ; 
  Test C# declaration:            : Thread . Sleep ( 2000 ) ; 
  Test C# executable:             : Thread . Sleep ( 2000 ) ; 
  Handle C# executable:           : Thread . Sleep ( 2000 ) ; 
  Test begin scope                : } 
  executable     : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test end scope                  : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test preproc statement:         : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test class definition:          : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  executable     : sndMsg . command = "show" ; 
  Test struct definition:         : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test control definition:        : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test C# declaration:            : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test C# executable:             : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test begin scope                : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test end scope                  : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test class definition:          : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test C# function definition:    : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test control definition:        : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# declaration:            : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test begin scope                : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test end scope                  : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test preproc statement:         : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  executable     : sndMsg . body = "DllTransferCompleted" ; 
  Test namespace definition:      : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test class definition:          : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test struct definition:         : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test C# function definition:    : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test control definition:        : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test C# declaration:            : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  executable     : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# executable:             : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Handle C# executable:           : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test begin scope                : sndMsg . command = "show" ; 
  Test end scope                  : sndMsg . command = "show" ; 
  Test preproc statement:         : sndMsg . command = "show" ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : sndMsg . command = "show" ; 
  Test class definition:          : sndMsg . command = "show" ; 
  Test struct definition:         : sndMsg . command = "show" ; 
  Test C# function definition:    : sndMsg . command = "show" ; 
  Test control definition:        : sndMsg . command = "show" ; 
  Test C# declaration:            : sndMsg . command = "show" ; 
  executable     : TestUtilities . putLine ( "last message received\n" ) ; 
  Test C# executable:             : sndMsg . command = "show" ; 
--- stack size = 3 ---
  Handle C# executable:           : sndMsg . command = "show" ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test end scope                  : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test preproc statement:         : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test namespace definition:      : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test class definition:          : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test struct definition:         : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test C# function definition:    : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test control definition:        : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test C# declaration:            : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test C# executable:             : sndMsg . to = + portno + "/IPluggableComm" ; 
  Handle C# executable:           : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test begin scope                : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test end scope                  : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test preproc statement:         : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test namespace definition:      : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test class definition:          : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test struct definition:         : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# function definition:    : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test control definition:        : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# declaration:            : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test C# executable:             : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Handle C# executable:           : sndMsg . from = + port + "/IMessagePassingComm" ; 
  Test begin scope                : sndMsg . body = "DllTransferCompleted" ; 
  Test end scope                  : sndMsg . body = "DllTransferCompleted" ; 
  Test preproc statement:         : sndMsg . body = "DllTransferCompleted" ; 
  Test namespace definition:      : sndMsg . body = "DllTransferCompleted" ; 
  Test class definition:          : sndMsg . body = "DllTransferCompleted" ; 
  Test struct definition:         : sndMsg . body = "DllTransferCompleted" ; 
  Test C# function definition:    : sndMsg . body = "DllTransferCompleted" ; 
  Test control definition:        : sndMsg . body = "DllTransferCompleted" ; 
  Test C# declaration:            : sndMsg . body = "DllTransferCompleted" ; 
  Test C# executable:             : sndMsg . body = "DllTransferCompleted" ; 
  Handle C# executable:           : sndMsg . body = "DllTransferCompleted" ; 
  Test begin scope                : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test end scope                  : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test preproc statement:         : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test namespace definition:      : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test class definition:          : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test struct definition:         : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# function definition:    : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test control definition:        : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# declaration:            : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test C# executable:             : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Handle C# executable:           : sndMsg . port = Convert . ToInt32 ( port ) ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : TestUtilities . putLine ( "last message received\n" ) ; 
  Test end scope                  : TestUtilities . putLine ( "last message received\n" ) ; 
  Test preproc statement:         : TestUtilities . putLine ( "last message received\n" ) ; 
  Test namespace definition:      : TestUtilities . putLine ( "last message received\n" ) ; 
  Test class definition:          : TestUtilities . putLine ( "last message received\n" ) ; 
  Test struct definition:         : TestUtilities . putLine ( "last message received\n" ) ; 
  Test C# function definition:    : TestUtilities . putLine ( "last message received\n" ) ; 
  Test control definition:        : TestUtilities . putLine ( "last message received\n" ) ; 
  Test C# declaration:            : TestUtilities . putLine ( "last message received\n" ) ; 
  Test C# executable:             : TestUtilities . putLine ( "last message received\n" ) ; 
  Handle C# executable:           : TestUtilities . putLine ( "last message received\n" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public static List < string > getDllFileList ( string filenames ) { 
  handle begin scope              : public static List < string > getDllFileList ( string filenames ) { 
--- stack size = 4 ---
  Test end scope                  : public static List < string > getDllFileList ( string filenames ) { 
  Test preproc statement:         : public static List < string > getDllFileList ( string filenames ) { 
  Test namespace definition:      : public static List < string > getDllFileList ( string filenames ) { 
  Test class definition:          : public static List < string > getDllFileList ( string filenames ) { 
  function def   : public static List < string > getDllFileList ( string filenames ) { 
  Test struct definition:         : public static List < string > getDllFileList ( string filenames ) { 
  Test C# function definition:    : public static List < string > getDllFileList ( string filenames ) { 
  Handle C# function definition:  : public static List < string > getDllFileList ( string filenames ) { 
  Test begin scope                : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Test end scope                  : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Test preproc statement:         : string [ ] fnames = filenames . Split ( ' ' ) ; 
  executable     : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Test namespace definition:      : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Test class definition:          : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Test struct definition:         : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Test C# function definition:    : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Test control definition:        : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Test C# declaration:            : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Test C# executable:             : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Handle C# executable:           : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Test begin scope                : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test end scope                  : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test preproc statement:         : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test namespace definition:      : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  executable     : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test class definition:          : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test struct definition:         : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test C# function definition:    : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test control definition:        : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test C# declaration:            : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  data declar    : List < string > names = new List < string > ( ) ; 
  Test C# executable:             : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Handle C# executable:           : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test begin scope                : List < string > names = new List < string > ( ) ; 
  Test end scope                  : List < string > names = new List < string > ( ) ; 
  Test preproc statement:         : List < string > names = new List < string > ( ) ; 
  Test namespace definition:      : List < string > names = new List < string > ( ) ; 
  data declar    : List < string > files = new List < string > ( ) ; 
  Test class definition:          : List < string > names = new List < string > ( ) ; 
  Test struct definition:         : List < string > names = new List < string > ( ) ; 
  Test C# function definition:    : List < string > names = new List < string > ( ) ; 
  Test control definition:        : List < string > names = new List < string > ( ) ; 
  Test C# declaration:            : List < string > names = new List < string > ( ) ; 
  Handle C# declaration:          : List < string > names = new List < string > ( ) ; 
  Test begin scope                : List < string > files = new List < string > ( ) ; 
  Test end scope                  : List < string > files = new List < string > ( ) ; 
  Test preproc statement:         : List < string > files = new List < string > ( ) ; 
  Test namespace definition:      : List < string > files = new List < string > ( ) ; 
  Test class definition:          : List < string > files = new List < string > ( ) ; 
  Test struct definition:         : List < string > files = new List < string > ( ) ; 
  Test C# function definition:    : List < string > files = new List < string > ( ) ; 
  Test control definition:        : List < string > files = new List < string > ( ) ; 
  Test C# declaration:            : List < string > files = new List < string > ( ) ; 
  Handle C# declaration:          : List < string > files = new List < string > ( ) ; 
  Test begin scope                : foreach ( string file in fnames ) { 
  handle begin scope              : foreach ( string file in fnames ) { 
--- stack size = 5 ---
  Test end scope                  : foreach ( string file in fnames ) { 
  Test preproc statement:         : foreach ( string file in fnames ) { 
  Test namespace definition:      : foreach ( string file in fnames ) { 
  control def    : foreach ( string file in fnames ) { 
  Test class definition:          : foreach ( string file in fnames ) { 
  Test struct definition:         : foreach ( string file in fnames ) { 
  Test C# function definition:    : foreach ( string file in fnames ) { 
  Test control definition:        : foreach ( string file in fnames ) { 
  Handle control definition:      : foreach ( string file in fnames ) { 
  Test begin scope                : string [ ] list = Directory . GetFiles ( receivePath , file ) ; 
  Test end scope                  : string [ ] list = Directory . GetFiles ( receivePath , file ) ; 
  Test preproc statement:         : string [ ] list = Directory . GetFiles ( receivePath , file ) ; 
  Test namespace definition:      : string [ ] list = Directory . GetFiles ( receivePath , file ) ; 
  Test class definition:          : string [ ] list = Directory . GetFiles ( receivePath , file ) ; 
  Test struct definition:         : string [ ] list = Directory . GetFiles ( receivePath , file ) ; 
  executable     : string [ ] list = Directory . GetFiles ( receivePath , file ) ; 
  Test C# function definition:    : string [ ] list = Directory . GetFiles ( receivePath , file ) ; 
  Test control definition:        : string [ ] list = Directory . GetFiles ( receivePath , file ) ; 
  Test C# declaration:            : string [ ] list = Directory . GetFiles ( receivePath , file ) ; 
  Test C# executable:             : string [ ] list = Directory . GetFiles ( receivePath , file ) ; 
  Handle C# executable:           : string [ ] list = Directory . GetFiles ( receivePath , file ) ; 
  Test begin scope                : names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test end scope                  : names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test preproc statement:         : names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test namespace definition:      : names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test class definition:          : names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test struct definition:         : names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
  executable     : names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test C# function definition:    : names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
--- stack size = 4 ---
  Test control definition:        : names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test C# declaration:            : names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test C# executable:             : names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
  executable     : return names ; 
  Handle C# executable:           : names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
--- stack size = 3 ---
  Test begin scope                : } 
  Test end scope                  : } 
--- stack size = 2 ---
  Handle end scope                : } 
  Test begin scope                : return names ; 
--- stack size = 1 ---
  Test end scope                  : return names ; 
  Test preproc statement:         : return names ; 
  Test namespace definition:      : return names ; 
  Test class definition:          : return names ; 
  Test struct definition:         : return names ; 
  using declar   : using System ; 
  Test C# function definition:    : return names ; 
  Test control definition:        : return names ; 
  Test C# declaration:            : return names ; 
  using declar   : using System . Collections . Generic ; 
  Test C# executable:             : return names ; 
  Handle C# executable:           : return names ; 
  using declar   : using System . Linq ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  using declar   : using System . Text ; 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  using declar   : using System . Threading . Tasks ; 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Collections . Generic ; 
  Test end scope                  : using System . Collections . Generic ; 
  Test preproc statement:         : using System . Collections . Generic ; 
  Test namespace definition:      : using System . Collections . Generic ; 
  Test class definition:          : using System . Collections . Generic ; 
  Test struct definition:         : using System . Collections . Generic ; 
  Test C# function definition:    : using System . Collections . Generic ; 
  Test control definition:        : using System . Collections . Generic ; 
  Test C# declaration:            : using System . Collections . Generic ; 
  Handle C# declaration:          : using System . Collections . Generic ; 
  Test begin scope                : using System . Linq ; 
  Test end scope                  : using System . Linq ; 
  Test preproc statement:         : using System . Linq ; 
  Test namespace definition:      : using System . Linq ; 
  Test class definition:          : using System . Linq ; 
  Test struct definition:         : using System . Linq ; 
  Test C# function definition:    : using System . Linq ; 
  Test control definition:        : using System . Linq ; 
  Test C# declaration:            : using System . Linq ; 
  Handle C# declaration:          : using System . Linq ; 
  Test begin scope                : using System . Text ; 
  Test end scope                  : using System . Text ; 
  Test preproc statement:         : using System . Text ; 
  Test namespace definition:      : using System . Text ; 
  Test class definition:          : using System . Text ; 
  Test struct definition:         : using System . Text ; 
  Test C# function definition:    : using System . Text ; 
  Test control definition:        : using System . Text ; 
  Test C# declaration:            : using System . Text ; 
  Handle C# declaration:          : using System . Text ; 
  Test begin scope                : using System . Threading . Tasks ; 
  Test end scope                  : using System . Threading . Tasks ; 
  Test preproc statement:         : using System . Threading . Tasks ; 
  Test namespace definition:      : using System . Threading . Tasks ; 
  Test class definition:          : using System . Threading . Tasks ; 
  Test struct definition:         : using System . Threading . Tasks ; 
  Test C# function definition:    : using System . Threading . Tasks ; 
  Test control definition:        : using System . Threading . Tasks ; 
  Test C# declaration:            : using System . Threading . Tasks ; 
  Handle C# declaration:          : using System . Threading . Tasks ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Dependency { 
  handle begin scope              : public class Dependency { 
--- stack size = 3 ---
  Test end scope                  : public class Dependency { 
  Test preproc statement:         : public class Dependency { 
  class def      : public class Dependency { 
  Test namespace definition:      : public class Dependency { 
  Test class definition:          : public class Dependency { 
  Handle class definition:        : public class Dependency { 
  Test begin scope                : public int Multiply ( int a , int b ) { 
  handle begin scope              : public int Multiply ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Multiply ( int a , int b ) { 
  Test preproc statement:         : public int Multiply ( int a , int b ) { 
  Test namespace definition:      : public int Multiply ( int a , int b ) { 
  function def   : public int Multiply ( int a , int b ) { 
  Test class definition:          : public int Multiply ( int a , int b ) { 
  Test struct definition:         : public int Multiply ( int a , int b ) { 
  Test C# function definition:    : public int Multiply ( int a , int b ) { 
  Handle C# function definition:  : public int Multiply ( int a , int b ) { 
  default:       : return a * b ; 
  Test begin scope                : return a * b ; 
--- stack size = 3 ---
  Test end scope                  : return a * b ; 
  Test preproc statement:         : return a * b ; 
  Test namespace definition:      : return a * b ; 
  Test class definition:          : return a * b ; 
  Test struct definition:         : return a * b ; 
  Test C# function definition:    : return a * b ; 
  Test control definition:        : return a * b ; 
  Test C# declaration:            : return a * b ; 
  Test C# executable:             : return a * b ; 
  Test default:                   : return a * b ; 
  Handle default:                 : return a * b ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public int Addition ( int a , int b ) { 
  handle begin scope              : public int Addition ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Addition ( int a , int b ) { 
  Test preproc statement:         : public int Addition ( int a , int b ) { 
  Test namespace definition:      : public int Addition ( int a , int b ) { 
  function def   : public int Addition ( int a , int b ) { 
  Test class definition:          : public int Addition ( int a , int b ) { 
  Test struct definition:         : public int Addition ( int a , int b ) { 
  Test C# function definition:    : public int Addition ( int a , int b ) { 
  executable     : return a + b ; 
  Handle C# function definition:  : public int Addition ( int a , int b ) { 
--- stack size = 3 ---
  Test begin scope                : return a + b ; 
--- stack size = 2 ---
  Test end scope                  : return a + b ; 
--- stack size = 1 ---
  Test preproc statement:         : return a + b ; 
  Test namespace definition:      : return a + b ; 
  Test class definition:          : return a + b ; 
  Test struct definition:         : return a + b ; 
  Test C# function definition:    : return a + b ; 
  Test control definition:        : return a + b ; 
  using declar   : using System ; 
  Test C# declaration:            : return a + b ; 
  Test C# executable:             : return a + b ; 
  Handle C# executable:           : return a + b ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  using declar   : using System . Collections . Generic ; 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  using declar   : using System . Linq ; 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  using declar   : using System . Text ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  using declar   : using System . Threading . Tasks ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Collections . Generic ; 
  Test end scope                  : using System . Collections . Generic ; 
  Test preproc statement:         : using System . Collections . Generic ; 
  Test namespace definition:      : using System . Collections . Generic ; 
  Test class definition:          : using System . Collections . Generic ; 
  Test struct definition:         : using System . Collections . Generic ; 
  Test C# function definition:    : using System . Collections . Generic ; 
  Test control definition:        : using System . Collections . Generic ; 
  Test C# declaration:            : using System . Collections . Generic ; 
  Handle C# declaration:          : using System . Collections . Generic ; 
  Test begin scope                : using System . Linq ; 
  Test end scope                  : using System . Linq ; 
  Test preproc statement:         : using System . Linq ; 
  Test namespace definition:      : using System . Linq ; 
  Test class definition:          : using System . Linq ; 
  Test struct definition:         : using System . Linq ; 
  Test C# function definition:    : using System . Linq ; 
  Test control definition:        : using System . Linq ; 
  Test C# declaration:            : using System . Linq ; 
  Handle C# declaration:          : using System . Linq ; 
  Test begin scope                : using System . Text ; 
  Test end scope                  : using System . Text ; 
  Test preproc statement:         : using System . Text ; 
  Test namespace definition:      : using System . Text ; 
  Test class definition:          : using System . Text ; 
  Test struct definition:         : using System . Text ; 
  Test C# function definition:    : using System . Text ; 
  Test control definition:        : using System . Text ; 
  Test C# declaration:            : using System . Text ; 
  Handle C# declaration:          : using System . Text ; 
  Test begin scope                : using System . Threading . Tasks ; 
  Test end scope                  : using System . Threading . Tasks ; 
  Test preproc statement:         : using System . Threading . Tasks ; 
  Test namespace definition:      : using System . Threading . Tasks ; 
  Test class definition:          : using System . Threading . Tasks ; 
  Test struct definition:         : using System . Threading . Tasks ; 
  Test C# function definition:    : using System . Threading . Tasks ; 
  Test control definition:        : using System . Threading . Tasks ; 
  Test C# declaration:            : using System . Threading . Tasks ; 
  Handle C# declaration:          : using System . Threading . Tasks ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Dependency { 
  handle begin scope              : public class Dependency { 
--- stack size = 3 ---
  Test end scope                  : public class Dependency { 
  class def      : public class Dependency { 
  Test preproc statement:         : public class Dependency { 
  Test namespace definition:      : public class Dependency { 
  Test class definition:          : public class Dependency { 
  Handle class definition:        : public class Dependency { 
  Test begin scope                : public int Multiply ( int a , int b ) { 
  handle begin scope              : public int Multiply ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Multiply ( int a , int b ) { 
  Test preproc statement:         : public int Multiply ( int a , int b ) { 
  Test namespace definition:      : public int Multiply ( int a , int b ) { 
  function def   : public int Multiply ( int a , int b ) { 
  Test class definition:          : public int Multiply ( int a , int b ) { 
  Test struct definition:         : public int Multiply ( int a , int b ) { 
  Test C# function definition:    : public int Multiply ( int a , int b ) { 
  default:       : return a * b ; 
  Handle C# function definition:  : public int Multiply ( int a , int b ) { 
--- stack size = 3 ---
  Test begin scope                : return a * b ; 
  Test end scope                  : return a * b ; 
  Test preproc statement:         : return a * b ; 
  Test namespace definition:      : return a * b ; 
  Test class definition:          : return a * b ; 
  Test struct definition:         : return a * b ; 
  Test C# function definition:    : return a * b ; 
  Test control definition:        : return a * b ; 
  Test C# declaration:            : return a * b ; 
  Test C# executable:             : return a * b ; 
  Test default:                   : return a * b ; 
  Handle default:                 : return a * b ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public int Addition ( int a , int b ) { 
  handle begin scope              : public int Addition ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Addition ( int a , int b ) { 
  Test preproc statement:         : public int Addition ( int a , int b ) { 
  Test namespace definition:      : public int Addition ( int a , int b ) { 
  function def   : public int Addition ( int a , int b ) { 
  Test class definition:          : public int Addition ( int a , int b ) { 
  Test struct definition:         : public int Addition ( int a , int b ) { 
  Test C# function definition:    : public int Addition ( int a , int b ) { 
  executable     : return a + b ; 
  Handle C# function definition:  : public int Addition ( int a , int b ) { 
--- stack size = 3 ---
  Test begin scope                : return a + b ; 
--- stack size = 2 ---
  Test end scope                  : return a + b ; 
--- stack size = 1 ---
  Test preproc statement:         : return a + b ; 
  Test namespace definition:      : return a + b ; 
  Test class definition:          : return a + b ; 
  Test struct definition:         : return a + b ; 
  Test C# function definition:    : return a + b ; 
  using declar   : using System ; 
  Test control definition:        : return a + b ; 
  Test C# declaration:            : return a + b ; 
  Test C# executable:             : return a + b ; 
  Handle C# executable:           : return a + b ; 
  using declar   : using System . Collections . Generic ; 
  Test begin scope                : } 
  Test end scope                  : } 
  using declar   : using System . Linq ; 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System . Text ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  using declar   : using System . Threading . Tasks ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Collections . Generic ; 
  Test end scope                  : using System . Collections . Generic ; 
  Test preproc statement:         : using System . Collections . Generic ; 
  Test namespace definition:      : using System . Collections . Generic ; 
  Test class definition:          : using System . Collections . Generic ; 
  Test struct definition:         : using System . Collections . Generic ; 
  Test C# function definition:    : using System . Collections . Generic ; 
  Test control definition:        : using System . Collections . Generic ; 
  Test C# declaration:            : using System . Collections . Generic ; 
  Handle C# declaration:          : using System . Collections . Generic ; 
  Test begin scope                : using System . Linq ; 
  Test end scope                  : using System . Linq ; 
  Test preproc statement:         : using System . Linq ; 
  Test namespace definition:      : using System . Linq ; 
  Test class definition:          : using System . Linq ; 
  Test struct definition:         : using System . Linq ; 
  Test C# function definition:    : using System . Linq ; 
  Test control definition:        : using System . Linq ; 
  Test C# declaration:            : using System . Linq ; 
  Handle C# declaration:          : using System . Linq ; 
  Test begin scope                : using System . Text ; 
  Test end scope                  : using System . Text ; 
  Test preproc statement:         : using System . Text ; 
  Test namespace definition:      : using System . Text ; 
  Test class definition:          : using System . Text ; 
  Test struct definition:         : using System . Text ; 
  Test C# function definition:    : using System . Text ; 
  Test control definition:        : using System . Text ; 
  Test C# declaration:            : using System . Text ; 
  Handle C# declaration:          : using System . Text ; 
  Test begin scope                : using System . Threading . Tasks ; 
  Test end scope                  : using System . Threading . Tasks ; 
  Test preproc statement:         : using System . Threading . Tasks ; 
  Test namespace definition:      : using System . Threading . Tasks ; 
  Test class definition:          : using System . Threading . Tasks ; 
  Test struct definition:         : using System . Threading . Tasks ; 
  Test C# function definition:    : using System . Threading . Tasks ; 
  Test control definition:        : using System . Threading . Tasks ; 
  Test C# declaration:            : using System . Threading . Tasks ; 
  Handle C# declaration:          : using System . Threading . Tasks ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Dependency { 
  handle begin scope              : public class Dependency { 
--- stack size = 3 ---
  Test end scope                  : public class Dependency { 
  class def      : public class Dependency { 
  Test preproc statement:         : public class Dependency { 
  Test namespace definition:      : public class Dependency { 
  Test class definition:          : public class Dependency { 
  Handle class definition:        : public class Dependency { 
  Test begin scope                : public int Multiply ( int a , int b ) { 
  handle begin scope              : public int Multiply ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Multiply ( int a , int b ) { 
  Test preproc statement:         : public int Multiply ( int a , int b ) { 
  Test namespace definition:      : public int Multiply ( int a , int b ) { 
  function def   : public int Multiply ( int a , int b ) { 
  Test class definition:          : public int Multiply ( int a , int b ) { 
  Test struct definition:         : public int Multiply ( int a , int b ) { 
  Test C# function definition:    : public int Multiply ( int a , int b ) { 
  default:       : return a * b ; 
  Handle C# function definition:  : public int Multiply ( int a , int b ) { 
  Test begin scope    
  Test begin scope         
--- stack size = 3 ---
  Test end scope                  : return a * b ; 
  Test preproc statement:         : return a * b ; 
  Test namespace definition:      : return a * b ; 
  Test class definition:          : return a * b ; 
  Test struct definition:         : return a * b ; 
  Test C# function definition:    : return a * b ; 
  Test control definition:        : return a * b ; 
  Test C# declaration:            : return a * b ; 
  Test C# executable:             : return a * b ; 
  Test default:                   : return a * b ; 
  Handle default:                 : return a * b ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public int Addition ( int a , int b ) { 
  handle begin scope              : public int Addition ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Addition ( int a , int b ) { 
  Test preproc statement:         : public int Addition ( int a , int b ) { 
  Test namespace definition:      : public int Addition ( int a , int b ) { 
  Test class definition:          : public int Addition ( int a , int b ) { 
  function def   : public int Addition ( int a , int b ) { 
  Test struct definition:         : public int Addition ( int a , int b ) { 
  Test C# function definition:    : public int Addition ( int a , int b ) { 
  Handle C# function definition:  : public int Addition ( int a , int b ) { 
  Test begin scope                : return a + b ; 
  executable     : return a + b ; 
  Test end scope                  : return a + b ; 
--- stack size = 3 ---
  Test preproc statement:         : return a + b ; 
  Test namespace definition:      : return a + b ; 
  Test class definition:          : return a + b ; 
  Test struct definition:         : return a + b ; 
  Test C# function definition:    : return a + b ; 
  Test control definition:        : return a + b ; 
  Test C# declaration:            : return a + b ; 
  Test C# executable:             : return a + b ; 
  Handle C# executable:           : return a + b ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public int Divide ( int a , int b ) { 
  handle begin scope              : public int Divide ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Divide ( int a , int b ) { 
  Test preproc statement:         : public int Divide ( int a , int b ) { 
  Test namespace definition:      : public int Divide ( int a , int b ) { 
  Test class definition:          : public int Divide ( int a , int b ) { 
  function def   : public int Divide ( int a , int b ) { 
  Test struct definition:         : public int Divide ( int a , int b ) { 
  Test C# function definition:    : public int Divide ( int a , int b ) { 
  Handle C# function definition:  : public int Divide ( int a , int b ) { 
  Test begin scope                : return a / b ; 
  Test end scope                  : return a / b ; 
  executable     : return a / b ; 
  Test preproc statement:         : return a / b ; 
--- stack size = 3 ---
  Test namespace definition:      : return a / b ; 
--- stack size = 2 ---
  Test class definition:          : return a / b ; 
  Test struct definition:         : return a / b ; 
--- stack size = 1 ---
  Test C# function definition:    : return a / b ; 
  Test control definition:        : return a / b ; 
  Test C# declaration:            : return a / b ; 
  Test C# executable:             : return a / b ; 
  Handle C# executable:           : return a / b ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  using declar   : using System ; 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  namespace def  : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public interface IDriver { 
  handle begin scope              : public interface IDriver { 
--- stack size = 3 ---
  Test end scope                  : public interface IDriver { 
  Test preproc statement:         : public interface IDriver { 
  interface def  : public interface IDriver { 
  Test namespace definition:      : public interface IDriver { 
  Test class definition:          : public interface IDriver { 
  Handle class definition:        : public interface IDriver { 
  Test begin scope                : void display ( ) ; 
  Test end scope                  : void display ( ) ; 
  Test preproc statement:         : void display ( ) ; 
  Test namespace definition:      : void display ( ) ; 
  Test class definition:          : void display ( ) ; 
  Test struct definition:         : void display ( ) ; 
  Test C# function definition:    : void display ( ) ; 
  Test control definition:        : void display ( ) ; 
  Test C# declaration:            : void display ( ) ; 
  Handle C# declaration:          : void display ( ) ; 
  function declar: void display ( ) ; 
  Test begin scope                : bool test ( ) ; 
  Test end scope                  : bool test ( ) ; 
  function declar: bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
--- stack size = 2 ---
  Test namespace definition:      : bool test ( ) ; 
  Test class definition:          : bool test ( ) ; 
  Test struct definition:         : bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
  Test control definition:        : bool test ( ) ; 
  Test C# declaration:            : bool test ( ) ; 
  Handle C# declaration:          : bool test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public interface ITestCode { 
  handle begin scope              : public interface ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public interface ITestCode { 
  Test preproc statement:         : public interface ITestCode { 
  interface def  : public interface ITestCode { 
  Test namespace definition:      : public interface ITestCode { 
  Test class definition:          : public interface ITestCode { 
  Handle class definition:        : public interface ITestCode { 
  Test begin scope                : bool test ( ) ; 
  Test end scope                  : bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
  Test namespace definition:      : bool test ( ) ; 
  Test class definition:          : bool test ( ) ; 
  Test struct definition:         : bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
  Test control definition:        : bool test ( ) ; 
  function declar: bool test ( ) ; 
  Test C# declaration:            : bool test ( ) ; 
--- stack size = 2 ---
  Handle C# declaration:          : bool test ( ) ; 
  Test begin scope                : } 
--- stack size = 1 ---
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  using declar   : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  namespace def  : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public interface IDriver { 
  handle begin scope              : public interface IDriver { 
--- stack size = 3 ---
  Test end scope                  : public interface IDriver { 
  interface def  : public interface IDriver { 
  Test preproc statement:         : public interface IDriver { 
  Test namespace definition:      : public interface IDriver { 
  Test class definition:          : public interface IDriver { 
  Handle class definition:        : public interface IDriver { 
  Test begin scope                : void display ( ) ; 
  Test end scope                  : void display ( ) ; 
  Test preproc statement:         : void display ( ) ; 
  Test namespace definition:      : void display ( ) ; 
  function declar: void display ( ) ; 
  Test class definition:          : void display ( ) ; 
  Test struct definition:         : void display ( ) ; 
  Test C# function definition:    : void display ( ) ; 
  Test control definition:        : void display ( ) ; 
  Test C# declaration:            : void display ( ) ; 
  Handle C# declaration:          : void display ( ) ; 
  Test begin scope                : bool test ( ) ; 
  Test end scope                  : bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
  Test namespace definition:      : bool test ( ) ; 
  Test class definition:          : bool test ( ) ; 
  Test struct definition:         : bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
  Test control definition:        : bool test ( ) ; 
  Test C# declaration:            : bool test ( ) ; 
  Handle C# declaration:          : bool test ( ) ; 
  function declar: bool test ( ) ; 
  Test begin scope                : } 
--- stack size = 2 ---
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public interface ITestCode { 
  handle begin scope              : public interface ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public interface ITestCode { 
  interface def  : public interface ITestCode { 
  Test preproc statement:         : public interface ITestCode { 
  Test namespace definition:      : public interface ITestCode { 
  Test class definition:          : public interface ITestCode { 
  Handle class definition:        : public interface ITestCode { 
  Test begin scope                : bool test ( ) ; 
  Test end scope                  : bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
  Test namespace definition:      : bool test ( ) ; 
  Test class definition:          : bool test ( ) ; 
  function declar: bool test ( ) ; 
  Test struct definition:         : bool test ( ) ; 
--- stack size = 2 ---
  Test C# function definition:    : bool test ( ) ; 
  Test control definition:        : bool test ( ) ; 
--- stack size = 1 ---
  Test C# declaration:            : bool test ( ) ; 
  Handle C# declaration:          : bool test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System ; 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public interface IDriver { 
  handle begin scope              : public interface IDriver { 
--- stack size = 3 ---
  Test end scope                  : public interface IDriver { 
  Test preproc statement:         : public interface IDriver { 
  interface def  : public interface IDriver { 
  Test namespace definition:      : public interface IDriver { 
  Test class definition:          : public interface IDriver { 
  Handle class definition:        : public interface IDriver { 
  Test begin scope                : void display ( ) ; 
  Test end scope                  : void display ( ) ; 
  Test preproc statement:         : void display ( ) ; 
  function declar: void display ( ) ; 
  Test namespace definition:      : void display ( ) ; 
  Test class definition:          : void display ( ) ; 
  Test struct definition:         : void display ( ) ; 
  Test C# function definition:    : void display ( ) ; 
  Test control definition:        : void display ( ) ; 
  Test C# declaration:            : void display ( ) ; 
  Handle C# declaration:          : void display ( ) ; 
  function declar: bool test ( ) ; 
  Test begin scope                : bool test ( ) ; 
--- stack size = 2 ---
  Test end scope                  : bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
  Test namespace definition:      : bool test ( ) ; 
  Test class definition:          : bool test ( ) ; 
  Test struct definition:         : bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
  Test control definition:        : bool test ( ) ; 
  Test C# declaration:            : bool test ( ) ; 
  Handle C# declaration:          : bool test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public interface ITestCode { 
  handle begin scope              : public interface ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public interface ITestCode { 
  Test preproc statement:         : public interface ITestCode { 
  interface def  : public interface ITestCode { 
  Test namespace definition:      : public interface ITestCode { 
  Test class definition:          : public interface ITestCode { 
  Handle class definition:        : public interface ITestCode { 
  function declar: bool test ( ) ; 
  Test begin scope                : bool test ( ) ; 
--- stack size = 2 ---
  Test end scope                  : bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
--- stack size = 1 ---
  Test namespace definition:      : bool test ( ) ; 
  Test class definition:          : bool test ( ) ; 
  Test struct definition:         : bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
  Test control definition:        : bool test ( ) ; 
  Test C# declaration:            : bool test ( ) ; 
  Handle C# declaration:          : bool test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  using declar   : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Tested : ITestCode { 
  handle begin scope              : public class Tested : ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public class Tested : ITestCode { 
  Test preproc statement:         : public class Tested : ITestCode { 
  class def      : public class Tested : ITestCode { 
  Test namespace definition:      : public class Tested : ITestCode { 
  Test class definition:          : public class Tested : ITestCode { 
  Handle class definition:        : public class Tested : ITestCode { 
  Test begin scope                : public Tested ( ) { 
  handle begin scope              : public Tested ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Tested ( ) { 
  Test preproc statement:         : public Tested ( ) { 
  Test namespace definition:      : public Tested ( ) { 
  function def   : public Tested ( ) { 
  Test class definition:          : public Tested ( ) { 
  Test struct definition:         : public Tested ( ) { 
  Test C# function definition:    : public Tested ( ) { 
  Handle C# function definition:  : public Tested ( ) { 
  Test begin scope                : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test end scope                  : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test preproc statement:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test namespace definition:      : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test class definition:          : Console . Write ( "\n    constructing instance of Test code" ) ; 
  executable     : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test struct definition:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
--- stack size = 3 ---
  Test C# function definition:    : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test control definition:        : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# declaration:            : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# executable:             : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Handle C# executable:           : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public bool test ( ) { 
  handle begin scope              : public bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public bool test ( ) { 
  Test preproc statement:         : public bool test ( ) { 
  Test namespace definition:      : public bool test ( ) { 
  Test class definition:          : public bool test ( ) { 
  function def   : public bool test ( ) { 
  Test struct definition:         : public bool test ( ) { 
  Test C# function definition:    : public bool test ( ) { 
  Handle C# function definition:  : public bool test ( ) { 
  Test begin scope                : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test end scope                  : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test class definition:          : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test struct definition:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test control definition:        : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# executable:             : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test begin scope                : Dependency tld = new Dependency ( ) ; 
  Test end scope                  : Dependency tld = new Dependency ( ) ; 
  Test preproc statement:         : Dependency tld = new Dependency ( ) ; 
  Test namespace definition:      : Dependency tld = new Dependency ( ) ; 
  Test class definition:          : Dependency tld = new Dependency ( ) ; 
  data declar    : Dependency tld = new Dependency ( ) ; 
  Test struct definition:         : Dependency tld = new Dependency ( ) ; 
  Test C# function definition:    : Dependency tld = new Dependency ( ) ; 
  Test control definition:        : Dependency tld = new Dependency ( ) ; 
  Test C# declaration:            : Dependency tld = new Dependency ( ) ; 
  executable     : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Handle C# declaration:          : Dependency tld = new Dependency ( ) ; 
  Test begin scope                : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test end scope                  : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  data declar    : int result = tld . Multiply ( 20 , 11 ) ; 
  Test class definition:          : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test struct definition:         : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test control definition:        : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test C# executable:             : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  executable     : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test begin scope                : int result = tld . Multiply ( 20 , 11 ) ; 
  Test end scope                  : int result = tld . Multiply ( 20 , 11 ) ; 
  Test preproc statement:         : int result = tld . Multiply ( 20 , 11 ) ; 
  Test namespace definition:      : int result = tld . Multiply ( 20 , 11 ) ; 
  Test class definition:          : int result = tld . Multiply ( 20 , 11 ) ; 
  Test struct definition:         : int result = tld . Multiply ( 20 , 11 ) ; 
  Test C# function definition:    : int result = tld . Multiply ( 20 , 11 ) ; 
  Test control definition:        : int result = tld . Multiply ( 20 , 11 ) ; 
  Test C# declaration:            : int result = tld . Multiply ( 20 , 11 ) ; 
  Handle C# declaration:          : int result = tld . Multiply ( 20 , 11 ) ; 
  Test begin scope                : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test end scope                  : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test preproc statement:         : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test namespace definition:      : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test class definition:          : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test struct definition:         : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test C# function definition:    : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test control definition:        : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test C# declaration:            : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test C# executable:             : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Handle C# executable:           : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test begin scope                : if ( result == 200 ) { 
  handle begin scope              : if ( result == 200 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( result == 200 ) { 
  Test preproc statement:         : if ( result == 200 ) { 
  Test namespace definition:      : if ( result == 200 ) { 
  control def    : if ( result == 200 ) { 
  Test class definition:          : if ( result == 200 ) { 
  Test struct definition:         : if ( result == 200 ) { 
  Test C# function definition:    : if ( result == 200 ) { 
  executable     : return true ; 
  Test control definition:        : if ( result == 200 ) { 
--- stack size = 4 ---
  Handle control definition:      : if ( result == 200 ) { 
  Test begin scope                : return true ; 
  Test end scope                  : return true ; 
  Test preproc statement:         : return true ; 
  Test namespace definition:      : return true ; 
  Test class definition:          : return true ; 
  Test struct definition:         : return true ; 
  Test C# function definition:    : return true ; 
  Test control definition:        : return true ; 
  Test C# declaration:            : return true ; 
  Test C# executable:             : return true ; 
  Handle C# executable:           : return true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  Test namespace definition:      : else { 
  control def    : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  executable     : return false ; 
  Test control definition:        : else { 
--- stack size = 4 ---
  Handle control definition:      : else { 
--- stack size = 3 ---
  Test begin scope                : return false ; 
--- stack size = 2 ---
  Test end scope                  : return false ; 
--- stack size = 1 ---
  Test preproc statement:         : return false ; 
  Test namespace definition:      : return false ; 
  Test class definition:          : return false ; 
  Test struct definition:         : return false ; 
  Test C# function definition:    : return false ; 
  Test control definition:        : return false ; 
  Test C# declaration:            : return false ; 
  Test C# executable:             : return false ; 
  Handle C# executable:           : return false ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  using declar   : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  namespace def  : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Tested : ITestCode { 
  handle begin scope              : public class Tested : ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public class Tested : ITestCode { 
  class def      : public class Tested : ITestCode { 
  Test preproc statement:         : public class Tested : ITestCode { 
  Test namespace definition:      : public class Tested : ITestCode { 
  Test class definition:          : public class Tested : ITestCode { 
  Handle class definition:        : public class Tested : ITestCode { 
  Test begin scope                : public Tested ( ) { 
  handle begin scope              : public Tested ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Tested ( ) { 
  Test preproc statement:         : public Tested ( ) { 
  Test namespace definition:      : public Tested ( ) { 
  function def   : public Tested ( ) { 
  Test class definition:          : public Tested ( ) { 
  Test struct definition:         : public Tested ( ) { 
  Test C# function definition:    : public Tested ( ) { 
  Handle C# function definition:  : public Tested ( ) { 
  Test begin scope                : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test end scope                  : Console . Write ( "\n    constructing instance of Test code" ) ; 
  executable     : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test preproc statement:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
--- stack size = 3 ---
  Test namespace definition:      : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test class definition:          : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test struct definition:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# function definition:    : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test control definition:        : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# declaration:            : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# executable:             : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Handle C# executable:           : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public bool test ( ) { 
  handle begin scope              : public bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public bool test ( ) { 
  Test preproc statement:         : public bool test ( ) { 
  Test namespace definition:      : public bool test ( ) { 
  function def   : public bool test ( ) { 
  Test class definition:          : public bool test ( ) { 
  Test struct definition:         : public bool test ( ) { 
  Test C# function definition:    : public bool test ( ) { 
  Handle C# function definition:  : public bool test ( ) { 
  Test begin scope                : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test end scope                  : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Production code - TestedLib" ) ; 
  data declar    : Dependency tld = new Dependency ( ) ; 
  Test class definition:          : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test struct definition:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test control definition:        : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# executable:             : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test begin scope                : Dependency tld = new Dependency ( ) ; 
  Test end scope                  : Dependency tld = new Dependency ( ) ; 
  Test preproc statement:         : Dependency tld = new Dependency ( ) ; 
  Test namespace definition:      : Dependency tld = new Dependency ( ) ; 
  Test class definition:          : Dependency tld = new Dependency ( ) ; 
  Test struct definition:         : Dependency tld = new Dependency ( ) ; 
  Test C# function definition:    : Dependency tld = new Dependency ( ) ; 
  Test control definition:        : Dependency tld = new Dependency ( ) ; 
  Test C# declaration:            : Dependency tld = new Dependency ( ) ; 
  Handle C# declaration:          : Dependency tld = new Dependency ( ) ; 
  data declar    : int result = tld . Multiply ( 20 , 11 ) ; 
  Test begin scope                : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test end scope                  : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test class definition:          : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test struct definition:         : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test control definition:        : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  executable     : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test C# executable:             : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test begin scope                : int result = tld . Multiply ( 20 , 11 ) ; 
  Test end scope                  : int result = tld . Multiply ( 20 , 11 ) ; 
  Test preproc statement:         : int result = tld . Multiply ( 20 , 11 ) ; 
  Test namespace definition:      : int result = tld . Multiply ( 20 , 11 ) ; 
  Test class definition:          : int result = tld . Multiply ( 20 , 11 ) ; 
  Test struct definition:         : int result = tld . Multiply ( 20 , 11 ) ; 
  Test C# function definition:    : int result = tld . Multiply ( 20 , 11 ) ; 
  Test control definition:        : int result = tld . Multiply ( 20 , 11 ) ; 
  Test C# declaration:            : int result = tld . Multiply ( 20 , 11 ) ; 
  Handle C# declaration:          : int result = tld . Multiply ( 20 , 11 ) ; 
  Test begin scope                : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test end scope                  : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test preproc statement:         : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test namespace definition:      : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test class definition:          : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test struct definition:         : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# function definition:    : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test control definition:        : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# declaration:            : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# executable:             : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Handle C# executable:           : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test begin scope                : if ( result == 200 ) { 
  handle begin scope              : if ( result == 200 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( result == 200 ) { 
  Test preproc statement:         : if ( result == 200 ) { 
  Test namespace definition:      : if ( result == 200 ) { 
  Test class definition:          : if ( result == 200 ) { 
  control def    : if ( result == 200 ) { 
  Test struct definition:         : if ( result == 200 ) { 
  Test C# function definition:    : if ( result == 200 ) { 
  executable     : return true ; 
  Test control definition:        : if ( result == 200 ) { 
--- stack size = 4 ---
  Handle control definition:      : if ( result == 200 ) { 
  Test begin scope                : return true ; 
  Test end scope                  : return true ; 
  Test preproc statement:         : return true ; 
  Test namespace definition:      : return true ; 
  Test class definition:          : return true ; 
  Test struct definition:         : return true ; 
  Test C# function definition:    : return true ; 
  Test control definition:        : return true ; 
  Test C# declaration:            : return true ; 
  Test C# executable:             : return true ; 
  Handle C# executable:           : return true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  Test namespace definition:      : else { 
  control def    : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  executable     : return false ; 
  Test begin scope                : return false ; 
--- stack size = 4 ---
  Test end scope                  : return false ; 
--- stack size = 3 ---
  Test preproc statement:         : return false ; 
--- stack size = 2 ---
  Test namespace definition:      : return false ; 
--- stack size = 1 ---
  Test class definition:          : return false ; 
  Test struct definition:         : return false ; 
  Test C# function definition:    : return false ; 
  Test control definition:        : return false ; 
  Test C# declaration:            : return false ; 
  Test C# executable:             : return false ; 
  using declar   : using System ; 
  Handle C# executable:           : return false ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Tested : ITestCode { 
  handle begin scope              : public class Tested : ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public class Tested : ITestCode { 
  Test preproc statement:         : public class Tested : ITestCode { 
  class def      : public class Tested : ITestCode { 
  Test namespace definition:      : public class Tested : ITestCode { 
  Test class definition:          : public class Tested : ITestCode { 
  Handle class definition:        : public class Tested : ITestCode { 
  Test begin scope                : public Tested ( ) { 
  handle begin scope              : public Tested ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Tested ( ) { 
  Test preproc statement:         : public Tested ( ) { 
  function def   : public Tested ( ) { 
  Test namespace definition:      : public Tested ( ) { 
  Test class definition:          : public Tested ( ) { 
  Test struct definition:         : public Tested ( ) { 
  Test C# function definition:    : public Tested ( ) { 
  Handle C# function definition:  : public Tested ( ) { 
  Test begin scope                : Console . Write ( "\n    constructing instance of Test code" ) ; 
  executable     : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test end scope                  : Console . Write ( "\n    constructing instance of Test code" ) ; 
--- stack size = 3 ---
  Test preproc statement:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test namespace definition:      : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test class definition:          : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test struct definition:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# function definition:    : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test control definition:        : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# declaration:            : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# executable:             : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Handle C# executable:           : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public bool test ( ) { 
  handle begin scope              : public bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public bool test ( ) { 
  Test preproc statement:         : public bool test ( ) { 
  Test namespace definition:      : public bool test ( ) { 
  function def   : public bool test ( ) { 
  Test class definition:          : public bool test ( ) { 
  Test struct definition:         : public bool test ( ) { 
  Test C# function definition:    : public bool test ( ) { 
  Handle C# function definition:  : public bool test ( ) { 
  Test begin scope                : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test end scope                  : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Production code - TestedLib" ) ; 
  data declar    : Dependency tld = new Dependency ( ) ; 
  Test class definition:          : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test struct definition:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test control definition:        : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# executable:             : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test begin scope                : Dependency tld = new Dependency ( ) ; 
  data declar    : int result = tld . Addition ( 50 , 50 ) ; 
  Test end scope                  : Dependency tld = new Dependency ( ) ; 
  Test preproc statement:         : Dependency tld = new Dependency ( ) ; 
  Test namespace definition:      : Dependency tld = new Dependency ( ) ; 
  Test class definition:          : Dependency tld = new Dependency ( ) ; 
  Test struct definition:         : Dependency tld = new Dependency ( ) ; 
  Test C# function definition:    : Dependency tld = new Dependency ( ) ; 
  Test control definition:        : Dependency tld = new Dependency ( ) ; 
  Test C# declaration:            : Dependency tld = new Dependency ( ) ; 
  Handle C# declaration:          : Dependency tld = new Dependency ( ) ; 
  Test begin scope                : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test end scope                  : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  executable     : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test class definition:          : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test struct definition:         : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test control definition:        : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test C# executable:             : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test begin scope                : int result = tld . Addition ( 50 , 50 ) ; 
  Test end scope                  : int result = tld . Addition ( 50 , 50 ) ; 
  Test preproc statement:         : int result = tld . Addition ( 50 , 50 ) ; 
  Test namespace definition:      : int result = tld . Addition ( 50 , 50 ) ; 
  Test class definition:          : int result = tld . Addition ( 50 , 50 ) ; 
  Test struct definition:         : int result = tld . Addition ( 50 , 50 ) ; 
  Test C# function definition:    : int result = tld . Addition ( 50 , 50 ) ; 
  Test control definition:        : int result = tld . Addition ( 50 , 50 ) ; 
  Test C# declaration:            : int result = tld . Addition ( 50 , 50 ) ; 
  Handle C# declaration:          : int result = tld . Addition ( 50 , 50 ) ; 
  Test begin scope                : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test end scope                  : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test preproc statement:         : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test namespace definition:      : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test class definition:          : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test struct definition:         : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# function definition:    : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test control definition:        : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# declaration:            : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# executable:             : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Handle C# executable:           : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test begin scope                : if ( result == 100 ) { 
  handle begin scope              : if ( result == 100 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( result == 100 ) { 
  Test preproc statement:         : if ( result == 100 ) { 
  Test namespace definition:      : if ( result == 100 ) { 
  control def    : if ( result == 100 ) { 
  Test class definition:          : if ( result == 100 ) { 
  Test struct definition:         : if ( result == 100 ) { 
  executable     : return true ; 
  Test C# function definition:    : if ( result == 100 ) { 
--- stack size = 4 ---
  Test control definition:        : if ( result == 100 ) { 
  Handle control definition:      : if ( result == 100 ) { 
  Test begin scope                : return true ; 
  Test end scope                  : return true ; 
  Test preproc statement:         : return true ; 
  Test namespace definition:      : return true ; 
  Test class definition:          : return true ; 
  Test struct definition:         : return true ; 
  Test C# function definition:    : return true ; 
  Test control definition:        : return true ; 
  Test C# declaration:            : return true ; 
  Test C# executable:             : return true ; 
  Handle C# executable:           : return true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  executable     : return false ; 
  Handle control definition:      : else { 
--- stack size = 4 ---
  Test begin scope                : return false ; 
--- stack size = 3 ---
  Test end scope                  : return false ; 
--- stack size = 2 ---
  Test preproc statement:         : return false ; 
--- stack size = 1 ---
  Test namespace definition:      : return false ; 
  Test class definition:          : return false ; 
  Test struct definition:         : return false ; 
  Test C# function definition:    : return false ; 
  Test control definition:        : return false ; 
  Test C# declaration:            : return false ; 
  Test C# executable:             : return false ; 
  Handle C# executable:           : return false ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  using declar   : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Tested : ITestCode { 
  handle begin scope              : public class Tested : ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public class Tested : ITestCode { 
  class def      : public class Tested : ITestCode { 
  Test preproc statement:         : public class Tested : ITestCode { 
  Test namespace definition:      : public class Tested : ITestCode { 
  Test class definition:          : public class Tested : ITestCode { 
  Handle class definition:        : public class Tested : ITestCode { 
  Test begin scope                : public Tested ( ) { 
  handle begin scope              : public Tested ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Tested ( ) { 
  Test preproc statement:         : public Tested ( ) { 
  function def   : public Tested ( ) { 
  Test namespace definition:      : public Tested ( ) { 
  Test class definition:          : public Tested ( ) { 
  Test struct definition:         : public Tested ( ) { 
  Test C# function definition:    : public Tested ( ) { 
  Handle C# function definition:  : public Tested ( ) { 
  Test begin scope                : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test end scope                  : Console . Write ( "\n    constructing instance of Test code" ) ; 
  executable     : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test preproc statement:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
--- stack size = 3 ---
  Test namespace definition:      : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test class definition:          : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test struct definition:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# function definition:    : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test control definition:        : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# declaration:            : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# executable:             : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Handle C# executable:           : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public bool test ( ) { 
  handle begin scope              : public bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public bool test ( ) { 
  Test preproc statement:         : public bool test ( ) { 
  Test namespace definition:      : public bool test ( ) { 
  function def   : public bool test ( ) { 
  Test class definition:          : public bool test ( ) { 
  Test struct definition:         : public bool test ( ) { 
  Test C# function definition:    : public bool test ( ) { 
  Handle C# function definition:  : public bool test ( ) { 
  Test begin scope                : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test end scope                  : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test class definition:          : Console . Write ( "\n    Production code - TestedLib" ) ; 
  data declar    : Dependency tld = new Dependency ( ) ; 
  Test struct definition:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test control definition:        : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# executable:             : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test begin scope                : Dependency tld = new Dependency ( ) ; 
  Test end scope                  : Dependency tld = new Dependency ( ) ; 
  Test preproc statement:         : Dependency tld = new Dependency ( ) ; 
  Test namespace definition:      : Dependency tld = new Dependency ( ) ; 
  Test class definition:          : Dependency tld = new Dependency ( ) ; 
  Test struct definition:         : Dependency tld = new Dependency ( ) ; 
  data declar    : int result = tld . Divide ( 10 , 0 ) ; 
  Test C# function definition:    : Dependency tld = new Dependency ( ) ; 
  Test control definition:        : Dependency tld = new Dependency ( ) ; 
  Test C# declaration:            : Dependency tld = new Dependency ( ) ; 
  Handle C# declaration:          : Dependency tld = new Dependency ( ) ; 
  Test begin scope                : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test end scope                  : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  executable     : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test class definition:          : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test struct definition:         : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test control definition:        : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test C# executable:             : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test begin scope                : int result = tld . Divide ( 10 , 0 ) ; 
  Test end scope                  : int result = tld . Divide ( 10 , 0 ) ; 
  Test preproc statement:         : int result = tld . Divide ( 10 , 0 ) ; 
  Test namespace definition:      : int result = tld . Divide ( 10 , 0 ) ; 
  Test class definition:          : int result = tld . Divide ( 10 , 0 ) ; 
  Test struct definition:         : int result = tld . Divide ( 10 , 0 ) ; 
  Test C# function definition:    : int result = tld . Divide ( 10 , 0 ) ; 
  Test control definition:        : int result = tld . Divide ( 10 , 0 ) ; 
  Test C# declaration:            : int result = tld . Divide ( 10 , 0 ) ; 
  Handle C# declaration:          : int result = tld . Divide ( 10 , 0 ) ; 
  Test begin scope                : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test end scope                  : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test preproc statement:         : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test namespace definition:      : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test class definition:          : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test struct definition:         : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test C# function definition:    : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test control definition:        : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test C# declaration:            : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test C# executable:             : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Handle C# executable:           : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test begin scope                : if ( result == 10 ) { 
  handle begin scope              : if ( result == 10 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( result == 10 ) { 
  Test preproc statement:         : if ( result == 10 ) { 
  Test namespace definition:      : if ( result == 10 ) { 
  Test class definition:          : if ( result == 10 ) { 
  control def    : if ( result == 10 ) { 
  Test struct definition:         : if ( result == 10 ) { 
  Test C# function definition:    : if ( result == 10 ) { 
  executable     : return true ; 
  Test control definition:        : if ( result == 10 ) { 
--- stack size = 4 ---
  Handle control definition:      : if ( result == 10 ) { 
  Test begin scope                : return true ; 
  Test end scope                  : return true ; 
  Test preproc statement:         : return true ; 
  Test namespace definition:      : return true ; 
  Test class definition:          : return true ; 
  Test struct definition:         : return true ; 
  Test C# function definition:    : return true ; 
  Test control definition:        : return true ; 
  Test C# declaration:            : return true ; 
  Test C# executable:             : return true ; 
  Handle C# executable:           : return true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  Test namespace definition:      : else { 
  control def    : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  executable     : return false ; 
  Test control definition:        : else { 
--- stack size = 4 ---
  Handle control definition:      : else { 
  Test begin scope                : return false ; 
--- stack size = 3 ---
  Test end scope                  : return false ; 
--- stack size = 2 ---
  Test preproc statement:         : return false ; 
--- stack size = 1 ---
  Test namespace definition:      : return false ; 
  Test class definition:          : return false ; 
  Test struct definition:         : return false ; 
  Test C# function definition:    : return false ; 
  Test control definition:        : return false ; 
  using declar   : using System ; 
  Test C# declaration:            : return false ; 
  Test C# executable:             : return false ; 
  Handle C# executable:           : return false ; 
  Test begin scope                : } 
  using declar   : using System . Reflection ; 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  using declar   : using System . IO ; 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Reflection ; 
  Test end scope                  : using System . Reflection ; 
  Test preproc statement:         : using System . Reflection ; 
  Test namespace definition:      : using System . Reflection ; 
  Test class definition:          : using System . Reflection ; 
  Test struct definition:         : using System . Reflection ; 
  Test C# function definition:    : using System . Reflection ; 
  Test control definition:        : using System . Reflection ; 
  Test C# declaration:            : using System . Reflection ; 
  Handle C# declaration:          : using System . Reflection ; 
  Test begin scope                : using System . IO ; 
  Test end scope                  : using System . IO ; 
  Test preproc statement:         : using System . IO ; 
  Test namespace definition:      : using System . IO ; 
  Test class definition:          : using System . IO ; 
  Test struct definition:         : using System . IO ; 
  Test C# function definition:    : using System . IO ; 
  Test control definition:        : using System . IO ; 
  Test C# declaration:            : using System . IO ; 
  Handle C# declaration:          : using System . IO ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Test : IDriver { 
  handle begin scope              : public class Test : IDriver { 
--- stack size = 3 ---
  Test end scope                  : public class Test : IDriver { 
  Test preproc statement:         : public class Test : IDriver { 
  class def      : public class Test : IDriver { 
  Test namespace definition:      : public class Test : IDriver { 
  Test class definition:          : public class Test : IDriver { 
  Handle class definition:        : public class Test : IDriver { 
  Test begin scope                : public Test ( ) { 
  handle begin scope              : public Test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Test ( ) { 
  Test preproc statement:         : public Test ( ) { 
  Test namespace definition:      : public Test ( ) { 
  function def   : public Test ( ) { 
  Test class definition:          : public Test ( ) { 
  Test struct definition:         : public Test ( ) { 
  Test C# function definition:    : public Test ( ) { 
  Handle C# function definition:  : public Test ( ) { 
  Test begin scope                : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test end scope                  : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test preproc statement:         : Console . Write ( "\n  constructing instance of Test1" ) ; 
  executable     : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test namespace definition:      : Console . Write ( "\n  constructing instance of Test1" ) ; 
--- stack size = 3 ---
  Test class definition:          : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test struct definition:         : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test C# function definition:    : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test control definition:        : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test C# declaration:            : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test C# executable:             : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Handle C# executable:           : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual void display ( ) { 
  handle begin scope              : public virtual void display ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual void display ( ) { 
  Test preproc statement:         : public virtual void display ( ) { 
  Test namespace definition:      : public virtual void display ( ) { 
  Test class definition:          : public virtual void display ( ) { 
  function def   : public virtual void display ( ) { 
  Test struct definition:         : public virtual void display ( ) { 
  Test C# function definition:    : public virtual void display ( ) { 
  Handle C# function definition:  : public virtual void display ( ) { 
  Test begin scope                : Console . Write ( "\n  Test #1:" ) ; 
  Test end scope                  : Console . Write ( "\n  Test #1:" ) ; 
  Test preproc statement:         : Console . Write ( "\n  Test #1:" ) ; 
  Test namespace definition:      : Console . Write ( "\n  Test #1:" ) ; 
  Test class definition:          : Console . Write ( "\n  Test #1:" ) ; 
  executable     : Console . Write ( "\n  Test #1:" ) ; 
  Test struct definition:         : Console . Write ( "\n  Test #1:" ) ; 
--- stack size = 3 ---
  Test C# function definition:    : Console . Write ( "\n  Test #1:" ) ; 
  Test control definition:        : Console . Write ( "\n  Test #1:" ) ; 
  Test C# declaration:            : Console . Write ( "\n  Test #1:" ) ; 
  Test C# executable:             : Console . Write ( "\n  Test #1:" ) ; 
  Handle C# executable:           : Console . Write ( "\n  Test #1:" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private ITestCode getTested ( ) { 
  handle begin scope              : private ITestCode getTested ( ) { 
--- stack size = 4 ---
  Test end scope                  : private ITestCode getTested ( ) { 
  Test preproc statement:         : private ITestCode getTested ( ) { 
  Test namespace definition:      : private ITestCode getTested ( ) { 
  Test class definition:          : private ITestCode getTested ( ) { 
  function def   : private ITestCode getTested ( ) { 
  Test struct definition:         : private ITestCode getTested ( ) { 
  Test C# function definition:    : private ITestCode getTested ( ) { 
  Handle C# function definition:  : private ITestCode getTested ( ) { 
  Test begin scope                : Tested tested = new Tested ( ) ; 
  Test end scope                  : Tested tested = new Tested ( ) ; 
  Test preproc statement:         : Tested tested = new Tested ( ) ; 
  Test namespace definition:      : Tested tested = new Tested ( ) ; 
  data declar    : Tested tested = new Tested ( ) ; 
  Test class definition:          : Tested tested = new Tested ( ) ; 
  Test struct definition:         : Tested tested = new Tested ( ) ; 
  executable     : return tested ; 
  Test C# function definition:    : Tested tested = new Tested ( ) ; 
--- stack size = 3 ---
  Test control definition:        : Tested tested = new Tested ( ) ; 
  Test C# declaration:            : Tested tested = new Tested ( ) ; 
  Handle C# declaration:          : Tested tested = new Tested ( ) ; 
  Test begin scope                : return tested ; 
  Test end scope                  : return tested ; 
  Test preproc statement:         : return tested ; 
  Test namespace definition:      : return tested ; 
  Test class definition:          : return tested ; 
  Test struct definition:         : return tested ; 
  Test C# function definition:    : return tested ; 
  Test control definition:        : return tested ; 
  Test C# declaration:            : return tested ; 
  Test C# executable:             : return tested ; 
  Handle C# executable:           : return tested ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual bool test ( ) { 
  handle begin scope              : public virtual bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual bool test ( ) { 
  Test preproc statement:         : public virtual bool test ( ) { 
  Test namespace definition:      : public virtual bool test ( ) { 
  function def   : public virtual bool test ( ) { 
  Test class definition:          : public virtual bool test ( ) { 
  Test struct definition:         : public virtual bool test ( ) { 
  Test C# function definition:    : public virtual bool test ( ) { 
  Handle C# function definition:  : public virtual bool test ( ) { 
  Test begin scope                : ITestCode tested = getTested ( ) ; 
  data declar    : ITestCode tested = getTested ( ) ; 
  Test end scope                  : ITestCode tested = getTested ( ) ; 
  Test preproc statement:         : ITestCode tested = getTested ( ) ; 
  Test namespace definition:      : ITestCode tested = getTested ( ) ; 
  Test class definition:          : ITestCode tested = getTested ( ) ; 
  Test struct definition:         : ITestCode tested = getTested ( ) ; 
  executable     : return tested . test ( ) ; 
  Test C# function definition:    : ITestCode tested = getTested ( ) ; 
--- stack size = 3 ---
  Test control definition:        : ITestCode tested = getTested ( ) ; 
--- stack size = 2 ---
  Test C# declaration:            : ITestCode tested = getTested ( ) ; 
--- stack size = 1 ---
  Handle C# declaration:          : ITestCode tested = getTested ( ) ; 
  Test begin scope                : return tested . test ( ) ; 
  Test end scope                  : return tested . test ( ) ; 
  Test preproc statement:         : return tested . test ( ) ; 
  Test namespace definition:      : return tested . test ( ) ; 
  Test class definition:          : return tested . test ( ) ; 
  using declar   : using System ; 
  Test struct definition:         : return tested . test ( ) ; 
  Test C# function definition:    : return tested . test ( ) ; 
  using declar   : using System . Reflection ; 
  Test control definition:        : return tested . test ( ) ; 
  Test C# declaration:            : return tested . test ( ) ; 
  using declar   : using System . IO ; 
  Test C# executable:             : return tested . test ( ) ; 
  Handle C# executable:           : return tested . test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Reflection ; 
  Test end scope                  : using System . Reflection ; 
  Test preproc statement:         : using System . Reflection ; 
  Test namespace definition:      : using System . Reflection ; 
  Test class definition:          : using System . Reflection ; 
  Test struct definition:         : using System . Reflection ; 
  Test C# function definition:    : using System . Reflection ; 
  Test control definition:        : using System . Reflection ; 
  Test C# declaration:            : using System . Reflection ; 
  Handle C# declaration:          : using System . Reflection ; 
  Test begin scope                : using System . IO ; 
  Test end scope                  : using System . IO ; 
  Test preproc statement:         : using System . IO ; 
  Test namespace definition:      : using System . IO ; 
  Test class definition:          : using System . IO ; 
  Test struct definition:         : using System . IO ; 
  Test C# function definition:    : using System . IO ; 
  Test control definition:        : using System . IO ; 
  Test C# declaration:            : using System . IO ; 
  Handle C# declaration:          : using System . IO ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  namespace def  : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Test : IDriver { 
  handle begin scope              : public class Test : IDriver { 
--- stack size = 3 ---
  Test end scope                  : public class Test : IDriver { 
  Test preproc statement:         : public class Test : IDriver { 
  class def      : public class Test : IDriver { 
  Test namespace definition:      : public class Test : IDriver { 
  Test class definition:          : public class Test : IDriver { 
  Handle class definition:        : public class Test : IDriver { 
  Test begin scope                : public Test ( ) { 
  handle begin scope              : public Test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Test ( ) { 
  Test preproc statement:         : public Test ( ) { 
  Test namespace definition:      : public Test ( ) { 
  function def   : public Test ( ) { 
  Test class definition:          : public Test ( ) { 
  Test struct definition:         : public Test ( ) { 
  Test C# function definition:    : public Test ( ) { 
  Handle C# function definition:  : public Test ( ) { 
  Test begin scope                : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test end scope                  : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test preproc statement:         : Console . Write ( "\n  constructing instance of Test1" ) ; 
  executable     : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test namespace definition:      : Console . Write ( "\n  constructing instance of Test1" ) ; 
--- stack size = 3 ---
  Test class definition:          : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test struct definition:         : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test C# function definition:    : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test control definition:        : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test C# declaration:            : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test C# executable:             : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Handle C# executable:           : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual void display ( ) { 
  handle begin scope              : public virtual void display ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual void display ( ) { 
  Test preproc statement:         : public virtual void display ( ) { 
  Test namespace definition:      : public virtual void display ( ) { 
  function def   : public virtual void display ( ) { 
  Test class definition:          : public virtual void display ( ) { 
  Test struct definition:         : public virtual void display ( ) { 
  Test C# function definition:    : public virtual void display ( ) { 
  Handle C# function definition:  : public virtual void display ( ) { 
  Test begin scope                : Console . Write ( "\n  Test #1:" ) ; 
  Test end scope                  : Console . Write ( "\n  Test #1:" ) ; 
  Test preproc statement:         : Console . Write ( "\n  Test #1:" ) ; 
  Test namespace definition:      : Console . Write ( "\n  Test #1:" ) ; 
  executable     : Console . Write ( "\n  Test #1:" ) ; 
  Test class definition:          : Console . Write ( "\n  Test #1:" ) ; 
--- stack size = 3 ---
  Test struct definition:         : Console . Write ( "\n  Test #1:" ) ; 
  Test C# function definition:    : Console . Write ( "\n  Test #1:" ) ; 
  Test control definition:        : Console . Write ( "\n  Test #1:" ) ; 
  Test C# declaration:            : Console . Write ( "\n  Test #1:" ) ; 
  Test C# executable:             : Console . Write ( "\n  Test #1:" ) ; 
  Handle C# executable:           : Console . Write ( "\n  Test #1:" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private ITestCode getTested ( ) { 
  handle begin scope              : private ITestCode getTested ( ) { 
--- stack size = 4 ---
  Test end scope                  : private ITestCode getTested ( ) { 
  Test preproc statement:         : private ITestCode getTested ( ) { 
  Test namespace definition:      : private ITestCode getTested ( ) { 
  function def   : private ITestCode getTested ( ) { 
  Test class definition:          : private ITestCode getTested ( ) { 
  Test struct definition:         : private ITestCode getTested ( ) { 
  Test C# function definition:    : private ITestCode getTested ( ) { 
  Handle C# function definition:  : private ITestCode getTested ( ) { 
  Test begin scope                : Tested tested = new Tested ( ) ; 
  Test end scope                  : Tested tested = new Tested ( ) ; 
  Test preproc statement:         : Tested tested = new Tested ( ) ; 
  Test namespace definition:      : Tested tested = new Tested ( ) ; 
  data declar    : Tested tested = new Tested ( ) ; 
  Test class definition:          : Tested tested = new Tested ( ) ; 
  Test struct definition:         : Tested tested = new Tested ( ) ; 
  Test C# function definition:    : Tested tested = new Tested ( ) ; 
  executable     : return tested ; 
  Test control definition:        : Tested tested = new Tested ( ) ; 
--- stack size = 3 ---
  Test C# declaration:            : Tested tested = new Tested ( ) ; 
  Handle C# declaration:          : Tested tested = new Tested ( ) ; 
  Test begin scope                : return tested ; 
  Test end scope                  : return tested ; 
  Test preproc statement:         : return tested ; 
  Test namespace definition:      : return tested ; 
  Test class definition:          : return tested ; 
  Test struct definition:         : return tested ; 
  Test C# function definition:    : return tested ; 
  Test control definition:        : return tested ; 
  Test C# declaration:            : return tested ; 
  Test C# executable:             : return tested ; 
  Handle C# executable:           : return tested ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual bool test ( ) { 
  handle begin scope              : public virtual bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual bool test ( ) { 
  Test preproc statement:         : public virtual bool test ( ) { 
  Test namespace definition:      : public virtual bool test ( ) { 
  Test class definition:          : public virtual bool test ( ) { 
  function def   : public virtual bool test ( ) { 
  Test struct definition:         : public virtual bool test ( ) { 
  Test C# function definition:    : public virtual bool test ( ) { 
  Handle C# function definition:  : public virtual bool test ( ) { 
  Test begin scope                : ITestCode tested = getTested ( ) ; 
  Test end scope                  : ITestCode tested = getTested ( ) ; 
  Test preproc statement:         : ITestCode tested = getTested ( ) ; 
  data declar    : ITestCode tested = getTested ( ) ; 
  Test namespace definition:      : ITestCode tested = getTested ( ) ; 
  Test class definition:          : ITestCode tested = getTested ( ) ; 
  Test struct definition:         : ITestCode tested = getTested ( ) ; 
  executable     : return tested . test ( ) ; 
  Test C# function definition:    : ITestCode tested = getTested ( ) ; 
--- stack size = 3 ---
  Test control definition:        : ITestCode tested = getTested ( ) ; 
--- stack size = 2 ---
  Test C# declaration:            : ITestCode tested = getTested ( ) ; 
--- stack size = 1 ---
  Handle C# declaration:          : ITestCode tested = getTested ( ) ; 
  Test begin scope                : return tested . test ( ) ; 
  Test end scope                  : return tested . test ( ) ; 
  Test preproc statement:         : return tested . test ( ) ; 
  Test namespace definition:      : return tested . test ( ) ; 
  using declar   : using System ; 
  Test class definition:          : return tested . test ( ) ; 
  Test struct definition:         : return tested . test ( ) ; 
  Test C# function definition:    : return tested . test ( ) ; 
  Test control definition:        : return tested . test ( ) ; 
  using declar   : using System . Reflection ; 
  Test C# declaration:            : return tested . test ( ) ; 
  Test C# executable:             : return tested . test ( ) ; 
  Handle C# executable:           : return tested . test ( ) ; 
  using declar   : using System . IO ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Reflection ; 
  Test end scope                  : using System . Reflection ; 
  Test preproc statement:         : using System . Reflection ; 
  Test namespace definition:      : using System . Reflection ; 
  Test class definition:          : using System . Reflection ; 
  Test struct definition:         : using System . Reflection ; 
  Test C# function definition:    : using System . Reflection ; 
  Test control definition:        : using System . Reflection ; 
  Test C# declaration:            : using System . Reflection ; 
  Handle C# declaration:          : using System . Reflection ; 
  Test begin scope                : using System . IO ; 
  Test end scope                  : using System . IO ; 
  Test preproc statement:         : using System . IO ; 
  Test namespace definition:      : using System . IO ; 
  Test class definition:          : using System . IO ; 
  Test struct definition:         : using System . IO ; 
  Test C# function definition:    : using System . IO ; 
  Test control definition:        : using System . IO ; 
  Test C# declaration:            : using System . IO ; 
  Handle C# declaration:          : using System . IO ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Test : IDriver { 
  handle begin scope              : public class Test : IDriver { 
--- stack size = 3 ---
  Test end scope                  : public class Test : IDriver { 
  Test preproc statement:         : public class Test : IDriver { 
  class def      : public class Test : IDriver { 
  Test namespace definition:      : public class Test : IDriver { 
  Test class definition:          : public class Test : IDriver { 
  Handle class definition:        : public class Test : IDriver { 
  Test begin scope                : public Test ( ) { 
  handle begin scope              : public Test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Test ( ) { 
  Test preproc statement:         : public Test ( ) { 
  function def   : public Test ( ) { 
  Test namespace definition:      : public Test ( ) { 
  Test class definition:          : public Test ( ) { 
  Test struct definition:         : public Test ( ) { 
  Test C# function definition:    : public Test ( ) { 
  Handle C# function definition:  : public Test ( ) { 
  Test begin scope                : Console . Write ( "\n  constructing instance of Test2" ) ; 
  executable     : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test end scope                  : Console . Write ( "\n  constructing instance of Test2" ) ; 
--- stack size = 3 ---
  Test preproc statement:         : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test namespace definition:      : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test class definition:          : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test struct definition:         : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test C# function definition:    : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test control definition:        : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test C# declaration:            : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test C# executable:             : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Handle C# executable:           : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual void display ( ) { 
  handle begin scope              : public virtual void display ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual void display ( ) { 
  Test preproc statement:         : public virtual void display ( ) { 
  Test namespace definition:      : public virtual void display ( ) { 
  function def   : public virtual void display ( ) { 
  Test class definition:          : public virtual void display ( ) { 
  Test struct definition:         : public virtual void display ( ) { 
  Test C# function definition:    : public virtual void display ( ) { 
  Handle C# function definition:  : public virtual void display ( ) { 
  Test begin scope                : Console . Write ( "\n  Test #2:" ) ; 
  executable     : Console . Write ( "\n  Test #2:" ) ; 
  Test end scope                  : Console . Write ( "\n  Test #2:" ) ; 
--- stack size = 3 ---
  Test preproc statement:         : Console . Write ( "\n  Test #2:" ) ; 
  Test namespace definition:      : Console . Write ( "\n  Test #2:" ) ; 
  Test class definition:          : Console . Write ( "\n  Test #2:" ) ; 
  Test struct definition:         : Console . Write ( "\n  Test #2:" ) ; 
  Test C# function definition:    : Console . Write ( "\n  Test #2:" ) ; 
  Test control definition:        : Console . Write ( "\n  Test #2:" ) ; 
  Test C# declaration:            : Console . Write ( "\n  Test #2:" ) ; 
  Test C# executable:             : Console . Write ( "\n  Test #2:" ) ; 
  Handle C# executable:           : Console . Write ( "\n  Test #2:" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private ITestCode getTested ( ) { 
  handle begin scope              : private ITestCode getTested ( ) { 
--- stack size = 4 ---
  Test end scope                  : private ITestCode getTested ( ) { 
  Test preproc statement:         : private ITestCode getTested ( ) { 
  Test namespace definition:      : private ITestCode getTested ( ) { 
  Test class definition:          : private ITestCode getTested ( ) { 
  function def   : private ITestCode getTested ( ) { 
  Test struct definition:         : private ITestCode getTested ( ) { 
  Test C# function definition:    : private ITestCode getTested ( ) { 
  Handle C# function definition:  : private ITestCode getTested ( ) { 
  Test begin scope                : Tested tested = new Tested ( ) ; 
  Test end scope                  : Tested tested = new Tested ( ) ; 
  Test preproc statement:         : Tested tested = new Tested ( ) ; 
  Test namespace definition:      : Tested tested = new Tested ( ) ; 
  data declar    : Tested tested = new Tested ( ) ; 
  Test class definition:          : Tested tested = new Tested ( ) ; 
  Test struct definition:         : Tested tested = new Tested ( ) ; 
  executable     : return tested ; 
  Test C# function definition:    : Tested tested = new Tested ( ) ; 
--- stack size = 3 ---
  Test control definition:        : Tested tested = new Tested ( ) ; 
  Test C# declaration:            : Tested tested = new Tested ( ) ; 
  Handle C# declaration:          : Tested tested = new Tested ( ) ; 
  Test begin scope                : return tested ; 
  Test end scope                  : return tested ; 
  Test preproc statement:         : return tested ; 
  Test namespace definition:      : return tested ; 
  Test class definition:          : return tested ; 
  Test struct definition:         : return tested ; 
  Test C# function definition:    : return tested ; 
  Test control definition:        : return tested ; 
  Test C# declaration:            : return tested ; 
  Test C# executable:             : return tested ; 
  Handle C# executable:           : return tested ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual bool test ( ) { 
  handle begin scope              : public virtual bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual bool test ( ) { 
  Test preproc statement:         : public virtual bool test ( ) { 
  function def   : public virtual bool test ( ) { 
  Test namespace definition:      : public virtual bool test ( ) { 
  Test class definition:          : public virtual bool test ( ) { 
  Test struct definition:         : public virtual bool test ( ) { 
  Test C# function definition:    : public virtual bool test ( ) { 
  Handle C# function definition:  : public virtual bool test ( ) { 
  Test begin scope                : ITestCode tested = getTested ( ) ; 
  data declar    : ITestCode tested = getTested ( ) ; 
  Test end scope                  : ITestCode tested = getTested ( ) ; 
  Test preproc statement:         : ITestCode tested = getTested ( ) ; 
  Test namespace definition:      : ITestCode tested = getTested ( ) ; 
  Test class definition:          : ITestCode tested = getTested ( ) ; 
  Test struct definition:         : ITestCode tested = getTested ( ) ; 
  executable     : return tested . test ( ) ; 
  Test C# function definition:    : ITestCode tested = getTested ( ) ; 
--- stack size = 3 ---
  Test control definition:        : ITestCode tested = getTested ( ) ; 
--- stack size = 2 ---
  Test C# declaration:            : ITestCode tested = getTested ( ) ; 
--- stack size = 1 ---
  Handle C# declaration:          : ITestCode tested = getTested ( ) ; 
  Test begin scope                : return tested . test ( ) ; 
  Test end scope                  : return tested . test ( ) ; 
  Test preproc statement:         : return tested . test ( ) ; 
  Test namespace definition:      : return tested . test ( ) ; 
  Test class definition:          : return tested . test ( ) ; 
  using declar   : using System ; 
  Test struct definition:         : return tested . test ( ) ; 
  Test C# function definition:    : return tested . test ( ) ; 
  Test control definition:        : return tested . test ( ) ; 
  Test C# declaration:            : return tested . test ( ) ; 
  Test C# executable:             : return tested . test ( ) ; 
  Handle C# executable:           : return tested . test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System . Reflection ; 
  Test begin scope                : using System ; 
  using declar   : using System . IO ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Reflection ; 
  Test end scope                  : using System . Reflection ; 
  Test preproc statement:         : using System . Reflection ; 
  Test namespace definition:      : using System . Reflection ; 
  Test class definition:          : using System . Reflection ; 
  Test struct definition:         : using System . Reflection ; 
  Test C# function definition:    : using System . Reflection ; 
  Test control definition:        : using System . Reflection ; 
  Test C# declaration:            : using System . Reflection ; 
  Handle C# declaration:          : using System . Reflection ; 
  Test begin scope                : using System . IO ; 
  Test end scope                  : using System . IO ; 
  Test preproc statement:         : using System . IO ; 
  Test namespace definition:      : using System . IO ; 
  Test class definition:          : using System . IO ; 
  Test struct definition:         : using System . IO ; 
  Test C# function definition:    : using System . IO ; 
  Test control definition:        : using System . IO ; 
  Test C# declaration:            : using System . IO ; 
  Handle C# declaration:          : using System . IO ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  namespace def  : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Test : IDriver { 
  handle begin scope              : public class Test : IDriver { 
--- stack size = 3 ---
  Test end scope                  : public class Test : IDriver { 
  Test preproc statement:         : public class Test : IDriver { 
  class def      : public class Test : IDriver { 
  Test namespace definition:      : public class Test : IDriver { 
  Test class definition:          : public class Test : IDriver { 
  Handle class definition:        : public class Test : IDriver { 
  Test begin scope                : public Test ( ) { 
  handle begin scope              : public Test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Test ( ) { 
  Test preproc statement:         : public Test ( ) { 
  Test namespace definition:      : public Test ( ) { 
  function def   : public Test ( ) { 
  Test class definition:          : public Test ( ) { 
  Test struct definition:         : public Test ( ) { 
  Test C# function definition:    : public Test ( ) { 
  Handle C# function definition:  : public Test ( ) { 
  Test begin scope                : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test end scope                  : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test preproc statement:         : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test namespace definition:      : Console . Write ( "\n  constructing instance of Test3" ) ; 
  executable     : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test class definition:          : Console . Write ( "\n  constructing instance of Test3" ) ; 
--- stack size = 3 ---
  Test struct definition:         : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test C# function definition:    : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test control definition:        : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test C# declaration:            : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test C# executable:             : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Handle C# executable:           : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual void display ( ) { 
  handle begin scope              : public virtual void display ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual void display ( ) { 
  Test preproc statement:         : public virtual void display ( ) { 
  Test namespace definition:      : public virtual void display ( ) { 
  function def   : public virtual void display ( ) { 
  Test class definition:          : public virtual void display ( ) { 
  Test struct definition:         : public virtual void display ( ) { 
  Test C# function definition:    : public virtual void display ( ) { 
  Handle C# function definition:  : public virtual void display ( ) { 
  Test begin scope                : Console . Write ( "\n  Test #3:" ) ; 
  Test end scope                  : Console . Write ( "\n  Test #3:" ) ; 
  executable     : Console . Write ( "\n  Test #3:" ) ; 
  Test preproc statement:         : Console . Write ( "\n  Test #3:" ) ; 
--- stack size = 3 ---
  Test namespace definition:      : Console . Write ( "\n  Test #3:" ) ; 
  Test class definition:          : Console . Write ( "\n  Test #3:" ) ; 
  Test struct definition:         : Console . Write ( "\n  Test #3:" ) ; 
  Test C# function definition:    : Console . Write ( "\n  Test #3:" ) ; 
  Test control definition:        : Console . Write ( "\n  Test #3:" ) ; 
  Test C# declaration:            : Console . Write ( "\n  Test #3:" ) ; 
  Test C# executable:             : Console . Write ( "\n  Test #3:" ) ; 
  Handle C# executable:           : Console . Write ( "\n  Test #3:" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private ITestCode getTested ( ) { 
  handle begin scope              : private ITestCode getTested ( ) { 
--- stack size = 4 ---
  Test end scope                  : private ITestCode getTested ( ) { 
  Test preproc statement:         : private ITestCode getTested ( ) { 
  function def   : private ITestCode getTested ( ) { 
  Test namespace definition:      : private ITestCode getTested ( ) { 
  Test class definition:          : private ITestCode getTested ( ) { 
  Test struct definition:         : private ITestCode getTested ( ) { 
  Test C# function definition:    : private ITestCode getTested ( ) { 
  Handle C# function definition:  : private ITestCode getTested ( ) { 
  data declar    : Tested tested = new Tested ( ) ; 
  Test begin scope                : Tested tested = new Tested ( ) ; 
  Test end scope                  : Tested tested = new Tested ( ) ; 
  executable     : return tested ; 
  Test preproc statement:         : Tested tested = new Tested ( ) ; 
--- stack size = 3 ---
  Test namespace definition:      : Tested tested = new Tested ( ) ; 
  Test class definition:          : Tested tested = new Tested ( ) ; 
  Test struct definition:         : Tested tested = new Tested ( ) ; 
  Test C# function definition:    : Tested tested = new Tested ( ) ; 
  Test control definition:        : Tested tested = new Tested ( ) ; 
  Test C# declaration:            : Tested tested = new Tested ( ) ; 
  Handle C# declaration:          : Tested tested = new Tested ( ) ; 
  Test begin scope                : return tested ; 
  Test end scope                  : return tested ; 
  Test preproc statement:         : return tested ; 
  Test namespace definition:      : return tested ; 
  Test class definition:          : return tested ; 
  Test struct definition:         : return tested ; 
  Test C# function definition:    : return tested ; 
  Test control definition:        : return tested ; 
  Test C# declaration:            : return tested ; 
  Test C# executable:             : return tested ; 
  Handle C# executable:           : return tested ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual bool test ( ) { 
  handle begin scope              : public virtual bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual bool test ( ) { 
  Test preproc statement:         : public virtual bool test ( ) { 
  Test namespace definition:      : public virtual bool test ( ) { 
  function def   : public virtual bool test ( ) { 
  Test class definition:          : public virtual bool test ( ) { 
  Test struct definition:         : public virtual bool test ( ) { 
  Test C# function definition:    : public virtual bool test ( ) { 
  Handle C# function definition:  : public virtual bool test ( ) { 
  data declar    : ITestCode tested = getTested ( ) ; 
  Test begin scope                : ITestCode tested = getTested ( ) ; 
  Test end scope                  : ITestCode tested = getTested ( ) ; 
  Test preproc statement:         : ITestCode tested = getTested ( ) ; 
  Test namespace definition:      : ITestCode tested = getTested ( ) ; 
  executable     : return tested . test ( ) ; 
  Test class definition:          : ITestCode tested = getTested ( ) ; 
--- stack size = 3 ---
  Test struct definition:         : ITestCode tested = getTested ( ) ; 
--- stack size = 2 ---
  Test C# function definition:    : ITestCode tested = getTested ( ) ; 
--- stack size = 1 ---
  Test control definition:        : ITestCode tested = getTested ( ) ; 
  Test C# declaration:            : ITestCode tested = getTested ( ) ; 
  Handle C# declaration:          : ITestCode tested = getTested ( ) ; 
  Test begin scope                : return tested . test ( ) ; 
  using declar   : using System ; 
  Test end scope                  : return tested . test ( ) ; 
  Test preproc statement:         : return tested . test ( ) ; 
  Test namespace definition:      : return tested . test ( ) ; 
  using declar   : using System . Collections . Generic ; 
  Test class definition:          : return tested . test ( ) ; 
  Test struct definition:         : return tested . test ( ) ; 
  using declar   : using System . Linq ; 
  Test C# function definition:    : return tested . test ( ) ; 
  Test control definition:        : return tested . test ( ) ; 
  using declar   : using System . Text ; 
  Test C# declaration:            : return tested . test ( ) ; 
  Test C# executable:             : return tested . test ( ) ; 
  Handle C# executable:           : return tested . test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System . Threading . Tasks ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Collections . Generic ; 
  Test end scope                  : using System . Collections . Generic ; 
  Test preproc statement:         : using System . Collections . Generic ; 
  Test namespace definition:      : using System . Collections . Generic ; 
  Test class definition:          : using System . Collections . Generic ; 
  Test struct definition:         : using System . Collections . Generic ; 
  Test C# function definition:    : using System . Collections . Generic ; 
  Test control definition:        : using System . Collections . Generic ; 
  Test C# declaration:            : using System . Collections . Generic ; 
  Handle C# declaration:          : using System . Collections . Generic ; 
  Test begin scope                : using System . Linq ; 
  Test end scope                  : using System . Linq ; 
  Test preproc statement:         : using System . Linq ; 
  Test namespace definition:      : using System . Linq ; 
  Test class definition:          : using System . Linq ; 
  Test struct definition:         : using System . Linq ; 
  Test C# function definition:    : using System . Linq ; 
  Test control definition:        : using System . Linq ; 
  Test C# declaration:            : using System . Linq ; 
  Handle C# declaration:          : using System . Linq ; 
  Test begin scope                : using System . Text ; 
  Test end scope                  : using System . Text ; 
  Test preproc statement:         : using System . Text ; 
  Test namespace definition:      : using System . Text ; 
  Test class definition:          : using System . Text ; 
  Test struct definition:         : using System . Text ; 
  Test C# function definition:    : using System . Text ; 
  Test control definition:        : using System . Text ; 
  Test C# declaration:            : using System . Text ; 
  Handle C# declaration:          : using System . Text ; 
  Test begin scope                : using System . Threading . Tasks ; 
  Test end scope                  : using System . Threading . Tasks ; 
  Test preproc statement:         : using System . Threading . Tasks ; 
  Test namespace definition:      : using System . Threading . Tasks ; 
  Test class definition:          : using System . Threading . Tasks ; 
  Test struct definition:         : using System . Threading . Tasks ; 
  Test C# function definition:    : using System . Threading . Tasks ; 
  Test control definition:        : using System . Threading . Tasks ; 
  Test C# declaration:            : using System . Threading . Tasks ; 
  Handle C# declaration:          : using System . Threading . Tasks ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Dependency { 
  handle begin scope              : public class Dependency { 
--- stack size = 3 ---
  Test end scope                  : public class Dependency { 
  Test preproc statement:         : public class Dependency { 
  class def      : public class Dependency { 
  Test namespace definition:      : public class Dependency { 
  Test class definition:          : public class Dependency { 
  Handle class definition:        : public class Dependency { 
  Test begin scope                : public int Multiply ( int a , int b ) { 
  handle begin scope              : public int Multiply ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Multiply ( int a , int b ) { 
  Test preproc statement:         : public int Multiply ( int a , int b ) { 
  Test namespace definition:      : public int Multiply ( int a , int b ) { 
  Test class definition:          : public int Multiply ( int a , int b ) { 
  Test struct definition:         : public int Multiply ( int a , int b ) { 
  function def   : public int Multiply ( int a , int b ) { 
  Test C# function definition:    : public int Multiply ( int a , int b ) { 
  Handle C# function definition:  : public int Multiply ( int a , int b ) { 
  Test begin scope                : return a * b ; 
  Test end scope                  : return a * b ; 
  Test preproc statement:         : return a * b ; 
  default:       : return a * b ; 
  Test namespace definition:      : return a * b ; 
--- stack size = 3 ---
  Test class definition:          : return a * b ; 
  Test struct definition:         : return a * b ; 
  Test C# function definition:    : return a * b ; 
  Test control definition:        : return a * b ; 
  Test C# declaration:            : return a * b ; 
  Test C# executable:             : return a * b ; 
  Test default:                   : return a * b ; 
  Handle default:                 : return a * b ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public int Addition ( int a , int b ) { 
  handle begin scope              : public int Addition ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Addition ( int a , int b ) { 
  Test preproc statement:         : public int Addition ( int a , int b ) { 
  Test namespace definition:      : public int Addition ( int a , int b ) { 
  Test class definition:          : public int Addition ( int a , int b ) { 
  function def   : public int Addition ( int a , int b ) { 
  Test struct definition:         : public int Addition ( int a , int b ) { 
  Test C# function definition:    : public int Addition ( int a , int b ) { 
  executable     : return a + b ; 
  Handle C# function definition:  : public int Addition ( int a , int b ) { 
--- stack size = 3 ---
  Test begin scope                : return a + b ; 
--- stack size = 2 ---
  Test end scope                  : return a + b ; 
--- stack size = 1 ---
  Test preproc statement:         : return a + b ; 
  Test namespace definition:      : return a + b ; 
  Test class definition:          : return a + b ; 
  Test struct definition:         : return a + b ; 
  Test C# function definition:    : return a + b ; 
  using declar   : using System ; 
  Test control definition:        : return a + b ; 
  Test C# declaration:            : return a + b ; 
  Test C# executable:             : return a + b ; 
  Handle C# executable:           : return a + b ; 
  using declar   : using System . Collections . Generic ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  using declar   : using System . Linq ; 
  Test end scope                  : } 
  using declar   : using System . Text ; 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  using declar   : using System . Threading . Tasks ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Collections . Generic ; 
  Test end scope                  : using System . Collections . Generic ; 
  Test preproc statement:         : using System . Collections . Generic ; 
  Test namespace definition:      : using System . Collections . Generic ; 
  Test class definition:          : using System . Collections . Generic ; 
  Test struct definition:         : using System . Collections . Generic ; 
  Test C# function definition:    : using System . Collections . Generic ; 
  Test control definition:        : using System . Collections . Generic ; 
  Test C# declaration:            : using System . Collections . Generic ; 
  Handle C# declaration:          : using System . Collections . Generic ; 
  Test begin scope                : using System . Linq ; 
  Test end scope                  : using System . Linq ; 
  Test preproc statement:         : using System . Linq ; 
  Test namespace definition:      : using System . Linq ; 
  Test class definition:          : using System . Linq ; 
  Test struct definition:         : using System . Linq ; 
  Test C# function definition:    : using System . Linq ; 
  Test control definition:        : using System . Linq ; 
  Test C# declaration:            : using System . Linq ; 
  Handle C# declaration:          : using System . Linq ; 
  Test begin scope                : using System . Text ; 
  Test end scope                  : using System . Text ; 
  Test preproc statement:         : using System . Text ; 
  Test namespace definition:      : using System . Text ; 
  Test class definition:          : using System . Text ; 
  Test struct definition:         : using System . Text ; 
  Test C# function definition:    : using System . Text ; 
  Test control definition:        : using System . Text ; 
  Test C# declaration:            : using System . Text ; 
  Handle C# declaration:          : using System . Text ; 
  Test begin scope                : using System . Threading . Tasks ; 
  Test end scope                  : using System . Threading . Tasks ; 
  Test preproc statement:         : using System . Threading . Tasks ; 
  Test namespace definition:      : using System . Threading . Tasks ; 
  Test class definition:          : using System . Threading . Tasks ; 
  Test struct definition:         : using System . Threading . Tasks ; 
  Test C# function definition:    : using System . Threading . Tasks ; 
  Test control definition:        : using System . Threading . Tasks ; 
  Test C# declaration:            : using System . Threading . Tasks ; 
  Handle C# declaration:          : using System . Threading . Tasks ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Dependency { 
  handle begin scope              : public class Dependency { 
--- stack size = 3 ---
  Test end scope                  : public class Dependency { 
  Test preproc statement:         : public class Dependency { 
  class def      : public class Dependency { 
  Test namespace definition:      : public class Dependency { 
  Test class definition:          : public class Dependency { 
  Handle class definition:        : public class Dependency { 
  Test begin scope                : public int Multiply ( int a , int b ) { 
  handle begin scope              : public int Multiply ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Multiply ( int a , int b ) { 
  Test preproc statement:         : public int Multiply ( int a , int b ) { 
  Test namespace definition:      : public int Multiply ( int a , int b ) { 
  function def   : public int Multiply ( int a , int b ) { 
  Test class definition:          : public int Multiply ( int a , int b ) { 
  Test struct definition:         : public int Multiply ( int a , int b ) { 
  Test C# function definition:    : public int Multiply ( int a , int b ) { 
  default:       : return a * b ; 
  Handle C# function definition:  : public int Multiply ( int a , int b ) { 
--- stack size = 3 ---
  Test begin scope                : return a * b ; 
  Test end scope                  : return a * b ; 
  Test preproc statement:         : return a * b ; 
  Test namespace definition:      : return a * b ; 
  Test class definition:          : return a * b ; 
  Test struct definition:         : return a * b ; 
  Test C# function definition:    : return a * b ; 
  Test control definition:        : return a * b ; 
  Test C# declaration:            : return a * b ; 
  Test C# executable:             : return a * b ; 
  Test default:                   : return a * b ; 
  Handle default:                 : return a * b ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public int Addition ( int a , int b ) { 
  handle begin scope              : public int Addition ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Addition ( int a , int b ) { 
  Test preproc statement:         : public int Addition ( int a , int b ) { 
  Test namespace definition:      : public int Addition ( int a , int b ) { 
  function def   : public int Addition ( int a , int b ) { 
  Test class definition:          : public int Addition ( int a , int b ) { 
  Test struct definition:         : public int Addition ( int a , int b ) { 
  Test C# function definition:    : public int Addition ( int a , int b ) { 
  executable     : return a + b ; 
  Handle C# function definition:  : public int Addition ( int a , int b ) { 
--- stack size = 3 ---
  Test begin scope                : return a + b ; 
--- stack size = 2 ---
  Test end scope                  : return a + b ; 
  Test preproc statement:         : return a + b ; 
--- stack size = 1 ---
  Test namespace definition:      : return a + b ; 
  Test class definition:          : return a + b ; 
  Test struct definition:         : return a + b ; 
  Test C# function definition:    : return a + b ; 
  Test control definition:        : return a + b ; 
  using declar   : using System ; 
  Test C# declaration:            : return a + b ; 
  Test C# executable:             : return a + b ; 
  Handle C# executable:           : return a + b ; 
  Test begin scope                : } 
  using declar   : using System . Collections . Generic ; 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  using declar   : using System . Linq ; 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  using declar   : using System . Text ; 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  using declar   : using System . Threading . Tasks ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Collections . Generic ; 
  Test end scope                  : using System . Collections . Generic ; 
  Test preproc statement:         : using System . Collections . Generic ; 
  Test namespace definition:      : using System . Collections . Generic ; 
  Test class definition:          : using System . Collections . Generic ; 
  Test struct definition:         : using System . Collections . Generic ; 
  Test C# function definition:    : using System . Collections . Generic ; 
  Test control definition:        : using System . Collections . Generic ; 
  Test C# declaration:            : using System . Collections . Generic ; 
  Handle C# declaration:          : using System . Collections . Generic ; 
  Test begin scope                : using System . Linq ; 
  Test end scope                  : using System . Linq ; 
  Test preproc statement:         : using System . Linq ; 
  Test namespace definition:      : using System . Linq ; 
  Test class definition:          : using System . Linq ; 
  Test struct definition:         : using System . Linq ; 
  Test C# function definition:    : using System . Linq ; 
  Test control definition:        : using System . Linq ; 
  Test C# declaration:            : using System . Linq ; 
  Handle C# declaration:          : using System . Linq ; 
  Test begin scope                : using System . Text ; 
  Test end scope                  : using System . Text ; 
  Test preproc statement:         : using System . Text ; 
  Test namespace definition:      : using System . Text ; 
  Test class definition:          : using System . Text ; 
  Test struct definition:         : using System . Text ; 
  Test C# function definition:    : using System . Text ; 
  Test control definition:        : using System . Text ; 
  Test C# declaration:            : using System . Text ; 
  Handle C# declaration:          : using System . Text ; 
  Test begin scope                : using System . Threading . Tasks ; 
  Test end scope                  : using System . Threading . Tasks ; 
  Test preproc statement:         : using System . Threading . Tasks ; 
  Test namespace definition:      : using System . Threading . Tasks ; 
  Test class definition:          : using System . Threading . Tasks ; 
  Test struct definition:         : using System . Threading . Tasks ; 
  Test C# function definition:    : using System . Threading . Tasks ; 
  Test control definition:        : using System . Threading . Tasks ; 
  Test C# declaration:            : using System . Threading . Tasks ; 
  Handle C# declaration:          : using System . Threading . Tasks ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Dependency { 
  handle begin scope              : public class Dependency { 
--- stack size = 3 ---
  Test end scope                  : public class Dependency { 
  class def      : public class Dependency { 
  Test preproc statement:         : public class Dependency { 
  Test namespace definition:      : public class Dependency { 
  Test class definition:          : public class Dependency { 
  Handle class definition:        : public class Dependency { 
  Test begin scope                : public int Multiply ( int a , int b ) { 
  handle begin scope              : public int Multiply ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Multiply ( int a , int b ) { 
  Test preproc statement:         : public int Multiply ( int a , int b ) { 
  Test namespace definition:      : public int Multiply ( int a , int b ) { 
  Test class definition:          : public int Multiply ( int a , int b ) { 
  function def   : public int Multiply ( int a , int b ) { 
  Test struct definition:         : public int Multiply ( int a , int b ) { 
  Test C# function definition:    : public int Multiply ( int a , int b ) { 
  Handle C# function definition:  : public int Multiply ( int a , int b ) { 
  Test begin scope                : return a * b ; 
  Test end scope                  : return a * b ; 
  Test preproc statement:         : return a * b ; 
  Test namespace definition:      : return a * b ; 
  Test class definition:          : return a * b ; 
  Test struct definition:         : return a * b ; 
  default:       : return a * b ; 
  Test C# function definition:    : return a * b ; 
--- stack size = 3 ---
  Test control definition:        : return a * b ; 
  Test C# declaration:            : return a * b ; 
  Test C# executable:             : return a * b ; 
  Test default:                   : return a * b ; 
  Handle default:                 : return a * b ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public int Addition ( int a , int b ) { 
  handle begin scope              : public int Addition ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Addition ( int a , int b ) { 
  Test preproc statement:         : public int Addition ( int a , int b ) { 
  Test namespace definition:      : public int Addition ( int a , int b ) { 
  Test class definition:          : public int Addition ( int a , int b ) { 
  Test struct definition:         : public int Addition ( int a , int b ) { 
  function def   : public int Addition ( int a , int b ) { 
  Test C# function definition:    : public int Addition ( int a , int b ) { 
  Handle C# function definition:  : public int Addition ( int a , int b ) { 
  Test begin scope                : return a + b ; 
  executable     : return a + b ; 
  Test end scope                  : return a + b ; 
--- stack size = 3 ---
  Test preproc statement:         : return a + b ; 
  Test namespace definition:      : return a + b ; 
  Test class definition:          : return a + b ; 
  Test struct definition:         : return a + b ; 
  Test C# function definition:    : return a + b ; 
  Test control definition:        : return a + b ; 
  Test C# declaration:            : return a + b ; 
  Test C# executable:             : return a + b ; 
  Handle C# executable:           : return a + b ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public int Divide ( int a , int b ) { 
  handle begin scope              : public int Divide ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Divide ( int a , int b ) { 
  Test preproc statement:         : public int Divide ( int a , int b ) { 
  Test namespace definition:      : public int Divide ( int a , int b ) { 
  function def   : public int Divide ( int a , int b ) { 
  Test class definition:          : public int Divide ( int a , int b ) { 
  Test struct definition:         : public int Divide ( int a , int b ) { 
  Test C# function definition:    : public int Divide ( int a , int b ) { 
  executable     : return a / b ; 
  Handle C# function definition:  : public int Divide ( int a , int b ) { 
--- stack size = 3 ---
  Test begin scope                : return a / b ; 
--- stack size = 2 ---
  Test end scope                  : return a / b ; 
--- stack size = 1 ---
  Test preproc statement:         : return a / b ; 
  Test namespace definition:      : return a / b ; 
  Test class definition:          : return a / b ; 
  Test struct definition:         : return a / b ; 
  Test C# function definition:    : return a / b ; 
  using declar   : using System ; 
  Test control definition:        : return a / b ; 
  Test C# declaration:            : return a / b ; 
  Test C# executable:             : return a / b ; 
  Handle C# executable:           : return a / b ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public interface IDriver { 
  handle begin scope              : public interface IDriver { 
--- stack size = 3 ---
  Test end scope                  : public interface IDriver { 
  Test preproc statement:         : public interface IDriver { 
  interface def  : public interface IDriver { 
  Test namespace definition:      : public interface IDriver { 
  Test class definition:          : public interface IDriver { 
  Handle class definition:        : public interface IDriver { 
  Test begin scope                : void display ( ) ; 
  Test end scope                  : void display ( ) ; 
  Test preproc statement:         : void display ( ) ; 
  function declar: void display ( ) ; 
  Test namespace definition:      : void display ( ) ; 
  Test class definition:          : void display ( ) ; 
  Test struct definition:         : void display ( ) ; 
  Test C# function definition:    : void display ( ) ; 
  Test control definition:        : void display ( ) ; 
  Test C# declaration:            : void display ( ) ; 
  function declar: bool test ( ) ; 
  Handle C# declaration:          : void display ( ) ; 
--- stack size = 2 ---
  Test begin scope                : bool test ( ) ; 
  Test end scope                  : bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
  Test namespace definition:      : bool test ( ) ; 
  Test class definition:          : bool test ( ) ; 
  Test struct definition:         : bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
  Test control definition:        : bool test ( ) ; 
  Test C# declaration:            : bool test ( ) ; 
  Handle C# declaration:          : bool test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public interface ITestCode { 
  handle begin scope              : public interface ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public interface ITestCode { 
  Test preproc statement:         : public interface ITestCode { 
  interface def  : public interface ITestCode { 
  Test namespace definition:      : public interface ITestCode { 
  Test class definition:          : public interface ITestCode { 
  Handle class definition:        : public interface ITestCode { 
  Test begin scope                : bool test ( ) ; 
  Test end scope                  : bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
  Test namespace definition:      : bool test ( ) ; 
  Test class definition:          : bool test ( ) ; 
  Test struct definition:         : bool test ( ) ; 
  function declar: bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
--- stack size = 2 ---
  Test control definition:        : bool test ( ) ; 
--- stack size = 1 ---
  Test C# declaration:            : bool test ( ) ; 
  Handle C# declaration:          : bool test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public interface IDriver { 
  handle begin scope              : public interface IDriver { 
--- stack size = 3 ---
  Test end scope                  : public interface IDriver { 
  Test preproc statement:         : public interface IDriver { 
  interface def  : public interface IDriver { 
  Test namespace definition:      : public interface IDriver { 
  Test class definition:          : public interface IDriver { 
  Handle class definition:        : public interface IDriver { 
  Test begin scope                : void display ( ) ; 
  Test end scope                  : void display ( ) ; 
  function declar: void display ( ) ; 
  Test preproc statement:         : void display ( ) ; 
  Test namespace definition:      : void display ( ) ; 
  Test class definition:          : void display ( ) ; 
  Test struct definition:         : void display ( ) ; 
  Test C# function definition:    : void display ( ) ; 
  Test control definition:        : void display ( ) ; 
  Test C# declaration:            : void display ( ) ; 
  Handle C# declaration:          : void display ( ) ; 
  function declar: bool test ( ) ; 
  Test begin scope                : bool test ( ) ; 
  Test end scope                  : bool test ( ) ; 
--- stack size = 2 ---
  Test preproc statement:         : bool test ( ) ; 
  Test namespace definition:      : bool test ( ) ; 
  Test class definition:          : bool test ( ) ; 
  Test struct definition:         : bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
  Test control definition:        : bool test ( ) ; 
  Test C# declaration:            : bool test ( ) ; 
  Handle C# declaration:          : bool test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public interface ITestCode { 
  handle begin scope              : public interface ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public interface ITestCode { 
  Test preproc statement:         : public interface ITestCode { 
  interface def  : public interface ITestCode { 
  Test namespace definition:      : public interface ITestCode { 
  Test class definition:          : public interface ITestCode { 
  Handle class definition:        : public interface ITestCode { 
  Test begin scope                : bool test ( ) ; 
  Test end scope                  : bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
  Test namespace definition:      : bool test ( ) ; 
  Test class definition:          : bool test ( ) ; 
  Test struct definition:         : bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
  function declar: bool test ( ) ; 
  Test control definition:        : bool test ( ) ; 
--- stack size = 2 ---
  Test C# declaration:            : bool test ( ) ; 
  Handle C# declaration:          : bool test ( ) ; 
--- stack size = 1 ---
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  using declar   : using System ; 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  namespace def  : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public interface IDriver { 
  handle begin scope              : public interface IDriver { 
--- stack size = 3 ---
  Test end scope                  : public interface IDriver { 
  Test preproc statement:         : public interface IDriver { 
  interface def  : public interface IDriver { 
  Test namespace definition:      : public interface IDriver { 
  Test class definition:          : public interface IDriver { 
  Handle class definition:        : public interface IDriver { 
  Test begin scope                : void display ( ) ; 
  Test end scope                  : void display ( ) ; 
  Test preproc statement:         : void display ( ) ; 
  Test namespace definition:      : void display ( ) ; 
  function declar: void display ( ) ; 
  Test class definition:          : void display ( ) ; 
  Test struct definition:         : void display ( ) ; 
  Test C# function definition:    : void display ( ) ; 
  Test control definition:        : void display ( ) ; 
  Test C# declaration:            : void display ( ) ; 
  Handle C# declaration:          : void display ( ) ; 
  Test begin scope                : bool test ( ) ; 
  Test end scope                  : bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
  Test namespace definition:      : bool test ( ) ; 
  function declar: bool test ( ) ; 
  Test class definition:          : bool test ( ) ; 
--- stack size = 2 ---
  Test struct definition:         : bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
  Test control definition:        : bool test ( ) ; 
  Test C# declaration:            : bool test ( ) ; 
  Handle C# declaration:          : bool test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public interface ITestCode { 
  handle begin scope              : public interface ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public interface ITestCode { 
  Test preproc statement:         : public interface ITestCode { 
  interface def  : public interface ITestCode { 
  Test namespace definition:      : public interface ITestCode { 
  Test class definition:          : public interface ITestCode { 
  Handle class definition:        : public interface ITestCode { 
  Test begin scope                : bool test ( ) ; 
  Test end scope                  : bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
  function declar: bool test ( ) ; 
  Test namespace definition:      : bool test ( ) ; 
--- stack size = 2 ---
  Test class definition:          : bool test ( ) ; 
--- stack size = 1 ---
  Test struct definition:         : bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
  Test control definition:        : bool test ( ) ; 
  Test C# declaration:            : bool test ( ) ; 
  using declar   : using System ; 
  Handle C# declaration:          : bool test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Tested : ITestCode { 
  handle begin scope              : public class Tested : ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public class Tested : ITestCode { 
  class def      : public class Tested : ITestCode { 
  Test preproc statement:         : public class Tested : ITestCode { 
  Test namespace definition:      : public class Tested : ITestCode { 
  Test class definition:          : public class Tested : ITestCode { 
  Handle class definition:        : public class Tested : ITestCode { 
  Test begin scope                : public Tested ( ) { 
  handle begin scope              : public Tested ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Tested ( ) { 
  Test preproc statement:         : public Tested ( ) { 
  Test namespace definition:      : public Tested ( ) { 
  function def   : public Tested ( ) { 
  Test class definition:          : public Tested ( ) { 
  Test struct definition:         : public Tested ( ) { 
  Test C# function definition:    : public Tested ( ) { 
  Handle C# function definition:  : public Tested ( ) { 
  Test begin scope                : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test end scope                  : Console . Write ( "\n    constructing instance of Test code" ) ; 
  executable     : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test preproc statement:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
--- stack size = 3 ---
  Test namespace definition:      : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test class definition:          : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test struct definition:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# function definition:    : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test control definition:        : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# declaration:            : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# executable:             : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Handle C# executable:           : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public bool test ( ) { 
  handle begin scope              : public bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public bool test ( ) { 
  Test preproc statement:         : public bool test ( ) { 
  Test namespace definition:      : public bool test ( ) { 
  function def   : public bool test ( ) { 
  Test class definition:          : public bool test ( ) { 
  Test struct definition:         : public bool test ( ) { 
  Test C# function definition:    : public bool test ( ) { 
  Handle C# function definition:  : public bool test ( ) { 
  Test begin scope                : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test end scope                  : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test class definition:          : Console . Write ( "\n    Production code - TestedLib" ) ; 
  data declar    : Dependency tld = new Dependency ( ) ; 
  Test struct definition:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test control definition:        : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test C# executable:             : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test begin scope                : Dependency tld = new Dependency ( ) ; 
  Test end scope                  : Dependency tld = new Dependency ( ) ; 
  Test preproc statement:         : Dependency tld = new Dependency ( ) ; 
  data declar    : int result = tld . Multiply ( 20 , 11 ) ; 
  Test namespace definition:      : Dependency tld = new Dependency ( ) ; 
  Test class definition:          : Dependency tld = new Dependency ( ) ; 
  Test struct definition:         : Dependency tld = new Dependency ( ) ; 
  Test C# function definition:    : Dependency tld = new Dependency ( ) ; 
  Test control definition:        : Dependency tld = new Dependency ( ) ; 
  Test C# declaration:            : Dependency tld = new Dependency ( ) ; 
  Handle C# declaration:          : Dependency tld = new Dependency ( ) ; 
  Test begin scope                : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test end scope                  : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  executable     : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test class definition:          : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test struct definition:         : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test control definition:        : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test C# executable:             : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test begin scope                : int result = tld . Multiply ( 20 , 11 ) ; 
  Test end scope                  : int result = tld . Multiply ( 20 , 11 ) ; 
  Test preproc statement:         : int result = tld . Multiply ( 20 , 11 ) ; 
  Test namespace definition:      : int result = tld . Multiply ( 20 , 11 ) ; 
  Test class definition:          : int result = tld . Multiply ( 20 , 11 ) ; 
  Test struct definition:         : int result = tld . Multiply ( 20 , 11 ) ; 
  Test C# function definition:    : int result = tld . Multiply ( 20 , 11 ) ; 
  Test control definition:        : int result = tld . Multiply ( 20 , 11 ) ; 
  Test C# declaration:            : int result = tld . Multiply ( 20 , 11 ) ; 
  Handle C# declaration:          : int result = tld . Multiply ( 20 , 11 ) ; 
  Test begin scope                : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test end scope                  : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test preproc statement:         : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test namespace definition:      : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test class definition:          : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test struct definition:         : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test C# function definition:    : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test control definition:        : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test C# declaration:            : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test C# executable:             : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Handle C# executable:           : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test begin scope                : if ( result == 200 ) { 
  handle begin scope              : if ( result == 200 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( result == 200 ) { 
  Test preproc statement:         : if ( result == 200 ) { 
  Test namespace definition:      : if ( result == 200 ) { 
  Test class definition:          : if ( result == 200 ) { 
  control def    : if ( result == 200 ) { 
  Test struct definition:         : if ( result == 200 ) { 
  Test C# function definition:    : if ( result == 200 ) { 
  Test control definition:        : if ( result == 200 ) { 
  executable     : return true ; 
  Handle control definition:      : if ( result == 200 ) { 
--- stack size = 4 ---
  Test begin scope                : return true ; 
  Test end scope                  : return true ; 
  Test preproc statement:         : return true ; 
  Test namespace definition:      : return true ; 
  Test class definition:          : return true ; 
  Test struct definition:         : return true ; 
  Test C# function definition:    : return true ; 
  Test control definition:        : return true ; 
  Test C# declaration:            : return true ; 
  Test C# executable:             : return true ; 
  Handle C# executable:           : return true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  executable     : return false ; 
  Test C# function definition:    : else { 
--- stack size = 4 ---
  Test control definition:        : else { 
  Handle control definition:      : else { 
--- stack size = 3 ---
  Test begin scope                : return false ; 
--- stack size = 2 ---
  Test end scope                  : return false ; 
--- stack size = 1 ---
  Test preproc statement:         : return false ; 
  Test namespace definition:      : return false ; 
  Test class definition:          : return false ; 
  Test struct definition:         : return false ; 
  Test C# function definition:    : return false ; 
  Test control definition:        : return false ; 
  using declar   : using System ; 
  Test C# declaration:            : return false ; 
  Test C# executable:             : return false ; 
  Handle C# executable:           : return false ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Tested : ITestCode { 
  handle begin scope              : public class Tested : ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public class Tested : ITestCode { 
  class def      : public class Tested : ITestCode { 
  Test preproc statement:         : public class Tested : ITestCode { 
  Test namespace definition:      : public class Tested : ITestCode { 
  Test class definition:          : public class Tested : ITestCode { 
  Handle class definition:        : public class Tested : ITestCode { 
  Test begin scope                : public Tested ( ) { 
  handle begin scope              : public Tested ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Tested ( ) { 
  Test preproc statement:         : public Tested ( ) { 
  Test namespace definition:      : public Tested ( ) { 
  function def   : public Tested ( ) { 
  Test class definition:          : public Tested ( ) { 
  Test struct definition:         : public Tested ( ) { 
  Test C# function definition:    : public Tested ( ) { 
  Handle C# function definition:  : public Tested ( ) { 
  Test begin scope                : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test end scope                  : Console . Write ( "\n    constructing instance of Test code" ) ; 
  executable     : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test preproc statement:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
--- stack size = 3 ---
  Test namespace definition:      : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test class definition:          : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test struct definition:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# function definition:    : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test control definition:        : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# declaration:            : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# executable:             : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Handle C# executable:           : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public bool test ( ) { 
  handle begin scope              : public bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public bool test ( ) { 
  Test preproc statement:         : public bool test ( ) { 
  Test namespace definition:      : public bool test ( ) { 
  function def   : public bool test ( ) { 
  Test class definition:          : public bool test ( ) { 
  Test struct definition:         : public bool test ( ) { 
  Test C# function definition:    : public bool test ( ) { 
  Handle C# function definition:  : public bool test ( ) { 
  Test begin scope                : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test end scope                  : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Production code - TestedLib" ) ; 
  data declar    : Dependency tld = new Dependency ( ) ; 
  Test class definition:          : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test struct definition:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test control definition:        : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# executable:             : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test begin scope                : Dependency tld = new Dependency ( ) ; 
  data declar    : int result = tld . Multiply ( 20 , 11 ) ; 
  Test end scope                  : Dependency tld = new Dependency ( ) ; 
  Test preproc statement:         : Dependency tld = new Dependency ( ) ; 
  Test namespace definition:      : Dependency tld = new Dependency ( ) ; 
  Test class definition:          : Dependency tld = new Dependency ( ) ; 
  Test struct definition:         : Dependency tld = new Dependency ( ) ; 
  Test C# function definition:    : Dependency tld = new Dependency ( ) ; 
  Test control definition:        : Dependency tld = new Dependency ( ) ; 
  Test C# declaration:            : Dependency tld = new Dependency ( ) ; 
  Handle C# declaration:          : Dependency tld = new Dependency ( ) ; 
  Test begin scope                : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test end scope                  : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test class definition:          : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  executable     : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test struct definition:         : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test control definition:        : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test C# executable:             : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test begin scope                : int result = tld . Multiply ( 20 , 11 ) ; 
  Test end scope                  : int result = tld . Multiply ( 20 , 11 ) ; 
  Test preproc statement:         : int result = tld . Multiply ( 20 , 11 ) ; 
  Test namespace definition:      : int result = tld . Multiply ( 20 , 11 ) ; 
  Test class definition:          : int result = tld . Multiply ( 20 , 11 ) ; 
  Test struct definition:         : int result = tld . Multiply ( 20 , 11 ) ; 
  Test C# function definition:    : int result = tld . Multiply ( 20 , 11 ) ; 
  Test control definition:        : int result = tld . Multiply ( 20 , 11 ) ; 
  Test C# declaration:            : int result = tld . Multiply ( 20 , 11 ) ; 
  Handle C# declaration:          : int result = tld . Multiply ( 20 , 11 ) ; 
  Test begin scope                : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test end scope                  : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test preproc statement:         : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test namespace definition:      : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test class definition:          : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test struct definition:         : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# function definition:    : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test control definition:        : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# declaration:            : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# executable:             : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Handle C# executable:           : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test begin scope                : if ( result == 200 ) { 
  handle begin scope              : if ( result == 200 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( result == 200 ) { 
  Test preproc statement:         : if ( result == 200 ) { 
  Test namespace definition:      : if ( result == 200 ) { 
  control def    : if ( result == 200 ) { 
  Test class definition:          : if ( result == 200 ) { 
  Test struct definition:         : if ( result == 200 ) { 
  executable     : return true ; 
  Test C# function definition:    : if ( result == 200 ) { 
--- stack size = 4 ---
  Test control definition:        : if ( result == 200 ) { 
  Handle control definition:      : if ( result == 200 ) { 
  Test begin scope                : return true ; 
  Test end scope                  : return true ; 
  Test preproc statement:         : return true ; 
  Test namespace definition:      : return true ; 
  Test class definition:          : return true ; 
  Test struct definition:         : return true ; 
  Test C# function definition:    : return true ; 
  Test control definition:        : return true ; 
  Test C# declaration:            : return true ; 
  Test C# executable:             : return true ; 
  Handle C# executable:           : return true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  executable     : return false ; 
  Test class definition:          : else { 
--- stack size = 4 ---
  Test struct definition:         : else { 
--- stack size = 3 ---
  Test C# function definition:    : else { 
--- stack size = 2 ---
  Test control definition:        : else { 
--- stack size = 1 ---
  Handle control definition:      : else { 
  Test begin scope                : return false ; 
  Test end scope                  : return false ; 
  Test preproc statement:         : return false ; 
  using declar   : using System ; 
  Test namespace definition:      : return false ; 
  Test class definition:          : return false ; 
  Test struct definition:         : return false ; 
  Test C# function definition:    : return false ; 
  Test control definition:        : return false ; 
  Test C# declaration:            : return false ; 
  Test C# executable:             : return false ; 
  Handle C# executable:           : return false ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Tested : ITestCode { 
  handle begin scope              : public class Tested : ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public class Tested : ITestCode { 
  Test preproc statement:         : public class Tested : ITestCode { 
  class def      : public class Tested : ITestCode { 
  Test namespace definition:      : public class Tested : ITestCode { 
  Test class definition:          : public class Tested : ITestCode { 
  Handle class definition:        : public class Tested : ITestCode { 
  Test begin scope                : public Tested ( ) { 
  handle begin scope              : public Tested ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Tested ( ) { 
  Test preproc statement:         : public Tested ( ) { 
  Test namespace definition:      : public Tested ( ) { 
  Test class definition:          : public Tested ( ) { 
  function def   : public Tested ( ) { 
  Test struct definition:         : public Tested ( ) { 
  Test C# function definition:    : public Tested ( ) { 
  Handle C# function definition:  : public Tested ( ) { 
  Test begin scope                : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test end scope                  : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test preproc statement:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test namespace definition:      : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test class definition:          : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test struct definition:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# function definition:    : Console . Write ( "\n    constructing instance of Test code" ) ; 
  executable     : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test control definition:        : Console . Write ( "\n    constructing instance of Test code" ) ; 
--- stack size = 3 ---
  Test C# declaration:            : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# executable:             : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Handle C# executable:           : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public bool test ( ) { 
  handle begin scope              : public bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public bool test ( ) { 
  Test preproc statement:         : public bool test ( ) { 
  Test namespace definition:      : public bool test ( ) { 
  function def   : public bool test ( ) { 
  Test class definition:          : public bool test ( ) { 
  Test struct definition:         : public bool test ( ) { 
  Test C# function definition:    : public bool test ( ) { 
  Handle C# function definition:  : public bool test ( ) { 
  Test begin scope                : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test end scope                  : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test class definition:          : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test struct definition:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Production code - TestedLib" ) ; 
  data declar    : Dependency tld = new Dependency ( ) ; 
  Test control definition:        : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# executable:             : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test begin scope                : Dependency tld = new Dependency ( ) ; 
  Test end scope                  : Dependency tld = new Dependency ( ) ; 
  Test preproc statement:         : Dependency tld = new Dependency ( ) ; 
  Test namespace definition:      : Dependency tld = new Dependency ( ) ; 
  data declar    : int result = tld . Addition ( 50 , 50 ) ; 
  Test class definition:          : Dependency tld = new Dependency ( ) ; 
  Test struct definition:         : Dependency tld = new Dependency ( ) ; 
  Test C# function definition:    : Dependency tld = new Dependency ( ) ; 
  Test control definition:        : Dependency tld = new Dependency ( ) ; 
  Test C# declaration:            : Dependency tld = new Dependency ( ) ; 
  Handle C# declaration:          : Dependency tld = new Dependency ( ) ; 
  Test begin scope                : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test end scope                  : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test class definition:          : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  executable     : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test struct definition:         : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test control definition:        : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test C# executable:             : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test begin scope                : int result = tld . Addition ( 50 , 50 ) ; 
  Test end scope                  : int result = tld . Addition ( 50 , 50 ) ; 
  Test preproc statement:         : int result = tld . Addition ( 50 , 50 ) ; 
  Test namespace definition:      : int result = tld . Addition ( 50 , 50 ) ; 
  Test class definition:          : int result = tld . Addition ( 50 , 50 ) ; 
  Test struct definition:         : int result = tld . Addition ( 50 , 50 ) ; 
  Test C# function definition:    : int result = tld . Addition ( 50 , 50 ) ; 
  Test control definition:        : int result = tld . Addition ( 50 , 50 ) ; 
  Test C# declaration:            : int result = tld . Addition ( 50 , 50 ) ; 
  Handle C# declaration:          : int result = tld . Addition ( 50 , 50 ) ; 
  Test begin scope                : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test end scope                  : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test preproc statement:         : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test namespace definition:      : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test class definition:          : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test struct definition:         : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# function definition:    : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test control definition:        : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# declaration:            : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# executable:             : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Handle C# executable:           : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test begin scope                : if ( result == 100 ) { 
  handle begin scope              : if ( result == 100 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( result == 100 ) { 
  Test preproc statement:         : if ( result == 100 ) { 
  Test namespace definition:      : if ( result == 100 ) { 
  Test class definition:          : if ( result == 100 ) { 
  control def    : if ( result == 100 ) { 
  Test struct definition:         : if ( result == 100 ) { 
  Test C# function definition:    : if ( result == 100 ) { 
  executable     : return true ; 
  Test control definition:        : if ( result == 100 ) { 
--- stack size = 4 ---
  Handle control definition:      : if ( result == 100 ) { 
  Test begin scope                : return true ; 
  Test end scope                  : return true ; 
  Test preproc statement:         : return true ; 
  Test namespace definition:      : return true ; 
  Test class definition:          : return true ; 
  Test struct definition:         : return true ; 
  Test C# function definition:    : return true ; 
  Test control definition:        : return true ; 
  Test C# declaration:            : return true ; 
  Test C# executable:             : return true ; 
  Handle C# executable:           : return true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  control def    : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : return false ; 
  Test end scope                  : return false ; 
  Test preproc statement:         : return false ; 
  Test namespace definition:      : return false ; 
  executable     : return false ; 
  Test class definition:          : return false ; 
--- stack size = 4 ---
  Test struct definition:         : return false ; 
  Test C# function definition:    : return false ; 
--- stack size = 3 ---
  Test control definition:        : return false ; 
  Test C# declaration:            : return false ; 
--- stack size = 2 ---
  Test C# executable:             : return false ; 
--- stack size = 1 ---
  Handle C# executable:           : return false ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  using declar   : using System ; 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  namespace def  : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Tested : ITestCode { 
  handle begin scope              : public class Tested : ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public class Tested : ITestCode { 
  Test preproc statement:         : public class Tested : ITestCode { 
  class def      : public class Tested : ITestCode { 
  Test namespace definition:      : public class Tested : ITestCode { 
  Test class definition:          : public class Tested : ITestCode { 
  Handle class definition:        : public class Tested : ITestCode { 
  Test begin scope                : public Tested ( ) { 
  handle begin scope              : public Tested ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Tested ( ) { 
  Test preproc statement:         : public Tested ( ) { 
  Test namespace definition:      : public Tested ( ) { 
  Test class definition:          : public Tested ( ) { 
  function def   : public Tested ( ) { 
  Test struct definition:         : public Tested ( ) { 
  Test C# function definition:    : public Tested ( ) { 
  Handle C# function definition:  : public Tested ( ) { 
  executable     : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test begin scope                : Console . Write ( "\n    constructing instance of Test code" ) ; 
--- stack size = 3 ---
  Test end scope                  : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test preproc statement:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test namespace definition:      : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test class definition:          : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test struct definition:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# function definition:    : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test control definition:        : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# declaration:            : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# executable:             : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Handle C# executable:           : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public bool test ( ) { 
  handle begin scope              : public bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public bool test ( ) { 
  Test preproc statement:         : public bool test ( ) { 
  function def   : public bool test ( ) { 
  Test namespace definition:      : public bool test ( ) { 
  executable     : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test class definition:          : public bool test ( ) { 
  data declar    : Dependency tld = new Dependency ( ) ; 
  Test struct definition:         : public bool test ( ) { 
  Test C# function definition:    : public bool test ( ) { 
  Handle C# function definition:  : public bool test ( ) { 
  Test begin scope                : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test end scope                  : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Production code - TestedLib" ) ; 
  data declar    : int result = tld . Divide ( 10 , 0 ) ; 
  Test class definition:          : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test struct definition:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test control definition:        : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# executable:             : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test begin scope                : Dependency tld = new Dependency ( ) ; 
  Test end scope                  : Dependency tld = new Dependency ( ) ; 
  Test preproc statement:         : Dependency tld = new Dependency ( ) ; 
  Test namespace definition:      : Dependency tld = new Dependency ( ) ; 
  Test class definition:          : Dependency tld = new Dependency ( ) ; 
  Test struct definition:         : Dependency tld = new Dependency ( ) ; 
  Test C# function definition:    : Dependency tld = new Dependency ( ) ; 
  Test control definition:        : Dependency tld = new Dependency ( ) ; 
  Test C# declaration:            : Dependency tld = new Dependency ( ) ; 
  Handle C# declaration:          : Dependency tld = new Dependency ( ) ; 
  Test begin scope                : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test end scope                  : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test class definition:          : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test struct definition:         : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test control definition:        : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test C# executable:             : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test begin scope                : int result = tld . Divide ( 10 , 0 ) ; 
  Test end scope                  : int result = tld . Divide ( 10 , 0 ) ; 
  Test preproc statement:         : int result = tld . Divide ( 10 , 0 ) ; 
  Test namespace definition:      : int result = tld . Divide ( 10 , 0 ) ; 
  Test class definition:          : int result = tld . Divide ( 10 , 0 ) ; 
  Test struct definition:         : int result = tld . Divide ( 10 , 0 ) ; 
  Test C# function definition:    : int result = tld . Divide ( 10 , 0 ) ; 
  Test control definition:        : int result = tld . Divide ( 10 , 0 ) ; 
  Test C# declaration:            : int result = tld . Divide ( 10 , 0 ) ; 
  Handle C# declaration:          : int result = tld . Divide ( 10 , 0 ) ; 
  Test begin scope                : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test end scope                  : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test preproc statement:         : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test namespace definition:      : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test class definition:          : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test struct definition:         : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test C# function definition:    : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test control definition:        : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test C# declaration:            : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test C# executable:             : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Handle C# executable:           : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test begin scope                : if ( result == 10 ) { 
  handle begin scope              : if ( result == 10 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( result == 10 ) { 
  Test preproc statement:         : if ( result == 10 ) { 
  Test namespace definition:      : if ( result == 10 ) { 
  Test class definition:          : if ( result == 10 ) { 
  control def    : if ( result == 10 ) { 
  Test struct definition:         : if ( result == 10 ) { 
  Test C# function definition:    : if ( result == 10 ) { 
  Test control definition:        : if ( result == 10 ) { 
  executable     : return true ; 
  Handle control definition:      : if ( result == 10 ) { 
--- stack size = 4 ---
  Test begin scope                : return true ; 
  Test end scope                  : return true ; 
  Test preproc statement:         : return true ; 
  Test namespace definition:      : return true ; 
  Test class definition:          : return true ; 
  Test struct definition:         : return true ; 
  Test C# function definition:    : return true ; 
  Test control definition:        : return true ; 
  Test C# declaration:            : return true ; 
  Test C# executable:             : return true ; 
  Handle C# executable:           : return true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  Test namespace definition:      : else { 
  control def    : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  executable     : return false ; 
  Handle control definition:      : else { 
--- stack size = 4 ---
  Test begin scope                : return false ; 
  Test end scope                  : return false ; 
--- stack size = 3 ---
  Test preproc statement:         : return false ; 
--- stack size = 2 ---
  Test namespace definition:      : return false ; 
--- stack size = 1 ---
  Test class definition:          : return false ; 
  Test struct definition:         : return false ; 
  Test C# function definition:    : return false ; 
  Test control definition:        : return false ; 
  using declar   : using System ; 
  Test C# declaration:            : return false ; 
  Test C# executable:             : return false ; 
  Handle C# executable:           : return false ; 
  using declar   : using System . Reflection ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System . IO ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Reflection ; 
  Test end scope                  : using System . Reflection ; 
  Test preproc statement:         : using System . Reflection ; 
  Test namespace definition:      : using System . Reflection ; 
  Test class definition:          : using System . Reflection ; 
  Test struct definition:         : using System . Reflection ; 
  Test C# function definition:    : using System . Reflection ; 
  Test control definition:        : using System . Reflection ; 
  Test C# declaration:            : using System . Reflection ; 
  Handle C# declaration:          : using System . Reflection ; 
  Test begin scope                : using System . IO ; 
  Test end scope                  : using System . IO ; 
  Test preproc statement:         : using System . IO ; 
  Test namespace definition:      : using System . IO ; 
  Test class definition:          : using System . IO ; 
  Test struct definition:         : using System . IO ; 
  Test C# function definition:    : using System . IO ; 
  Test control definition:        : using System . IO ; 
  Test C# declaration:            : using System . IO ; 
  Handle C# declaration:          : using System . IO ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Test : IDriver { 
  handle begin scope              : public class Test : IDriver { 
--- stack size = 3 ---
  Test end scope                  : public class Test : IDriver { 
  Test preproc statement:         : public class Test : IDriver { 
  class def      : public class Test : IDriver { 
  Test namespace definition:      : public class Test : IDriver { 
  Test class definition:          : public class Test : IDriver { 
  Handle class definition:        : public class Test : IDriver { 
  Test begin scope                : public Test ( ) { 
  handle begin scope              : public Test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Test ( ) { 
  Test preproc statement:         : public Test ( ) { 
  Test namespace definition:      : public Test ( ) { 
  function def   : public Test ( ) { 
  Test class definition:          : public Test ( ) { 
  Test struct definition:         : public Test ( ) { 
  Test C# function definition:    : public Test ( ) { 
  Handle C# function definition:  : public Test ( ) { 
  Test begin scope                : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test end scope                  : Console . Write ( "\n  constructing instance of Test1" ) ; 
  executable     : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test preproc statement:         : Console . Write ( "\n  constructing instance of Test1" ) ; 
--- stack size = 3 ---
  Test namespace definition:      : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test class definition:          : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test struct definition:         : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test C# function definition:    : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test control definition:        : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test C# declaration:            : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test C# executable:             : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Handle C# executable:           : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual void display ( ) { 
  handle begin scope              : public virtual void display ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual void display ( ) { 
  Test preproc statement:         : public virtual void display ( ) { 
  function def   : public virtual void display ( ) { 
  Test namespace definition:      : public virtual void display ( ) { 
  Test class definition:          : public virtual void display ( ) { 
  Test struct definition:         : public virtual void display ( ) { 
  Test C# function definition:    : public virtual void display ( ) { 
  Handle C# function definition:  : public virtual void display ( ) { 
  Test begin scope                : Console . Write ( "\n  Test #1:" ) ; 
  executable     : Console . Write ( "\n  Test #1:" ) ; 
  Test end scope                  : Console . Write ( "\n  Test #1:" ) ; 
--- stack size = 3 ---
  Test preproc statement:         : Console . Write ( "\n  Test #1:" ) ; 
  Test namespace definition:      : Console . Write ( "\n  Test #1:" ) ; 
  Test class definition:          : Console . Write ( "\n  Test #1:" ) ; 
  Test struct definition:         : Console . Write ( "\n  Test #1:" ) ; 
  Test C# function definition:    : Console . Write ( "\n  Test #1:" ) ; 
  Test control definition:        : Console . Write ( "\n  Test #1:" ) ; 
  Test C# declaration:            : Console . Write ( "\n  Test #1:" ) ; 
  Test C# executable:             : Console . Write ( "\n  Test #1:" ) ; 
  Handle C# executable:           : Console . Write ( "\n  Test #1:" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private ITestCode getTested ( ) { 
  handle begin scope              : private ITestCode getTested ( ) { 
--- stack size = 4 ---
  Test end scope                  : private ITestCode getTested ( ) { 
  Test preproc statement:         : private ITestCode getTested ( ) { 
  Test namespace definition:      : private ITestCode getTested ( ) { 
  function def   : private ITestCode getTested ( ) { 
  Test class definition:          : private ITestCode getTested ( ) { 
  Test struct definition:         : private ITestCode getTested ( ) { 
  Test C# function definition:    : private ITestCode getTested ( ) { 
  Handle C# function definition:  : private ITestCode getTested ( ) { 
  Test begin scope                : Tested tested = new Tested ( ) ; 
  data declar    : Tested tested = new Tested ( ) ; 
  Test end scope                  : Tested tested = new Tested ( ) ; 
  Test preproc statement:         : Tested tested = new Tested ( ) ; 
  executable     : return tested ; 
  Test namespace definition:      : Tested tested = new Tested ( ) ; 
--- stack size = 3 ---
  Test class definition:          : Tested tested = new Tested ( ) ; 
  Test struct definition:         : Tested tested = new Tested ( ) ; 
  Test C# function definition:    : Tested tested = new Tested ( ) ; 
  Test control definition:        : Tested tested = new Tested ( ) ; 
  Test C# declaration:            : Tested tested = new Tested ( ) ; 
  Handle C# declaration:          : Tested tested = new Tested ( ) ; 
  Test begin scope                : return tested ; 
  Test end scope                  : return tested ; 
  Test preproc statement:         : return tested ; 
  Test namespace definition:      : return tested ; 
  Test class definition:          : return tested ; 
  Test struct definition:         : return tested ; 
  Test C# function definition:    : return tested ; 
  Test control definition:        : return tested ; 
  Test C# declaration:            : return tested ; 
  Test C# executable:             : return tested ; 
  Handle C# executable:           : return tested ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual bool test ( ) { 
  handle begin scope              : public virtual bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual bool test ( ) { 
  Test preproc statement:         : public virtual bool test ( ) { 
  Test namespace definition:      : public virtual bool test ( ) { 
  function def   : public virtual bool test ( ) { 
  Test class definition:          : public virtual bool test ( ) { 
  Test struct definition:         : public virtual bool test ( ) { 
  Test C# function definition:    : public virtual bool test ( ) { 
  Handle C# function definition:  : public virtual bool test ( ) { 
  data declar    : ITestCode tested = getTested ( ) ; 
  Test begin scope                : ITestCode tested = getTested ( ) ; 
  Test end scope                  : ITestCode tested = getTested ( ) ; 
  Test preproc statement:         : ITestCode tested = getTested ( ) ; 
  executable     : return tested . test ( ) ; 
  Test namespace definition:      : ITestCode tested = getTested ( ) ; 
--- stack size = 3 ---
  Test class definition:          : ITestCode tested = getTested ( ) ; 
--- stack size = 2 ---
  Test struct definition:         : ITestCode tested = getTested ( ) ; 
--- stack size = 1 ---
  Test C# function definition:    : ITestCode tested = getTested ( ) ; 
  Test control definition:        : ITestCode tested = getTested ( ) ; 
  Test C# declaration:            : ITestCode tested = getTested ( ) ; 
  Handle C# declaration:          : ITestCode tested = getTested ( ) ; 
  using declar   : using System ; 
  Test begin scope                : return tested . test ( ) ; 
  using declar   : using System . Reflection ; 
  Test end scope                  : return tested . test ( ) ; 
  Test preproc statement:         : return tested . test ( ) ; 
  Test namespace definition:      : return tested . test ( ) ; 
  using declar   : using System . IO ; 
  Test class definition:          : return tested . test ( ) ; 
  Test struct definition:         : return tested . test ( ) ; 
  Test C# function definition:    : return tested . test ( ) ; 
  Test control definition:        : return tested . test ( ) ; 
  Test C# declaration:            : return tested . test ( ) ; 
  Test C# executable:             : return tested . test ( ) ; 
  Handle C# executable:           : return tested . test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Reflection ; 
  Test end scope                  : using System . Reflection ; 
  Test preproc statement:         : using System . Reflection ; 
  Test namespace definition:      : using System . Reflection ; 
  Test class definition:          : using System . Reflection ; 
  Test struct definition:         : using System . Reflection ; 
  Test C# function definition:    : using System . Reflection ; 
  Test control definition:        : using System . Reflection ; 
  Test C# declaration:            : using System . Reflection ; 
  Handle C# declaration:          : using System . Reflection ; 
  Test begin scope                : using System . IO ; 
  Test end scope                  : using System . IO ; 
  Test preproc statement:         : using System . IO ; 
  Test namespace definition:      : using System . IO ; 
  Test class definition:          : using System . IO ; 
  Test struct definition:         : using System . IO ; 
  Test C# function definition:    : using System . IO ; 
  Test control definition:        : using System . IO ; 
  Test C# declaration:            : using System . IO ; 
  Handle C# declaration:          : using System . IO ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Test : IDriver { 
  handle begin scope              : public class Test : IDriver { 
--- stack size = 3 ---
  Test end scope                  : public class Test : IDriver { 
  Test preproc statement:         : public class Test : IDriver { 
  class def      : public class Test : IDriver { 
  Test namespace definition:      : public class Test : IDriver { 
  Test class definition:          : public class Test : IDriver { 
  Handle class definition:        : public class Test : IDriver { 
  Test begin scope                : public Test ( ) { 
  handle begin scope              : public Test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Test ( ) { 
  Test preproc statement:         : public Test ( ) { 
  function def   : public Test ( ) { 
  Test namespace definition:      : public Test ( ) { 
  Test class definition:          : public Test ( ) { 
  Test struct definition:         : public Test ( ) { 
  Test C# function definition:    : public Test ( ) { 
  Handle C# function definition:  : public Test ( ) { 
  Test begin scope                : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test end scope                  : Console . Write ( "\n  constructing instance of Test1" ) ; 
  executable     : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test preproc statement:         : Console . Write ( "\n  constructing instance of Test1" ) ; 
--- stack size = 3 ---
  Test namespace definition:      : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test class definition:          : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test struct definition:         : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test C# function definition:    : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test control definition:        : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test C# declaration:            : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test C# executable:             : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Handle C# executable:           : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual void display ( ) { 
  handle begin scope              : public virtual void display ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual void display ( ) { 
  Test preproc statement:         : public virtual void display ( ) { 
  Test namespace definition:      : public virtual void display ( ) { 
  function def   : public virtual void display ( ) { 
  Test class definition:          : public virtual void display ( ) { 
  Test struct definition:         : public virtual void display ( ) { 
  Test C# function definition:    : public virtual void display ( ) { 
  Handle C# function definition:  : public virtual void display ( ) { 
  Test begin scope                : Console . Write ( "\n  Test #1:" ) ; 
  executable     : Console . Write ( "\n  Test #1:" ) ; 
  Test end scope                  : Console . Write ( "\n  Test #1:" ) ; 
--- stack size = 3 ---
  Test preproc statement:         : Console . Write ( "\n  Test #1:" ) ; 
  Test namespace definition:      : Console . Write ( "\n  Test #1:" ) ; 
  Test class definition:          : Console . Write ( "\n  Test #1:" ) ; 
  Test struct definition:         : Console . Write ( "\n  Test #1:" ) ; 
  Test C# function definition:    : Console . Write ( "\n  Test #1:" ) ; 
  Test control definition:        : Console . Write ( "\n  Test #1:" ) ; 
  Test C# declaration:            : Console . Write ( "\n  Test #1:" ) ; 
  Test C# executable:             : Console . Write ( "\n  Test #1:" ) ; 
  Handle C# executable:           : Console . Write ( "\n  Test #1:" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private ITestCode getTested ( ) { 
  handle begin scope              : private ITestCode getTested ( ) { 
--- stack size = 4 ---
  Test end scope                  : private ITestCode getTested ( ) { 
  Test preproc statement:         : private ITestCode getTested ( ) { 
  function def   : private ITestCode getTested ( ) { 
  Test namespace definition:      : private ITestCode getTested ( ) { 
  Test class definition:          : private ITestCode getTested ( ) { 
  Test struct definition:         : private ITestCode getTested ( ) { 
  Test C# function definition:    : private ITestCode getTested ( ) { 
  Handle C# function definition:  : private ITestCode getTested ( ) { 
  Test begin scope                : Tested tested = new Tested ( ) ; 
  Test end scope                  : Tested tested = new Tested ( ) ; 
  data declar    : Tested tested = new Tested ( ) ; 
  Test preproc statement:         : Tested tested = new Tested ( ) ; 
  Test namespace definition:      : Tested tested = new Tested ( ) ; 
  executable     : return tested ; 
  Test class definition:          : Tested tested = new Tested ( ) ; 
--- stack size = 3 ---
  Test struct definition:         : Tested tested = new Tested ( ) ; 
  Test C# function definition:    : Tested tested = new Tested ( ) ; 
  Test control definition:        : Tested tested = new Tested ( ) ; 
  Test C# declaration:            : Tested tested = new Tested ( ) ; 
  Handle C# declaration:          : Tested tested = new Tested ( ) ; 
  Test begin scope                : return tested ; 
  Test end scope                  : return tested ; 
  Test preproc statement:         : return tested ; 
  Test namespace definition:      : return tested ; 
  Test class definition:          : return tested ; 
  Test struct definition:         : return tested ; 
  Test C# function definition:    : return tested ; 
  Test control definition:        : return tested ; 
  Test C# declaration:            : return tested ; 
  Test C# executable:             : return tested ; 
  Handle C# executable:           : return tested ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual bool test ( ) { 
  handle begin scope              : public virtual bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual bool test ( ) { 
  Test preproc statement:         : public virtual bool test ( ) { 
  function def   : public virtual bool test ( ) { 
  Test namespace definition:      : public virtual bool test ( ) { 
  Test class definition:          : public virtual bool test ( ) { 
  Test struct definition:         : public virtual bool test ( ) { 
  Test C# function definition:    : public virtual bool test ( ) { 
  Handle C# function definition:  : public virtual bool test ( ) { 
  Test begin scope                : ITestCode tested = getTested ( ) ; 
  data declar    : ITestCode tested = getTested ( ) ; 
  Test end scope                  : ITestCode tested = getTested ( ) ; 
  Test preproc statement:         : ITestCode tested = getTested ( ) ; 
  Test namespace definition:      : ITestCode tested = getTested ( ) ; 
  Test class definition:          : ITestCode tested = getTested ( ) ; 
  executable     : return tested . test ( ) ; 
  Test struct definition:         : ITestCode tested = getTested ( ) ; 
--- stack size = 3 ---
  Test C# function definition:    : ITestCode tested = getTested ( ) ; 
--- stack size = 2 ---
  Test control definition:        : ITestCode tested = getTested ( ) ; 
--- stack size = 1 ---
  Test C# declaration:            : ITestCode tested = getTested ( ) ; 
  Handle C# declaration:          : ITestCode tested = getTested ( ) ; 
  Test begin scope                : return tested . test ( ) ; 
  Test end scope                  : return tested . test ( ) ; 
  using declar   : using System ; 
  Test preproc statement:         : return tested . test ( ) ; 
  Test namespace definition:      : return tested . test ( ) ; 
  Test class definition:          : return tested . test ( ) ; 
  using declar   : using System . Reflection ; 
  Test struct definition:         : return tested . test ( ) ; 
  Test C# function definition:    : return tested . test ( ) ; 
  using declar   : using System . IO ; 
  Test control definition:        : return tested . test ( ) ; 
  Test C# declaration:            : return tested . test ( ) ; 
  Test C# executable:             : return tested . test ( ) ; 
  Handle C# executable:           : return tested . test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Reflection ; 
  Test end scope                  : using System . Reflection ; 
  Test preproc statement:         : using System . Reflection ; 
  Test namespace definition:      : using System . Reflection ; 
  Test class definition:          : using System . Reflection ; 
  Test struct definition:         : using System . Reflection ; 
  Test C# function definition:    : using System . Reflection ; 
  Test control definition:        : using System . Reflection ; 
  Test C# declaration:            : using System . Reflection ; 
  Handle C# declaration:          : using System . Reflection ; 
  Test begin scope                : using System . IO ; 
  Test end scope                  : using System . IO ; 
  Test preproc statement:         : using System . IO ; 
  Test namespace definition:      : using System . IO ; 
  Test class definition:          : using System . IO ; 
  Test struct definition:         : using System . IO ; 
  Test C# function definition:    : using System . IO ; 
  Test control definition:        : using System . IO ; 
  Test C# declaration:            : using System . IO ; 
  Handle C# declaration:          : using System . IO ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  namespace def  : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Test : IDriver { 
  handle begin scope              : public class Test : IDriver { 
--- stack size = 3 ---
  Test end scope                  : public class Test : IDriver { 
  Test preproc statement:         : public class Test : IDriver { 
  class def      : public class Test : IDriver { 
  Test namespace definition:      : public class Test : IDriver { 
  Test class definition:          : public class Test : IDriver { 
  Handle class definition:        : public class Test : IDriver { 
  Test begin scope                : public Test ( ) { 
  handle begin scope              : public Test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Test ( ) { 
  Test preproc statement:         : public Test ( ) { 
  Test namespace definition:      : public Test ( ) { 
  function def   : public Test ( ) { 
  Test class definition:          : public Test ( ) { 
  Test struct definition:         : public Test ( ) { 
  Test C# function definition:    : public Test ( ) { 
  Handle C# function definition:  : public Test ( ) { 
  Test begin scope                : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test end scope                  : Console . Write ( "\n  constructing instance of Test2" ) ; 
  executable     : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test preproc statement:         : Console . Write ( "\n  constructing instance of Test2" ) ; 
--- stack size = 3 ---
  Test namespace definition:      : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test class definition:          : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test struct definition:         : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test C# function definition:    : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test control definition:        : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test C# declaration:            : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test C# executable:             : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Handle C# executable:           : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual void display ( ) { 
  handle begin scope              : public virtual void display ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual void display ( ) { 
  Test preproc statement:         : public virtual void display ( ) { 
  Test namespace definition:      : public virtual void display ( ) { 
  Test class definition:          : public virtual void display ( ) { 
  Test struct definition:         : public virtual void display ( ) { 
  function def   : public virtual void display ( ) { 
  Test C# function definition:    : public virtual void display ( ) { 
  Handle C# function definition:  : public virtual void display ( ) { 
  Test begin scope                : Console . Write ( "\n  Test #2:" ) ; 
  Test end scope                  : Console . Write ( "\n  Test #2:" ) ; 
  Test preproc statement:         : Console . Write ( "\n  Test #2:" ) ; 
  Test namespace definition:      : Console . Write ( "\n  Test #2:" ) ; 
  Test class definition:          : Console . Write ( "\n  Test #2:" ) ; 
  Test struct definition:         : Console . Write ( "\n  Test #2:" ) ; 
  Test C# function definition:    : Console . Write ( "\n  Test #2:" ) ; 
  executable     : Console . Write ( "\n  Test #2:" ) ; 
  Test control definition:        : Console . Write ( "\n  Test #2:" ) ; 
--- stack size = 3 ---
  Test C# declaration:            : Console . Write ( "\n  Test #2:" ) ; 
  Test C# executable:             : Console . Write ( "\n  Test #2:" ) ; 
  Handle C# executable:           : Console . Write ( "\n  Test #2:" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private ITestCode getTested ( ) { 
  handle begin scope              : private ITestCode getTested ( ) { 
--- stack size = 4 ---
  Test end scope                  : private ITestCode getTested ( ) { 
  Test preproc statement:         : private ITestCode getTested ( ) { 
  function def   : private ITestCode getTested ( ) { 
  Test namespace definition:      : private ITestCode getTested ( ) { 
  Test class definition:          : private ITestCode getTested ( ) { 
  Test struct definition:         : private ITestCode getTested ( ) { 
  Test C# function definition:    : private ITestCode getTested ( ) { 
  Handle C# function definition:  : private ITestCode getTested ( ) { 
  Test begin scope                : Tested tested = new Tested ( ) ; 
  Test end scope                  : Tested tested = new Tested ( ) ; 
  data declar    : Tested tested = new Tested ( ) ; 
  Test preproc statement:         : Tested tested = new Tested ( ) ; 
  executable     : return tested ; 
  Test namespace definition:      : Tested tested = new Tested ( ) ; 
--- stack size = 3 ---
  Test class definition:          : Tested tested = new Tested ( ) ; 
  Test struct definition:         : Tested tested = new Tested ( ) ; 
  Test C# function definition:    : Tested tested = new Tested ( ) ; 
  Test control definition:        : Tested tested = new Tested ( ) ; 
  Test C# declaration:            : Tested tested = new Tested ( ) ; 
  Handle C# declaration:          : Tested tested = new Tested ( ) ; 
  Test begin scope                : return tested ; 
  Test end scope                  : return tested ; 
  Test preproc statement:         : return tested ; 
  Test namespace definition:      : return tested ; 
  Test class definition:          : return tested ; 
  Test struct definition:         : return tested ; 
  Test C# function definition:    : return tested ; 
  Test control definition:        : return tested ; 
  Test C# declaration:            : return tested ; 
  Test C# executable:             : return tested ; 
  Handle C# executable:           : return tested ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual bool test ( ) { 
  handle begin scope              : public virtual bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual bool test ( ) { 
  Test preproc statement:         : public virtual bool test ( ) { 
  function def   : public virtual bool test ( ) { 
  Test namespace definition:      : public virtual bool test ( ) { 
  Test class definition:          : public virtual bool test ( ) { 
  Test struct definition:         : public virtual bool test ( ) { 
  Test C# function definition:    : public virtual bool test ( ) { 
  Handle C# function definition:  : public virtual bool test ( ) { 
  Test begin scope                : ITestCode tested = getTested ( ) ; 
  data declar    : ITestCode tested = getTested ( ) ; 
  Test end scope                  : ITestCode tested = getTested ( ) ; 
  Test preproc statement:         : ITestCode tested = getTested ( ) ; 
  Test namespace definition:      : ITestCode tested = getTested ( ) ; 
  Test class definition:          : ITestCode tested = getTested ( ) ; 
  Test struct definition:         : ITestCode tested = getTested ( ) ; 
  Test C# function definition:    : ITestCode tested = getTested ( ) ; 
  Test control definition:        : ITestCode tested = getTested ( ) ; 
  Test C# declaration:            : ITestCode tested = getTested ( ) ; 
  Handle C# declaration:          : ITestCode tested = getTested ( ) ; 
  Test begin scope                : return tested . test ( ) ; 
  Test end scope                  : return tested . test ( ) ; 
  Test preproc statement:         : return tested . test ( ) ; 
  executable     : return tested . test ( ) ; 
  Test namespace definition:      : return tested . test ( ) ; 
--- stack size = 3 ---
  Test class definition:          : return tested . test ( ) ; 
--- stack size = 2 ---
  Test struct definition:         : return tested . test ( ) ; 
  Test C# function definition:    : return tested . test ( ) ; 
--- stack size = 1 ---
  Test control definition:        : return tested . test ( ) ; 
  Test C# declaration:            : return tested . test ( ) ; 
  Test C# executable:             : return tested . test ( ) ; 
  Handle C# executable:           : return tested . test ( ) ; 
  Test begin scope                : } 
  using declar   : using System ; 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  using declar   : using System . Reflection ; 
  Test control definition:        : using System ; 
  using declar   : using System . IO ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Reflection ; 
  Test end scope                  : using System . Reflection ; 
  Test preproc statement:         : using System . Reflection ; 
  Test namespace definition:      : using System . Reflection ; 
  Test class definition:          : using System . Reflection ; 
  Test struct definition:         : using System . Reflection ; 
  Test C# function definition:    : using System . Reflection ; 
  Test control definition:        : using System . Reflection ; 
  Test C# declaration:            : using System . Reflection ; 
  Handle C# declaration:          : using System . Reflection ; 
  Test begin scope                : using System . IO ; 
  Test end scope                  : using System . IO ; 
  Test preproc statement:         : using System . IO ; 
  Test namespace definition:      : using System . IO ; 
  Test class definition:          : using System . IO ; 
  Test struct definition:         : using System . IO ; 
  Test C# function definition:    : using System . IO ; 
  Test control definition:        : using System . IO ; 
  Test C# declaration:            : using System . IO ; 
  Handle C# declaration:          : using System . IO ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  namespace def  : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Test : IDriver { 
  handle begin scope              : public class Test : IDriver { 
--- stack size = 3 ---
  Test end scope                  : public class Test : IDriver { 
  Test preproc statement:         : public class Test : IDriver { 
  class def      : public class Test : IDriver { 
  Test namespace definition:      : public class Test : IDriver { 
  Test class definition:          : public class Test : IDriver { 
  Handle class definition:        : public class Test : IDriver { 
  Test begin scope                : public Test ( ) { 
  handle begin scope              : public Test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Test ( ) { 
  Test preproc statement:         : public Test ( ) { 
  Test namespace definition:      : public Test ( ) { 
  Test class definition:          : public Test ( ) { 
  function def   : public Test ( ) { 
  Test struct definition:         : public Test ( ) { 
  Test C# function definition:    : public Test ( ) { 
  Handle C# function definition:  : public Test ( ) { 
  Test begin scope                : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test end scope                  : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test preproc statement:         : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test namespace definition:      : Console . Write ( "\n  constructing instance of Test3" ) ; 
  executable     : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test class definition:          : Console . Write ( "\n  constructing instance of Test3" ) ; 
--- stack size = 3 ---
  Test struct definition:         : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test C# function definition:    : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test control definition:        : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test C# declaration:            : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test C# executable:             : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Handle C# executable:           : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual void display ( ) { 
  handle begin scope              : public virtual void display ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual void display ( ) { 
  Test preproc statement:         : public virtual void display ( ) { 
  Test namespace definition:      : public virtual void display ( ) { 
  Test class definition:          : public virtual void display ( ) { 
  function def   : public virtual void display ( ) { 
  Test struct definition:         : public virtual void display ( ) { 
  Test C# function definition:    : public virtual void display ( ) { 
  Handle C# function definition:  : public virtual void display ( ) { 
  Test begin scope                : Console . Write ( "\n  Test #3:" ) ; 
  Test end scope                  : Console . Write ( "\n  Test #3:" ) ; 
  Test preproc statement:         : Console . Write ( "\n  Test #3:" ) ; 
  Test namespace definition:      : Console . Write ( "\n  Test #3:" ) ; 
  Test class definition:          : Console . Write ( "\n  Test #3:" ) ; 
  Test struct definition:         : Console . Write ( "\n  Test #3:" ) ; 
  Test C# function definition:    : Console . Write ( "\n  Test #3:" ) ; 
  Test control definition:        : Console . Write ( "\n  Test #3:" ) ; 
  Test C# declaration:            : Console . Write ( "\n  Test #3:" ) ; 
  Test C# executable:             : Console . Write ( "\n  Test #3:" ) ; 
  executable     : Console . Write ( "\n  Test #3:" ) ; 
  Handle C# executable:           : Console . Write ( "\n  Test #3:" ) ; 
--- stack size = 3 ---
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private ITestCode getTested ( ) { 
  handle begin scope              : private ITestCode getTested ( ) { 
--- stack size = 4 ---
  Test end scope                  : private ITestCode getTested ( ) { 
  Test preproc statement:         : private ITestCode getTested ( ) { 
  Test namespace definition:      : private ITestCode getTested ( ) { 
  function def   : private ITestCode getTested ( ) { 
  Test class definition:          : private ITestCode getTested ( ) { 
  Test struct definition:         : private ITestCode getTested ( ) { 
  Test C# function definition:    : private ITestCode getTested ( ) { 
  Handle C# function definition:  : private ITestCode getTested ( ) { 
  Test begin scope                : Tested tested = new Tested ( ) ; 
  data declar    : Tested tested = new Tested ( ) ; 
  Test end scope                  : Tested tested = new Tested ( ) ; 
  Test preproc statement:         : Tested tested = new Tested ( ) ; 
  Test namespace definition:      : Tested tested = new Tested ( ) ; 
  executable     : return tested ; 
  Test class definition:          : Tested tested = new Tested ( ) ; 
--- stack size = 3 ---
  Test struct definition:         : Tested tested = new Tested ( ) ; 
  Test C# function definition:    : Tested tested = new Tested ( ) ; 
  Test control definition:        : Tested tested = new Tested ( ) ; 
  Test C# declaration:            : Tested tested = new Tested ( ) ; 
  Handle C# declaration:          : Tested tested = new Tested ( ) ; 
  Test begin scope                : return tested ; 
  Test end scope                  : return tested ; 
  Test preproc statement:         : return tested ; 
  Test namespace definition:      : return tested ; 
  Test class definition:          : return tested ; 
  Test struct definition:         : return tested ; 
  Test C# function definition:    : return tested ; 
  Test control definition:        : return tested ; 
  Test C# declaration:            : return tested ; 
  Test C# executable:             : return tested ; 
  Handle C# executable:           : return tested ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual bool test ( ) { 
  handle begin scope              : public virtual bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual bool test ( ) { 
  Test preproc statement:         : public virtual bool test ( ) { 
  Test namespace definition:      : public virtual bool test ( ) { 
  function def   : public virtual bool test ( ) { 
  Test class definition:          : public virtual bool test ( ) { 
  Test struct definition:         : public virtual bool test ( ) { 
  Test C# function definition:    : public virtual bool test ( ) { 
  Handle C# function definition:  : public virtual bool test ( ) { 
  Test begin scope                : ITestCode tested = getTested ( ) ; 
  Test end scope                  : ITestCode tested = getTested ( ) ; 
  Test preproc statement:         : ITestCode tested = getTested ( ) ; 
  Test namespace definition:      : ITestCode tested = getTested ( ) ; 
  data declar    : ITestCode tested = getTested ( ) ; 
  Test class definition:          : ITestCode tested = getTested ( ) ; 
  Test struct definition:         : ITestCode tested = getTested ( ) ; 
  Test C# function definition:    : ITestCode tested = getTested ( ) ; 
  Test control definition:        : ITestCode tested = getTested ( ) ; 
  Test C# declaration:            : ITestCode tested = getTested ( ) ; 
  Handle C# declaration:          : ITestCode tested = getTested ( ) ; 
  executable     : return tested . test ( ) ; 
  Test begin scope                : return tested . test ( ) ; 
--- stack size = 3 ---
  Test end scope                  : return tested . test ( ) ; 
--- stack size = 2 ---
  Test preproc statement:         : return tested . test ( ) ; 
--- stack size = 1 ---
  Test namespace definition:      : return tested . test ( ) ; 
  Test class definition:          : return tested . test ( ) ; 
  Test struct definition:         : return tested . test ( ) ; 
  Test C# function definition:    : return tested . test ( ) ; 
  Test control definition:        : return tested . test ( ) ; 
  Test C# declaration:            : return tested . test ( ) ; 
  using declar   : using System ; 
  Test C# executable:             : return tested . test ( ) ; 
  Handle C# executable:           : return tested . test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  using declar   : using System . Collections . Generic ; 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System . Linq ; 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  using declar   : using System . Text ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Collections . Generic ; 
  using declar   : using System . Threading . Tasks ; 
  Test end scope                  : using System . Collections . Generic ; 
  Test preproc statement:         : using System . Collections . Generic ; 
  Test namespace definition:      : using System . Collections . Generic ; 
  Test class definition:          : using System . Collections . Generic ; 
  Test struct definition:         : using System . Collections . Generic ; 
  Test C# function definition:    : using System . Collections . Generic ; 
  Test control definition:        : using System . Collections . Generic ; 
  Test C# declaration:            : using System . Collections . Generic ; 
  Handle C# declaration:          : using System . Collections . Generic ; 
  Test begin scope                : using System . Linq ; 
  Test end scope                  : using System . Linq ; 
  Test preproc statement:         : using System . Linq ; 
  Test namespace definition:      : using System . Linq ; 
  Test class definition:          : using System . Linq ; 
  Test struct definition:         : using System . Linq ; 
  Test C# function definition:    : using System . Linq ; 
  Test control definition:        : using System . Linq ; 
  Test C# declaration:            : using System . Linq ; 
  Handle C# declaration:          : using System . Linq ; 
  Test begin scope                : using System . Text ; 
  Test end scope                  : using System . Text ; 
  Test preproc statement:         : using System . Text ; 
  Test namespace definition:      : using System . Text ; 
  Test class definition:          : using System . Text ; 
  Test struct definition:         : using System . Text ; 
  Test C# function definition:    : using System . Text ; 
  Test control definition:        : using System . Text ; 
  Test C# declaration:            : using System . Text ; 
  Handle C# declaration:          : using System . Text ; 
  Test begin scope                : using System . Threading . Tasks ; 
  Test end scope                  : using System . Threading . Tasks ; 
  Test preproc statement:         : using System . Threading . Tasks ; 
  Test namespace definition:      : using System . Threading . Tasks ; 
  Test class definition:          : using System . Threading . Tasks ; 
  Test struct definition:         : using System . Threading . Tasks ; 
  Test C# function definition:    : using System . Threading . Tasks ; 
  Test control definition:        : using System . Threading . Tasks ; 
  Test C# declaration:            : using System . Threading . Tasks ; 
  Handle C# declaration:          : using System . Threading . Tasks ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Dependency { 
  handle begin scope              : public class Dependency { 
--- stack size = 3 ---
  Test end scope                  : public class Dependency { 
  class def      : public class Dependency { 
  Test preproc statement:         : public class Dependency { 
  Test namespace definition:      : public class Dependency { 
  Test class definition:          : public class Dependency { 
  Handle class definition:        : public class Dependency { 
  Test begin scope                : public int Multiply ( int a , int b ) { 
  handle begin scope              : public int Multiply ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Multiply ( int a , int b ) { 
  Test preproc statement:         : public int Multiply ( int a , int b ) { 
  Test namespace definition:      : public int Multiply ( int a , int b ) { 
  function def   : public int Multiply ( int a , int b ) { 
  Test class definition:          : public int Multiply ( int a , int b ) { 
  Test struct definition:         : public int Multiply ( int a , int b ) { 
  Test C# function definition:    : public int Multiply ( int a , int b ) { 
  default:       : return a * b ; 
  Handle C# function definition:  : public int Multiply ( int a , int b ) { 
--- stack size = 3 ---
  Test begin scope                : return a * b ; 
  Test end scope                  : return a * b ; 
  Test preproc statement:         : return a * b ; 
  Test namespace definition:      : return a * b ; 
  Test class definition:          : return a * b ; 
  Test struct definition:         : return a * b ; 
  Test C# function definition:    : return a * b ; 
  Test control definition:        : return a * b ; 
  Test C# declaration:            : return a * b ; 
  Test C# executable:             : return a * b ; 
  Test default:                   : return a * b ; 
  Handle default:                 : return a * b ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public int Addition ( int a , int b ) { 
  handle begin scope              : public int Addition ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Addition ( int a , int b ) { 
  Test preproc statement:         : public int Addition ( int a , int b ) { 
  Test namespace definition:      : public int Addition ( int a , int b ) { 
  function def   : public int Addition ( int a , int b ) { 
  Test class definition:          : public int Addition ( int a , int b ) { 
  Test struct definition:         : public int Addition ( int a , int b ) { 
  Test C# function definition:    : public int Addition ( int a , int b ) { 
  executable     : return a + b ; 
  Handle C# function definition:  : public int Addition ( int a , int b ) { 
--- stack size = 3 ---
  Test begin scope                : return a + b ; 
--- stack size = 2 ---
  Test end scope                  : return a + b ; 
--- stack size = 1 ---
  Test preproc statement:         : return a + b ; 
  Test namespace definition:      : return a + b ; 
  Test class definition:          : return a + b ; 
  Test struct definition:         : return a + b ; 
  Test C# function definition:    : return a + b ; 
  Test control definition:        : return a + b ; 
  using declar   : using System ; 
  Test C# declaration:            : return a + b ; 
  Test C# executable:             : return a + b ; 
  Handle C# executable:           : return a + b ; 
  using declar   : using System . Collections . Generic ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System . Linq ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  using declar   : using System . Text ; 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  using declar   : using System . Threading . Tasks ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Collections . Generic ; 
  Test end scope                  : using System . Collections . Generic ; 
  Test preproc statement:         : using System . Collections . Generic ; 
  Test namespace definition:      : using System . Collections . Generic ; 
  Test class definition:          : using System . Collections . Generic ; 
  Test struct definition:         : using System . Collections . Generic ; 
  Test C# function definition:    : using System . Collections . Generic ; 
  Test control definition:        : using System . Collections . Generic ; 
  Test C# declaration:            : using System . Collections . Generic ; 
  Handle C# declaration:          : using System . Collections . Generic ; 
  Test begin scope                : using System . Linq ; 
  Test end scope                  : using System . Linq ; 
  Test preproc statement:         : using System . Linq ; 
  Test namespace definition:      : using System . Linq ; 
  Test class definition:          : using System . Linq ; 
  Test struct definition:         : using System . Linq ; 
  Test C# function definition:    : using System . Linq ; 
  Test control definition:        : using System . Linq ; 
  Test C# declaration:            : using System . Linq ; 
  Handle C# declaration:          : using System . Linq ; 
  Test begin scope                : using System . Text ; 
  Test end scope                  : using System . Text ; 
  Test preproc statement:         : using System . Text ; 
  Test namespace definition:      : using System . Text ; 
  Test class definition:          : using System . Text ; 
  Test struct definition:         : using System . Text ; 
  Test C# function definition:    : using System . Text ; 
  Test control definition:        : using System . Text ; 
  Test C# declaration:            : using System . Text ; 
  Handle C# declaration:          : using System . Text ; 
  Test begin scope                : using System . Threading . Tasks ; 
  Test end scope                  : using System . Threading . Tasks ; 
  Test preproc statement:         : using System . Threading . Tasks ; 
  Test namespace definition:      : using System . Threading . Tasks ; 
  Test class definition:          : using System . Threading . Tasks ; 
  Test struct definition:         : using System . Threading . Tasks ; 
  Test C# function definition:    : using System . Threading . Tasks ; 
  Test control definition:        : using System . Threading . Tasks ; 
  Test C# declaration:            : using System . Threading . Tasks ; 
  Handle C# declaration:          : using System . Threading . Tasks ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Dependency { 
  handle begin scope              : public class Dependency { 
--- stack size = 3 ---
  Test end scope                  : public class Dependency { 
  Test preproc statement:         : public class Dependency { 
  class def      : public class Dependency { 
  Test namespace definition:      : public class Dependency { 
  Test class definition:          : public class Dependency { 
  Handle class definition:        : public class Dependency { 
  Test begin scope                : public int Multiply ( int a , int b ) { 
  handle begin scope              : public int Multiply ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Multiply ( int a , int b ) { 
  Test preproc statement:         : public int Multiply ( int a , int b ) { 
  Test namespace definition:      : public int Multiply ( int a , int b ) { 
  Test class definition:          : public int Multiply ( int a , int b ) { 
  function def   : public int Multiply ( int a , int b ) { 
  Test struct definition:         : public int Multiply ( int a , int b ) { 
  Test C# function definition:    : public int Multiply ( int a , int b ) { 
  Handle C# function definition:  : public int Multiply ( int a , int b ) { 
  default:       : return a * b ; 
  Test begin scope                : return a * b ; 
--- stack size = 3 ---
  Test end scope                  : return a * b ; 
  Test preproc statement:         : return a * b ; 
  Test namespace definition:      : return a * b ; 
  Test class definition:          : return a * b ; 
  Test struct definition:         : return a * b ; 
  Test C# function definition:    : return a * b ; 
  Test control definition:        : return a * b ; 
  Test C# declaration:            : return a * b ; 
  Test C# executable:             : return a * b ; 
  Test default:                   : return a * b ; 
  Handle default:                 : return a * b ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public int Addition ( int a , int b ) { 
  handle begin scope              : public int Addition ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Addition ( int a , int b ) { 
  Test preproc statement:         : public int Addition ( int a , int b ) { 
  Test namespace definition:      : public int Addition ( int a , int b ) { 
  Test class definition:          : public int Addition ( int a , int b ) { 
  function def   : public int Addition ( int a , int b ) { 
  Test struct definition:         : public int Addition ( int a , int b ) { 
  Test C# function definition:    : public int Addition ( int a , int b ) { 
  Handle C# function definition:  : public int Addition ( int a , int b ) { 
  Test begin scope                : return a + b ; 
  Test end scope                  : return a + b ; 
  Test preproc statement:         : return a + b ; 
  Test namespace definition:      : return a + b ; 
  executable     : return a + b ; 
  Test class definition:          : return a + b ; 
--- stack size = 3 ---
  Test struct definition:         : return a + b ; 
  Test C# function definition:    : return a + b ; 
--- stack size = 2 ---
  Test control definition:        : return a + b ; 
--- stack size = 1 ---
  Test C# declaration:            : return a + b ; 
  Test C# executable:             : return a + b ; 
  Handle C# executable:           : return a + b ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  namespace def  : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public interface IDriver { 
  handle begin scope              : public interface IDriver { 
--- stack size = 3 ---
  Test end scope                  : public interface IDriver { 
  Test preproc statement:         : public interface IDriver { 
  Test namespace definition:      : public interface IDriver { 
  Test class definition:          : public interface IDriver { 
  interface def  : public interface IDriver { 
  Handle class definition:        : public interface IDriver { 
  Test begin scope                : void display ( ) ; 
  Test end scope                  : void display ( ) ; 
  Test preproc statement:         : void display ( ) ; 
  Test namespace definition:      : void display ( ) ; 
  Test class definition:          : void display ( ) ; 
  function declar: void display ( ) ; 
  Test struct definition:         : void display ( ) ; 
  Test C# function definition:    : void display ( ) ; 
  Test control definition:        : void display ( ) ; 
  Test C# declaration:            : void display ( ) ; 
  Handle C# declaration:          : void display ( ) ; 
  Test begin scope                : bool test ( ) ; 
  Test end scope                  : bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
  Test namespace definition:      : bool test ( ) ; 
  function declar: bool test ( ) ; 
  Test class definition:          : bool test ( ) ; 
--- stack size = 2 ---
  Test struct definition:         : bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
  Test control definition:        : bool test ( ) ; 
  Test C# declaration:            : bool test ( ) ; 
  Handle C# declaration:          : bool test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public interface ITestCode { 
  handle begin scope              : public interface ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public interface ITestCode { 
  Test preproc statement:         : public interface ITestCode { 
  Test namespace definition:      : public interface ITestCode { 
  interface def  : public interface ITestCode { 
  Test class definition:          : public interface ITestCode { 
  Handle class definition:        : public interface ITestCode { 
  Test begin scope                : bool test ( ) ; 
  Test end scope                  : bool test ( ) ; 
  function declar: bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
--- stack size = 2 ---
  Test namespace definition:      : bool test ( ) ; 
--- stack size = 1 ---
  Test class definition:          : bool test ( ) ; 
  Test struct definition:         : bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
  Test control definition:        : bool test ( ) ; 
  Test C# declaration:            : bool test ( ) ; 
  Handle C# declaration:          : bool test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  using declar   : using System ; 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public interface IDriver { 
  handle begin scope              : public interface IDriver { 
--- stack size = 3 ---
  Test end scope                  : public interface IDriver { 
  Test preproc statement:         : public interface IDriver { 
  Test namespace definition:      : public interface IDriver { 
  Test class definition:          : public interface IDriver { 
  Handle class definition:        : public interface IDriver { 
  interface def  : public interface IDriver { 
  Test begin scope                : void display ( ) ; 
  Test end scope                  : void display ( ) ; 
  Test preproc statement:         : void display ( ) ; 
  Test namespace definition:      : void display ( ) ; 
  Test class definition:          : void display ( ) ; 
  Test struct definition:         : void display ( ) ; 
  Test C# function definition:    : void display ( ) ; 
  Test control definition:        : void display ( ) ; 
  function declar: void display ( ) ; 
  Test C# declaration:            : void display ( ) ; 
  Handle C# declaration:          : void display ( ) ; 
  Test begin scope                : bool test ( ) ; 
  Test end scope                  : bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
  Test namespace definition:      : bool test ( ) ; 
  Test class definition:          : bool test ( ) ; 
  Test struct definition:         : bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
  Test control definition:        : bool test ( ) ; 
  Test C# declaration:            : bool test ( ) ; 
  Handle C# declaration:          : bool test ( ) ; 
  function declar: bool test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
--- stack size = 2 ---
  Handle end scope                : } 
  Test begin scope                : public interface ITestCode { 
  handle begin scope              : public interface ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public interface ITestCode { 
  Test preproc statement:         : public interface ITestCode { 
  interface def  : public interface ITestCode { 
  Test namespace definition:      : public interface ITestCode { 
  Test class definition:          : public interface ITestCode { 
  Handle class definition:        : public interface ITestCode { 
  Test begin scope                : bool test ( ) ; 
  Test end scope                  : bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
  Test namespace definition:      : bool test ( ) ; 
  Test class definition:          : bool test ( ) ; 
  Test struct definition:         : bool test ( ) ; 
  function declar: bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
--- stack size = 2 ---
  Test control definition:        : bool test ( ) ; 
  Test C# declaration:            : bool test ( ) ; 
--- stack size = 1 ---
  Handle C# declaration:          : bool test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  using declar   : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public interface IDriver { 
  handle begin scope              : public interface IDriver { 
--- stack size = 3 ---
  Test end scope                  : public interface IDriver { 
  Test preproc statement:         : public interface IDriver { 
  interface def  : public interface IDriver { 
  Test namespace definition:      : public interface IDriver { 
  Test class definition:          : public interface IDriver { 
  Handle class definition:        : public interface IDriver { 
  Test begin scope                : void display ( ) ; 
  Test end scope                  : void display ( ) ; 
  Test preproc statement:         : void display ( ) ; 
  Test namespace definition:      : void display ( ) ; 
  function declar: void display ( ) ; 
  Test class definition:          : void display ( ) ; 
  Test struct definition:         : void display ( ) ; 
  Test C# function definition:    : void display ( ) ; 
  Test control definition:        : void display ( ) ; 
  Test C# declaration:            : void display ( ) ; 
  Handle C# declaration:          : void display ( ) ; 
  Test begin scope                : bool test ( ) ; 
  Test end scope                  : bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
  Test namespace definition:      : bool test ( ) ; 
  function declar: bool test ( ) ; 
  Test class definition:          : bool test ( ) ; 
--- stack size = 2 ---
  Test struct definition:         : bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
  Test control definition:        : bool test ( ) ; 
  Test C# declaration:            : bool test ( ) ; 
  Handle C# declaration:          : bool test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public interface ITestCode { 
  handle begin scope              : public interface ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public interface ITestCode { 
  Test preproc statement:         : public interface ITestCode { 
  interface def  : public interface ITestCode { 
  Test namespace definition:      : public interface ITestCode { 
  Test class definition:          : public interface ITestCode { 
  Handle class definition:        : public interface ITestCode { 
  Test begin scope                : bool test ( ) ; 
  Test end scope                  : bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
  Test namespace definition:      : bool test ( ) ; 
  function declar: bool test ( ) ; 
  Test class definition:          : bool test ( ) ; 
--- stack size = 2 ---
  Test struct definition:         : bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
--- stack size = 1 ---
  Test control definition:        : bool test ( ) ; 
  Test C# declaration:            : bool test ( ) ; 
  Handle C# declaration:          : bool test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  using declar   : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Tested : ITestCode { 
  handle begin scope              : public class Tested : ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public class Tested : ITestCode { 
  Test preproc statement:         : public class Tested : ITestCode { 
  class def      : public class Tested : ITestCode { 
  Test namespace definition:      : public class Tested : ITestCode { 
  Test class definition:          : public class Tested : ITestCode { 
  Handle class definition:        : public class Tested : ITestCode { 
  Test begin scope                : public Tested ( ) { 
  handle begin scope              : public Tested ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Tested ( ) { 
  Test preproc statement:         : public Tested ( ) { 
  Test namespace definition:      : public Tested ( ) { 
  function def   : public Tested ( ) { 
  Test class definition:          : public Tested ( ) { 
  Test struct definition:         : public Tested ( ) { 
  Test C# function definition:    : public Tested ( ) { 
  Handle C# function definition:  : public Tested ( ) { 
  Test begin scope                : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test end scope                  : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test preproc statement:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  executable     : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test namespace definition:      : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test class definition:          : Console . Write ( "\n    constructing instance of Test code" ) ; 
--- stack size = 3 ---
  Test struct definition:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# function definition:    : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test control definition:        : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# declaration:            : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# executable:             : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Handle C# executable:           : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public bool test ( ) { 
  handle begin scope              : public bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public bool test ( ) { 
  Test preproc statement:         : public bool test ( ) { 
  function def   : public bool test ( ) { 
  Test namespace definition:      : public bool test ( ) { 
  Test class definition:          : public bool test ( ) { 
  Test struct definition:         : public bool test ( ) { 
  Test C# function definition:    : public bool test ( ) { 
  Handle C# function definition:  : public bool test ( ) { 
  Test begin scope                : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test end scope                  : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Production code - TestedLib" ) ; 
  data declar    : Dependency tld = new Dependency ( ) ; 
  Test class definition:          : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test struct definition:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test control definition:        : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# executable:             : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test begin scope                : Dependency tld = new Dependency ( ) ; 
  Test end scope                  : Dependency tld = new Dependency ( ) ; 
  data declar    : int result = tld . Multiply ( 20 , 11 ) ; 
  Test preproc statement:         : Dependency tld = new Dependency ( ) ; 
  Test namespace definition:      : Dependency tld = new Dependency ( ) ; 
  Test class definition:          : Dependency tld = new Dependency ( ) ; 
  Test struct definition:         : Dependency tld = new Dependency ( ) ; 
  Test C# function definition:    : Dependency tld = new Dependency ( ) ; 
  Test control definition:        : Dependency tld = new Dependency ( ) ; 
  Test C# declaration:            : Dependency tld = new Dependency ( ) ; 
  Handle C# declaration:          : Dependency tld = new Dependency ( ) ; 
  Test begin scope                : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test end scope                  : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  executable     : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test class definition:          : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test struct definition:         : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test control definition:        : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test C# executable:             : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test begin scope                : int result = tld . Multiply ( 20 , 11 ) ; 
  Test end scope                  : int result = tld . Multiply ( 20 , 11 ) ; 
  Test preproc statement:         : int result = tld . Multiply ( 20 , 11 ) ; 
  Test namespace definition:      : int result = tld . Multiply ( 20 , 11 ) ; 
  Test class definition:          : int result = tld . Multiply ( 20 , 11 ) ; 
  Test struct definition:         : int result = tld . Multiply ( 20 , 11 ) ; 
  Test C# function definition:    : int result = tld . Multiply ( 20 , 11 ) ; 
  Test control definition:        : int result = tld . Multiply ( 20 , 11 ) ; 
  Test C# declaration:            : int result = tld . Multiply ( 20 , 11 ) ; 
  Handle C# declaration:          : int result = tld . Multiply ( 20 , 11 ) ; 
  Test begin scope                : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test end scope                  : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test preproc statement:         : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test namespace definition:      : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test class definition:          : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test struct definition:         : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# function definition:    : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test control definition:        : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# declaration:            : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# executable:             : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Handle C# executable:           : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test begin scope                : if ( result == 200 ) { 
  handle begin scope              : if ( result == 200 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( result == 200 ) { 
  Test preproc statement:         : if ( result == 200 ) { 
  Test namespace definition:      : if ( result == 200 ) { 
  control def    : if ( result == 200 ) { 
  Test class definition:          : if ( result == 200 ) { 
  Test struct definition:         : if ( result == 200 ) { 
  Test C# function definition:    : if ( result == 200 ) { 
  Test control definition:        : if ( result == 200 ) { 
  Handle control definition:      : if ( result == 200 ) { 
  executable     : return true ; 
  Test begin scope                : return true ; 
--- stack size = 4 ---
  Test end scope                  : return true ; 
  Test preproc statement:         : return true ; 
  Test namespace definition:      : return true ; 
  Test class definition:          : return true ; 
  Test struct definition:         : return true ; 
  Test C# function definition:    : return true ; 
  Test control definition:        : return true ; 
  Test C# declaration:            : return true ; 
  Test C# executable:             : return true ; 
  Handle C# executable:           : return true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  executable     : return false ; 
  Test C# function definition:    : else { 
--- stack size = 4 ---
  Test control definition:        : else { 
  Handle control definition:      : else { 
--- stack size = 3 ---
  Test begin scope                : return false ; 
--- stack size = 2 ---
  Test end scope                  : return false ; 
--- stack size = 1 ---
  Test preproc statement:         : return false ; 
  Test namespace definition:      : return false ; 
  Test class definition:          : return false ; 
  Test struct definition:         : return false ; 
  Test C# function definition:    : return false ; 
  Test control definition:        : return false ; 
  Test C# declaration:            : return false ; 
  Test C# executable:             : return false ; 
  Handle C# executable:           : return false ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  using declar   : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Tested : ITestCode { 
  handle begin scope              : public class Tested : ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public class Tested : ITestCode { 
  class def      : public class Tested : ITestCode { 
  Test preproc statement:         : public class Tested : ITestCode { 
  Test namespace definition:      : public class Tested : ITestCode { 
  Test class definition:          : public class Tested : ITestCode { 
  Handle class definition:        : public class Tested : ITestCode { 
  Test begin scope                : public Tested ( ) { 
  handle begin scope              : public Tested ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Tested ( ) { 
  Test preproc statement:         : public Tested ( ) { 
  Test namespace definition:      : public Tested ( ) { 
  function def   : public Tested ( ) { 
  Test class definition:          : public Tested ( ) { 
  Test struct definition:         : public Tested ( ) { 
  Test C# function definition:    : public Tested ( ) { 
  Handle C# function definition:  : public Tested ( ) { 
  Test begin scope                : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test end scope                  : Console . Write ( "\n    constructing instance of Test code" ) ; 
  executable     : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test preproc statement:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
--- stack size = 3 ---
  Test namespace definition:      : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test class definition:          : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test struct definition:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# function definition:    : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test control definition:        : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# declaration:            : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# executable:             : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Handle C# executable:           : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public bool test ( ) { 
  handle begin scope              : public bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public bool test ( ) { 
  Test preproc statement:         : public bool test ( ) { 
  function def   : public bool test ( ) { 
  Test namespace definition:      : public bool test ( ) { 
  Test class definition:          : public bool test ( ) { 
  Test struct definition:         : public bool test ( ) { 
  Test C# function definition:    : public bool test ( ) { 
  Handle C# function definition:  : public bool test ( ) { 
  Test begin scope                : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test end scope                  : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Production code - TestedLib" ) ; 
  data declar    : Dependency tld = new Dependency ( ) ; 
  Test class definition:          : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test struct definition:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test control definition:        : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# executable:             : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test begin scope                : Dependency tld = new Dependency ( ) ; 
  data declar    : int result = tld . Addition ( 50 , 50 ) ; 
  Test end scope                  : Dependency tld = new Dependency ( ) ; 
  Test preproc statement:         : Dependency tld = new Dependency ( ) ; 
  Test namespace definition:      : Dependency tld = new Dependency ( ) ; 
  Test class definition:          : Dependency tld = new Dependency ( ) ; 
  Test struct definition:         : Dependency tld = new Dependency ( ) ; 
  Test C# function definition:    : Dependency tld = new Dependency ( ) ; 
  Test control definition:        : Dependency tld = new Dependency ( ) ; 
  Test C# declaration:            : Dependency tld = new Dependency ( ) ; 
  Handle C# declaration:          : Dependency tld = new Dependency ( ) ; 
  Test begin scope                : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  executable     : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test end scope                  : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test class definition:          : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test struct definition:         : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test control definition:        : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test C# executable:             : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test begin scope                : int result = tld . Addition ( 50 , 50 ) ; 
  Test end scope                  : int result = tld . Addition ( 50 , 50 ) ; 
  Test preproc statement:         : int result = tld . Addition ( 50 , 50 ) ; 
  Test namespace definition:      : int result = tld . Addition ( 50 , 50 ) ; 
  Test class definition:          : int result = tld . Addition ( 50 , 50 ) ; 
  Test struct definition:         : int result = tld . Addition ( 50 , 50 ) ; 
  Test C# function definition:    : int result = tld . Addition ( 50 , 50 ) ; 
  Test control definition:        : int result = tld . Addition ( 50 , 50 ) ; 
  Test C# declaration:            : int result = tld . Addition ( 50 , 50 ) ; 
  Handle C# declaration:          : int result = tld . Addition ( 50 , 50 ) ; 
  Test begin scope                : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test end scope                  : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test preproc statement:         : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test namespace definition:      : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test class definition:          : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test struct definition:         : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# function definition:    : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test control definition:        : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# declaration:            : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# executable:             : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Handle C# executable:           : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test begin scope                : if ( result == 100 ) { 
  handle begin scope              : if ( result == 100 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( result == 100 ) { 
  Test preproc statement:         : if ( result == 100 ) { 
  Test namespace definition:      : if ( result == 100 ) { 
  control def    : if ( result == 100 ) { 
  Test class definition:          : if ( result == 100 ) { 
  Test struct definition:         : if ( result == 100 ) { 
  executable     : return true ; 
  Test C# function definition:    : if ( result == 100 ) { 
  Test control definition:        : if ( result == 100 ) { 
--- stack size = 4 ---
  Handle control definition:      : if ( result == 100 ) { 
  Test begin scope                : return true ; 
  Test end scope                  : return true ; 
  Test preproc statement:         : return true ; 
  Test namespace definition:      : return true ; 
  Test class definition:          : return true ; 
  Test struct definition:         : return true ; 
  Test C# function definition:    : return true ; 
  Test control definition:        : return true ; 
  Test C# declaration:            : return true ; 
  Test C# executable:             : return true ; 
  Handle C# executable:           : return true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  executable     : return false ; 
  Handle control definition:      : else { 
--- stack size = 4 ---
  Test begin scope                : return false ; 
--- stack size = 3 ---
  Test end scope                  : return false ; 
--- stack size = 2 ---
  Test preproc statement:         : return false ; 
  Test namespace definition:      : return false ; 
--- stack size = 1 ---
  Test class definition:          : return false ; 
  Test struct definition:         : return false ; 
  Test C# function definition:    : return false ; 
  Test control definition:        : return false ; 
  Test C# declaration:            : return false ; 
  Test C# executable:             : return false ; 
  Handle C# executable:           : return false ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  using declar   : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  namespace def  : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Tested : ITestCode { 
  handle begin scope              : public class Tested : ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public class Tested : ITestCode { 
  Test preproc statement:         : public class Tested : ITestCode { 
  class def      : public class Tested : ITestCode { 
  Test namespace definition:      : public class Tested : ITestCode { 
  Test class definition:          : public class Tested : ITestCode { 
  Handle class definition:        : public class Tested : ITestCode { 
  Test begin scope                : public Tested ( ) { 
  handle begin scope              : public Tested ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Tested ( ) { 
  Test preproc statement:         : public Tested ( ) { 
  function def   : public Tested ( ) { 
  Test namespace definition:      : public Tested ( ) { 
  Test class definition:          : public Tested ( ) { 
  Test struct definition:         : public Tested ( ) { 
  Test C# function definition:    : public Tested ( ) { 
  Handle C# function definition:  : public Tested ( ) { 
  Test begin scope                : Console . Write ( "\n    constructing instance of Test code" ) ; 
  executable     : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test end scope                  : Console . Write ( "\n    constructing instance of Test code" ) ; 
--- stack size = 3 ---
  Test preproc statement:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test namespace definition:      : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test class definition:          : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test struct definition:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# function definition:    : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test control definition:        : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# declaration:            : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# executable:             : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Handle C# executable:           : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public bool test ( ) { 
  handle begin scope              : public bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public bool test ( ) { 
  Test preproc statement:         : public bool test ( ) { 
  Test namespace definition:      : public bool test ( ) { 
  function def   : public bool test ( ) { 
  Test class definition:          : public bool test ( ) { 
  Test struct definition:         : public bool test ( ) { 
  Test C# function definition:    : public bool test ( ) { 
  Handle C# function definition:  : public bool test ( ) { 
  Test begin scope                : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test end scope                  : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test class definition:          : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test struct definition:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  data declar    : Dependency tld = new Dependency ( ) ; 
  Test C# function definition:    : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test control definition:        : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# executable:             : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test begin scope                : Dependency tld = new Dependency ( ) ; 
  Test end scope                  : Dependency tld = new Dependency ( ) ; 
  executable     : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test preproc statement:         : Dependency tld = new Dependency ( ) ; 
  Test namespace definition:      : Dependency tld = new Dependency ( ) ; 
  Test class definition:          : Dependency tld = new Dependency ( ) ; 
  Test struct definition:         : Dependency tld = new Dependency ( ) ; 
  Test C# function definition:    : Dependency tld = new Dependency ( ) ; 
  Test control definition:        : Dependency tld = new Dependency ( ) ; 
  Test C# declaration:            : Dependency tld = new Dependency ( ) ; 
  data declar    : int result = tld . Divide ( 10 , 0 ) ; 
  Handle C# declaration:          : Dependency tld = new Dependency ( ) ; 
  Test begin scope                : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test end scope                  : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test class definition:          : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test struct definition:         : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test control definition:        : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test C# executable:             : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  executable     : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test begin scope                : int result = tld . Divide ( 10 , 0 ) ; 
  Test end scope                  : int result = tld . Divide ( 10 , 0 ) ; 
  Test preproc statement:         : int result = tld . Divide ( 10 , 0 ) ; 
  Test namespace definition:      : int result = tld . Divide ( 10 , 0 ) ; 
  Test class definition:          : int result = tld . Divide ( 10 , 0 ) ; 
  Test struct definition:         : int result = tld . Divide ( 10 , 0 ) ; 
  Test C# function definition:    : int result = tld . Divide ( 10 , 0 ) ; 
  Test control definition:        : int result = tld . Divide ( 10 , 0 ) ; 
  Test C# declaration:            : int result = tld . Divide ( 10 , 0 ) ; 
  Handle C# declaration:          : int result = tld . Divide ( 10 , 0 ) ; 
  Test begin scope                : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test end scope                  : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test preproc statement:         : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test namespace definition:      : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test class definition:          : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test struct definition:         : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test C# function definition:    : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test control definition:        : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test C# declaration:            : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test C# executable:             : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Handle C# executable:           : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test begin scope                : if ( result == 10 ) { 
  handle begin scope              : if ( result == 10 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( result == 10 ) { 
  Test preproc statement:         : if ( result == 10 ) { 
  control def    : if ( result == 10 ) { 
  Test namespace definition:      : if ( result == 10 ) { 
  executable     : return true ; 
  Test class definition:          : if ( result == 10 ) { 
--- stack size = 4 ---
  Test struct definition:         : if ( result == 10 ) { 
  Test C# function definition:    : if ( result == 10 ) { 
  Test control definition:        : if ( result == 10 ) { 
  Handle control definition:      : if ( result == 10 ) { 
  Test begin scope                : return true ; 
  Test end scope                  : return true ; 
  Test preproc statement:         : return true ; 
  Test namespace definition:      : return true ; 
  Test class definition:          : return true ; 
  Test struct definition:         : return true ; 
  Test C# function definition:    : return true ; 
  Test control definition:        : return true ; 
  Test C# declaration:            : return true ; 
  Test C# executable:             : return true ; 
  Handle C# executable:           : return true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  executable     : return false ; 
  Test control definition:        : else { 
--- stack size = 4 ---
  Handle control definition:      : else { 
  Test begin scope                : return false ; 
--- stack size = 3 ---
  Test end scope                  : return false ; 
--- stack size = 2 ---
  Test preproc statement:         : return false ; 
  Test namespace definition:      : return false ; 
--- stack size = 1 ---
  Test class definition:          : return false ; 
  Test struct definition:         : return false ; 
  Test C# function definition:    : return false ; 
  Test control definition:        : return false ; 
  Test C# declaration:            : return false ; 
  Test C# executable:             : return false ; 
  Handle C# executable:           : return false ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System . Reflection ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System . IO ; 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Reflection ; 
  Test end scope                  : using System . Reflection ; 
  Test preproc statement:         : using System . Reflection ; 
  Test namespace definition:      : using System . Reflection ; 
  Test class definition:          : using System . Reflection ; 
  Test struct definition:         : using System . Reflection ; 
  Test C# function definition:    : using System . Reflection ; 
  Test control definition:        : using System . Reflection ; 
  Test C# declaration:            : using System . Reflection ; 
  Handle C# declaration:          : using System . Reflection ; 
  Test begin scope                : using System . IO ; 
  Test end scope                  : using System . IO ; 
  Test preproc statement:         : using System . IO ; 
  Test namespace definition:      : using System . IO ; 
  Test class definition:          : using System . IO ; 
  Test struct definition:         : using System . IO ; 
  Test C# function definition:    : using System . IO ; 
  Test control definition:        : using System . IO ; 
  Test C# declaration:            : using System . IO ; 
  Handle C# declaration:          : using System . IO ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Test : IDriver { 
  handle begin scope              : public class Test : IDriver { 
--- stack size = 3 ---
  Test end scope                  : public class Test : IDriver { 
  Test preproc statement:         : public class Test : IDriver { 
  class def      : public class Test : IDriver { 
  Test namespace definition:      : public class Test : IDriver { 
  Test class definition:          : public class Test : IDriver { 
  Handle class definition:        : public class Test : IDriver { 
  Test begin scope                : public Test ( ) { 
  handle begin scope              : public Test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Test ( ) { 
  Test preproc statement:         : public Test ( ) { 
  Test namespace definition:      : public Test ( ) { 
  function def   : public Test ( ) { 
  Test class definition:          : public Test ( ) { 
  Test struct definition:         : public Test ( ) { 
  Test C# function definition:    : public Test ( ) { 
  Handle C# function definition:  : public Test ( ) { 
  Test begin scope                : Console . Write ( "\n  constructing instance of Test1" ) ; 
  executable     : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test end scope                  : Console . Write ( "\n  constructing instance of Test1" ) ; 
--- stack size = 3 ---
  Test preproc statement:         : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test namespace definition:      : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test class definition:          : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test struct definition:         : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test C# function definition:    : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test control definition:        : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test C# declaration:            : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test C# executable:             : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Handle C# executable:           : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual void display ( ) { 
  handle begin scope              : public virtual void display ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual void display ( ) { 
  Test preproc statement:         : public virtual void display ( ) { 
  function def   : public virtual void display ( ) { 
  Test namespace definition:      : public virtual void display ( ) { 
  Test class definition:          : public virtual void display ( ) { 
  Test struct definition:         : public virtual void display ( ) { 
  Test C# function definition:    : public virtual void display ( ) { 
  Handle C# function definition:  : public virtual void display ( ) { 
  executable     : Console . Write ( "\n  Test #1:" ) ; 
  Test begin scope                : Console . Write ( "\n  Test #1:" ) ; 
--- stack size = 3 ---
  Test end scope                  : Console . Write ( "\n  Test #1:" ) ; 
  Test preproc statement:         : Console . Write ( "\n  Test #1:" ) ; 
  Test namespace definition:      : Console . Write ( "\n  Test #1:" ) ; 
  Test class definition:          : Console . Write ( "\n  Test #1:" ) ; 
  Test struct definition:         : Console . Write ( "\n  Test #1:" ) ; 
  Test C# function definition:    : Console . Write ( "\n  Test #1:" ) ; 
  Test control definition:        : Console . Write ( "\n  Test #1:" ) ; 
  Test C# declaration:            : Console . Write ( "\n  Test #1:" ) ; 
  Test C# executable:             : Console . Write ( "\n  Test #1:" ) ; 
  Handle C# executable:           : Console . Write ( "\n  Test #1:" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private ITestCode getTested ( ) { 
  handle begin scope              : private ITestCode getTested ( ) { 
--- stack size = 4 ---
  Test end scope                  : private ITestCode getTested ( ) { 
  Test preproc statement:         : private ITestCode getTested ( ) { 
  function def   : private ITestCode getTested ( ) { 
  Test namespace definition:      : private ITestCode getTested ( ) { 
  Test class definition:          : private ITestCode getTested ( ) { 
  Test struct definition:         : private ITestCode getTested ( ) { 
  Test C# function definition:    : private ITestCode getTested ( ) { 
  Handle C# function definition:  : private ITestCode getTested ( ) { 
  data declar    : Tested tested = new Tested ( ) ; 
  Test begin scope                : Tested tested = new Tested ( ) ; 
  Test end scope                  : Tested tested = new Tested ( ) ; 
  executable     : return tested ; 
  Test preproc statement:         : Tested tested = new Tested ( ) ; 
--- stack size = 3 ---
  Test namespace definition:      : Tested tested = new Tested ( ) ; 
  Test class definition:          : Tested tested = new Tested ( ) ; 
  Test struct definition:         : Tested tested = new Tested ( ) ; 
  Test C# function definition:    : Tested tested = new Tested ( ) ; 
  Test control definition:        : Tested tested = new Tested ( ) ; 
  Test C# declaration:            : Tested tested = new Tested ( ) ; 
  Handle C# declaration:          : Tested tested = new Tested ( ) ; 
  Test begin scope                : return tested ; 
  Test end scope                  : return tested ; 
  Test preproc statement:         : return tested ; 
  Test namespace definition:      : return tested ; 
  Test class definition:          : return tested ; 
  Test struct definition:         : return tested ; 
  Test C# function definition:    : return tested ; 
  Test control definition:        : return tested ; 
  Test C# declaration:            : return tested ; 
  Test C# executable:             : return tested ; 
  Handle C# executable:           : return tested ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual bool test ( ) { 
  handle begin scope              : public virtual bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual bool test ( ) { 
  Test preproc statement:         : public virtual bool test ( ) { 
  Test namespace definition:      : public virtual bool test ( ) { 
  function def   : public virtual bool test ( ) { 
  Test class definition:          : public virtual bool test ( ) { 
  Test struct definition:         : public virtual bool test ( ) { 
  Test C# function definition:    : public virtual bool test ( ) { 
  Handle C# function definition:  : public virtual bool test ( ) { 
  Test begin scope                : ITestCode tested = getTested ( ) ; 
  Test end scope                  : ITestCode tested = getTested ( ) ; 
  data declar    : ITestCode tested = getTested ( ) ; 
  Test preproc statement:         : ITestCode tested = getTested ( ) ; 
  Test namespace definition:      : ITestCode tested = getTested ( ) ; 
  Test class definition:          : ITestCode tested = getTested ( ) ; 
  executable     : return tested . test ( ) ; 
  Test struct definition:         : ITestCode tested = getTested ( ) ; 
--- stack size = 3 ---
  Test C# function definition:    : ITestCode tested = getTested ( ) ; 
--- stack size = 2 ---
  Test control definition:        : ITestCode tested = getTested ( ) ; 
--- stack size = 1 ---
  Test C# declaration:            : ITestCode tested = getTested ( ) ; 
  Handle C# declaration:          : ITestCode tested = getTested ( ) ; 
  Test begin scope                : return tested . test ( ) ; 
  Test end scope                  : return tested . test ( ) ; 
  using declar   : using System ; 
  Test preproc statement:         : return tested . test ( ) ; 
  Test namespace definition:      : return tested . test ( ) ; 
  Test class definition:          : return tested . test ( ) ; 
  using declar   : using System . Reflection ; 
  Test struct definition:         : return tested . test ( ) ; 
  Test C# function definition:    : return tested . test ( ) ; 
  using declar   : using System . IO ; 
  Test control definition:        : return tested . test ( ) ; 
  Test C# declaration:            : return tested . test ( ) ; 
  Test C# executable:             : return tested . test ( ) ; 
  Handle C# executable:           : return tested . test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Reflection ; 
  Test end scope                  : using System . Reflection ; 
  Test preproc statement:         : using System . Reflection ; 
  Test namespace definition:      : using System . Reflection ; 
  Test class definition:          : using System . Reflection ; 
  Test struct definition:         : using System . Reflection ; 
  Test C# function definition:    : using System . Reflection ; 
  Test control definition:        : using System . Reflection ; 
  Test C# declaration:            : using System . Reflection ; 
  Handle C# declaration:          : using System . Reflection ; 
  Test begin scope                : using System . IO ; 
  Test end scope                  : using System . IO ; 
  Test preproc statement:         : using System . IO ; 
  Test namespace definition:      : using System . IO ; 
  Test class definition:          : using System . IO ; 
  Test struct definition:         : using System . IO ; 
  Test C# function definition:    : using System . IO ; 
  Test control definition:        : using System . IO ; 
  Test C# declaration:            : using System . IO ; 
  Handle C# declaration:          : using System . IO ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  namespace def  : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Test : IDriver { 
  handle begin scope              : public class Test : IDriver { 
--- stack size = 3 ---
  Test end scope                  : public class Test : IDriver { 
  Test preproc statement:         : public class Test : IDriver { 
  class def      : public class Test : IDriver { 
  Test namespace definition:      : public class Test : IDriver { 
  Test class definition:          : public class Test : IDriver { 
  Handle class definition:        : public class Test : IDriver { 
  Test begin scope                : public Test ( ) { 
  handle begin scope              : public Test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Test ( ) { 
  Test preproc statement:         : public Test ( ) { 
  Test namespace definition:      : public Test ( ) { 
  Test class definition:          : public Test ( ) { 
  function def   : public Test ( ) { 
  Test struct definition:         : public Test ( ) { 
  Test C# function definition:    : public Test ( ) { 
  Handle C# function definition:  : public Test ( ) { 
  Test begin scope                : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test end scope                  : Console . Write ( "\n  constructing instance of Test2" ) ; 
  executable     : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test preproc statement:         : Console . Write ( "\n  constructing instance of Test2" ) ; 
--- stack size = 3 ---
  Test namespace definition:      : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test class definition:          : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test struct definition:         : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test C# function definition:    : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test control definition:        : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test C# declaration:            : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test C# executable:             : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Handle C# executable:           : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual void display ( ) { 
  handle begin scope              : public virtual void display ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual void display ( ) { 
  Test preproc statement:         : public virtual void display ( ) { 
  Test namespace definition:      : public virtual void display ( ) { 
  function def   : public virtual void display ( ) { 
  Test class definition:          : public virtual void display ( ) { 
  Test struct definition:         : public virtual void display ( ) { 
  Test C# function definition:    : public virtual void display ( ) { 
  Handle C# function definition:  : public virtual void display ( ) { 
  Test begin scope                : Console . Write ( "\n  Test #2:" ) ; 
  Test end scope                  : Console . Write ( "\n  Test #2:" ) ; 
  Test preproc statement:         : Console . Write ( "\n  Test #2:" ) ; 
  executable     : Console . Write ( "\n  Test #2:" ) ; 
  Test namespace definition:      : Console . Write ( "\n  Test #2:" ) ; 
--- stack size = 3 ---
  Test class definition:          : Console . Write ( "\n  Test #2:" ) ; 
  Test struct definition:         : Console . Write ( "\n  Test #2:" ) ; 
  Test C# function definition:    : Console . Write ( "\n  Test #2:" ) ; 
  Test control definition:        : Console . Write ( "\n  Test #2:" ) ; 
  Test C# declaration:            : Console . Write ( "\n  Test #2:" ) ; 
  Test C# executable:             : Console . Write ( "\n  Test #2:" ) ; 
  Handle C# executable:           : Console . Write ( "\n  Test #2:" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private ITestCode getTested ( ) { 
  handle begin scope              : private ITestCode getTested ( ) { 
--- stack size = 4 ---
  Test end scope                  : private ITestCode getTested ( ) { 
  Test preproc statement:         : private ITestCode getTested ( ) { 
  Test namespace definition:      : private ITestCode getTested ( ) { 
  function def   : private ITestCode getTested ( ) { 
  Test class definition:          : private ITestCode getTested ( ) { 
  Test struct definition:         : private ITestCode getTested ( ) { 
  Test C# function definition:    : private ITestCode getTested ( ) { 
  Handle C# function definition:  : private ITestCode getTested ( ) { 
  data declar    : Tested tested = new Tested ( ) ; 
  Test begin scope                : Tested tested = new Tested ( ) ; 
  Test end scope                  : Tested tested = new Tested ( ) ; 
  Test preproc statement:         : Tested tested = new Tested ( ) ; 
  executable     : return tested ; 
  Test namespace definition:      : Tested tested = new Tested ( ) ; 
--- stack size = 3 ---
  Test class definition:          : Tested tested = new Tested ( ) ; 
  Test struct definition:         : Tested tested = new Tested ( ) ; 
  Test C# function definition:    : Tested tested = new Tested ( ) ; 
  Test control definition:        : Tested tested = new Tested ( ) ; 
  Test C# declaration:            : Tested tested = new Tested ( ) ; 
  Handle C# declaration:          : Tested tested = new Tested ( ) ; 
  Test begin scope                : return tested ; 
  Test end scope                  : return tested ; 
  Test preproc statement:         : return tested ; 
  Test namespace definition:      : return tested ; 
  Test class definition:          : return tested ; 
  Test struct definition:         : return tested ; 
  Test C# function definition:    : return tested ; 
  Test control definition:        : return tested ; 
  Test C# declaration:            : return tested ; 
  Test C# executable:             : return tested ; 
  Handle C# executable:           : return tested ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual bool test ( ) { 
  handle begin scope              : public virtual bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual bool test ( ) { 
  Test preproc statement:         : public virtual bool test ( ) { 
  Test namespace definition:      : public virtual bool test ( ) { 
  function def   : public virtual bool test ( ) { 
  Test class definition:          : public virtual bool test ( ) { 
  Test struct definition:         : public virtual bool test ( ) { 
  Test C# function definition:    : public virtual bool test ( ) { 
  Handle C# function definition:  : public virtual bool test ( ) { 
  Test begin scope                : ITestCode tested = getTested ( ) ; 
  Test end scope                  : ITestCode tested = getTested ( ) ; 
  Test preproc statement:         : ITestCode tested = getTested ( ) ; 
  data declar    : ITestCode tested = getTested ( ) ; 
  Test namespace definition:      : ITestCode tested = getTested ( ) ; 
  Test class definition:          : ITestCode tested = getTested ( ) ; 
  Test struct definition:         : ITestCode tested = getTested ( ) ; 
  Test C# function definition:    : ITestCode tested = getTested ( ) ; 
  executable     : return tested . test ( ) ; 
  Test control definition:        : ITestCode tested = getTested ( ) ; 
--- stack size = 3 ---
  Test C# declaration:            : ITestCode tested = getTested ( ) ; 
--- stack size = 2 ---
  Handle C# declaration:          : ITestCode tested = getTested ( ) ; 
--- stack size = 1 ---
  Test begin scope                : return tested . test ( ) ; 
  Test end scope                  : return tested . test ( ) ; 
  Test preproc statement:         : return tested . test ( ) ; 
  Test namespace definition:      : return tested . test ( ) ; 
  Test class definition:          : return tested . test ( ) ; 
  using declar   : using System ; 
  Test struct definition:         : return tested . test ( ) ; 
  Test C# function definition:    : return tested . test ( ) ; 
  using declar   : using System . Reflection ; 
  Test control definition:        : return tested . test ( ) ; 
  Test C# declaration:            : return tested . test ( ) ; 
  Test C# executable:             : return tested . test ( ) ; 
  using declar   : using System . IO ; 
  Handle C# executable:           : return tested . test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Reflection ; 
  Test end scope                  : using System . Reflection ; 
  Test preproc statement:         : using System . Reflection ; 
  Test namespace definition:      : using System . Reflection ; 
  Test class definition:          : using System . Reflection ; 
  Test struct definition:         : using System . Reflection ; 
  Test C# function definition:    : using System . Reflection ; 
  Test control definition:        : using System . Reflection ; 
  Test C# declaration:            : using System . Reflection ; 
  Handle C# declaration:          : using System . Reflection ; 
  Test begin scope                : using System . IO ; 
  Test end scope                  : using System . IO ; 
  Test preproc statement:         : using System . IO ; 
  Test namespace definition:      : using System . IO ; 
  Test class definition:          : using System . IO ; 
  Test struct definition:         : using System . IO ; 
  Test C# function definition:    : using System . IO ; 
  Test control definition:        : using System . IO ; 
  Test C# declaration:            : using System . IO ; 
  Handle C# declaration:          : using System . IO ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Test : IDriver { 
  handle begin scope              : public class Test : IDriver { 
--- stack size = 3 ---
  Test end scope                  : public class Test : IDriver { 
  Test preproc statement:         : public class Test : IDriver { 
  class def      : public class Test : IDriver { 
  Test namespace definition:      : public class Test : IDriver { 
  Test class definition:          : public class Test : IDriver { 
  Handle class definition:        : public class Test : IDriver { 
  Test begin scope                : public Test ( ) { 
  handle begin scope              : public Test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Test ( ) { 
  Test preproc statement:         : public Test ( ) { 
  Test namespace definition:      : public Test ( ) { 
  function def   : public Test ( ) { 
  Test class definition:          : public Test ( ) { 
  Test struct definition:         : public Test ( ) { 
  Test C# function definition:    : public Test ( ) { 
  Handle C# function definition:  : public Test ( ) { 
  Test begin scope                : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test end scope                  : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test preproc statement:         : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test namespace definition:      : Console . Write ( "\n  constructing instance of Test3" ) ; 
  executable     : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test class definition:          : Console . Write ( "\n  constructing instance of Test3" ) ; 
--- stack size = 3 ---
  Test struct definition:         : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test C# function definition:    : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test control definition:        : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test C# declaration:            : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test C# executable:             : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Handle C# executable:           : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual void display ( ) { 
  handle begin scope              : public virtual void display ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual void display ( ) { 
  Test preproc statement:         : public virtual void display ( ) { 
  Test namespace definition:      : public virtual void display ( ) { 
  function def   : public virtual void display ( ) { 
  Test class definition:          : public virtual void display ( ) { 
  Test struct definition:         : public virtual void display ( ) { 
  Test C# function definition:    : public virtual void display ( ) { 
  Handle C# function definition:  : public virtual void display ( ) { 
  Test begin scope                : Console . Write ( "\n  Test #3:" ) ; 
  Test end scope                  : Console . Write ( "\n  Test #3:" ) ; 
  Test preproc statement:         : Console . Write ( "\n  Test #3:" ) ; 
  Test namespace definition:      : Console . Write ( "\n  Test #3:" ) ; 
  Test class definition:          : Console . Write ( "\n  Test #3:" ) ; 
  executable     : Console . Write ( "\n  Test #3:" ) ; 
  Test struct definition:         : Console . Write ( "\n  Test #3:" ) ; 
--- stack size = 3 ---
  Test C# function definition:    : Console . Write ( "\n  Test #3:" ) ; 
  Test control definition:        : Console . Write ( "\n  Test #3:" ) ; 
  Test C# declaration:            : Console . Write ( "\n  Test #3:" ) ; 
  Test C# executable:             : Console . Write ( "\n  Test #3:" ) ; 
  Handle C# executable:           : Console . Write ( "\n  Test #3:" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private ITestCode getTested ( ) { 
  handle begin scope              : private ITestCode getTested ( ) { 
--- stack size = 4 ---
  Test end scope                  : private ITestCode getTested ( ) { 
  Test preproc statement:         : private ITestCode getTested ( ) { 
  function def   : private ITestCode getTested ( ) { 
  Test namespace definition:      : private ITestCode getTested ( ) { 
  Test class definition:          : private ITestCode getTested ( ) { 
  Test struct definition:         : private ITestCode getTested ( ) { 
  Test C# function definition:    : private ITestCode getTested ( ) { 
  data declar    : Tested tested = new Tested ( ) ; 
  Handle C# function definition:  : private ITestCode getTested ( ) { 
  Test begin scope                : Tested tested = new Tested ( ) ; 
  executable     : return tested ; 
  Test end scope                  : Tested tested = new Tested ( ) ; 
--- stack size = 3 ---
  Test preproc statement:         : Tested tested = new Tested ( ) ; 
  Test namespace definition:      : Tested tested = new Tested ( ) ; 
  Test class definition:          : Tested tested = new Tested ( ) ; 
  Test struct definition:         : Tested tested = new Tested ( ) ; 
  Test C# function definition:    : Tested tested = new Tested ( ) ; 
  Test control definition:        : Tested tested = new Tested ( ) ; 
  Test C# declaration:            : Tested tested = new Tested ( ) ; 
  Handle C# declaration:          : Tested tested = new Tested ( ) ; 
  Test begin scope                : return tested ; 
  Test end scope                  : return tested ; 
  Test preproc statement:         : return tested ; 
  Test namespace definition:      : return tested ; 
  Test class definition:          : return tested ; 
  Test struct definition:         : return tested ; 
  Test C# function definition:    : return tested ; 
  Test control definition:        : return tested ; 
  Test C# declaration:            : return tested ; 
  Test C# executable:             : return tested ; 
  Handle C# executable:           : return tested ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual bool test ( ) { 
  handle begin scope              : public virtual bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual bool test ( ) { 
  Test preproc statement:         : public virtual bool test ( ) { 
  function def   : public virtual bool test ( ) { 
  Test namespace definition:      : public virtual bool test ( ) { 
  Test class definition:          : public virtual bool test ( ) { 
  Test struct definition:         : public virtual bool test ( ) { 
  Test C# function definition:    : public virtual bool test ( ) { 
  Handle C# function definition:  : public virtual bool test ( ) { 
  Test begin scope                : ITestCode tested = getTested ( ) ; 
  Test end scope                  : ITestCode tested = getTested ( ) ; 
  Test preproc statement:         : ITestCode tested = getTested ( ) ; 
  Test namespace definition:      : ITestCode tested = getTested ( ) ; 
  Test class definition:          : ITestCode tested = getTested ( ) ; 
  data declar    : ITestCode tested = getTested ( ) ; 
  Test struct definition:         : ITestCode tested = getTested ( ) ; 
  Test C# function definition:    : ITestCode tested = getTested ( ) ; 
  Test control definition:        : ITestCode tested = getTested ( ) ; 
  Test C# declaration:            : ITestCode tested = getTested ( ) ; 
  executable     : return tested . test ( ) ; 
  Handle C# declaration:          : ITestCode tested = getTested ( ) ; 
--- stack size = 3 ---
  Test begin scope                : return tested . test ( ) ; 
--- stack size = 2 ---
  Test end scope                  : return tested . test ( ) ; 
--- stack size = 1 ---
  Test preproc statement:         : return tested . test ( ) ; 
  Test namespace definition:      : return tested . test ( ) ; 
  Test class definition:          : return tested . test ( ) ; 
  Test struct definition:         : return tested . test ( ) ; 
  Test C# function definition:    : return tested . test ( ) ; 
  Test control definition:        : return tested . test ( ) ; 
  Test C# declaration:            : return tested . test ( ) ; 
  using declar   : using System . Reflection ; 
  Test C# executable:             : return tested . test ( ) ; 
  Handle C# executable:           : return tested . test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  using declar   : using System . Runtime . CompilerServices ; 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System . Runtime . InteropServices ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System . Reflection ; 
  Test end scope                  : using System . Reflection ; 
  Test preproc statement:         : using System . Reflection ; 
  Test namespace definition:      : using System . Reflection ; 
  Test class definition:          : using System . Reflection ; 
  Test struct definition:         : using System . Reflection ; 
  Test C# function definition:    : using System . Reflection ; 
  Test control definition:        : using System . Reflection ; 
  Test C# declaration:            : using System . Reflection ; 
  Handle C# declaration:          : using System . Reflection ; 
  Test begin scope                : using System . Runtime . CompilerServices ; 
  Test end scope                  : using System . Runtime . CompilerServices ; 
  Test preproc statement:         : using System . Runtime . CompilerServices ; 
  Test namespace definition:      : using System . Runtime . CompilerServices ; 
  Test class definition:          : using System . Runtime . CompilerServices ; 
  Test struct definition:         : using System . Runtime . CompilerServices ; 
  Test C# function definition:    : using System . Runtime . CompilerServices ; 
  Test control definition:        : using System . Runtime . CompilerServices ; 
  Test C# declaration:            : using System . Runtime . CompilerServices ; 
  Handle C# declaration:          : using System . Runtime . CompilerServices ; 
  Test begin scope                : using System . Runtime . InteropServices ; 
  Test end scope                  : using System . Runtime . InteropServices ; 
  Test preproc statement:         : using System . Runtime . InteropServices ; 
  Test namespace definition:      : using System . Runtime . InteropServices ; 
  Test class definition:          : using System . Runtime . InteropServices ; 
  Test struct definition:         : using System . Runtime . InteropServices ; 
  Test C# function definition:    : using System . Runtime . InteropServices ; 
  Test control definition:        : using System . Runtime . InteropServices ; 
  Test C# declaration:            : using System . Runtime . InteropServices ; 
  Handle C# declaration:          : using System . Runtime . InteropServices ; 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  using declar   : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  using declar   : using System . Collections . Generic ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  using declar   : using System . Linq ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Collections . Generic ; 
  using declar   : using System . Text ; 
  Test end scope                  : using System . Collections . Generic ; 
  Test preproc statement:         : using System . Collections . Generic ; 
  using declar   : using System . Threading . Tasks ; 
  Test namespace definition:      : using System . Collections . Generic ; 
  Test class definition:          : using System . Collections . Generic ; 
  using declar   : using System . ServiceModel ; 
  Test struct definition:         : using System . Collections . Generic ; 
  Test C# function definition:    : using System . Collections . Generic ; 
  using declar   : using System . Runtime . Serialization ; 
  Test control definition:        : using System . Collections . Generic ; 
  Test C# declaration:            : using System . Collections . Generic ; 
  using declar   : using System . Threading ; 
  Handle C# declaration:          : using System . Collections . Generic ; 
  Test begin scope                : using System . Linq ; 
  Test end scope                  : using System . Linq ; 
  Test preproc statement:         : using System . Linq ; 
  Test namespace definition:      : using System . Linq ; 
  Test class definition:          : using System . Linq ; 
  Test struct definition:         : using System . Linq ; 
  Test C# function definition:    : using System . Linq ; 
  Test control definition:        : using System . Linq ; 
  Test C# declaration:            : using System . Linq ; 
  Handle C# declaration:          : using System . Linq ; 
  Test begin scope                : using System . Text ; 
  Test end scope                  : using System . Text ; 
  Test preproc statement:         : using System . Text ; 
  Test namespace definition:      : using System . Text ; 
  Test class definition:          : using System . Text ; 
  Test struct definition:         : using System . Text ; 
  Test C# function definition:    : using System . Text ; 
  Test control definition:        : using System . Text ; 
  Test C# declaration:            : using System . Text ; 
  Handle C# declaration:          : using System . Text ; 
  Test begin scope                : using System . Threading . Tasks ; 
  Test end scope                  : using System . Threading . Tasks ; 
  Test preproc statement:         : using System . Threading . Tasks ; 
  Test namespace definition:      : using System . Threading . Tasks ; 
  Test class definition:          : using System . Threading . Tasks ; 
  Test struct definition:         : using System . Threading . Tasks ; 
  Test C# function definition:    : using System . Threading . Tasks ; 
  Test control definition:        : using System . Threading . Tasks ; 
  Test C# declaration:            : using System . Threading . Tasks ; 
  Handle C# declaration:          : using System . Threading . Tasks ; 
  Test begin scope                : using System . ServiceModel ; 
  Test end scope                  : using System . ServiceModel ; 
  Test preproc statement:         : using System . ServiceModel ; 
  Test namespace definition:      : using System . ServiceModel ; 
  Test class definition:          : using System . ServiceModel ; 
  Test struct definition:         : using System . ServiceModel ; 
  Test C# function definition:    : using System . ServiceModel ; 
  Test control definition:        : using System . ServiceModel ; 
  Test C# declaration:            : using System . ServiceModel ; 
  Handle C# declaration:          : using System . ServiceModel ; 
  Test begin scope                : using System . Runtime . Serialization ; 
  Test end scope                  : using System . Runtime . Serialization ; 
  Test preproc statement:         : using System . Runtime . Serialization ; 
  Test namespace definition:      : using System . Runtime . Serialization ; 
  Test class definition:          : using System . Runtime . Serialization ; 
  Test struct definition:         : using System . Runtime . Serialization ; 
  Test C# function definition:    : using System . Runtime . Serialization ; 
  Test control definition:        : using System . Runtime . Serialization ; 
  Test C# declaration:            : using System . Runtime . Serialization ; 
  Handle C# declaration:          : using System . Runtime . Serialization ; 
  Test begin scope                : using System . Threading ; 
  Test end scope                  : using System . Threading ; 
  Test preproc statement:         : using System . Threading ; 
  Test namespace definition:      : using System . Threading ; 
  Test class definition:          : using System . Threading ; 
  Test struct definition:         : using System . Threading ; 
  Test C# function definition:    : using System . Threading ; 
  Test control definition:        : using System . Threading ; 
  Test C# declaration:            : using System . Threading ; 
  Handle C# declaration:          : using System . Threading ; 
  Test begin scope                : namespace PluggableRepository { 
  handle begin scope              : namespace PluggableRepository { 
--- stack size = 2 ---
  Test end scope                  : namespace PluggableRepository { 
  namespace def  : namespace PluggableRepository { 
  Test preproc statement:         : namespace PluggableRepository { 
  Test namespace definition:      : namespace PluggableRepository { 
  using declar   : using IP = String ; 
  Handle namespace definition:    : namespace PluggableRepository { 
  Test begin scope                : using IP = String ; 
  Test end scope                  : using IP = String ; 
  using declar   : using Port = Int32 ; 
  Test preproc statement:         : using IP = String ; 
  Test namespace definition:      : using IP = String ; 
  Test class definition:          : using IP = String ; 
  Test struct definition:         : using IP = String ; 
  using declar   : using Command = String ; 
  Test C# function definition:    : using IP = String ; 
  Test control definition:        : using IP = String ; 
  Test C# declaration:            : using IP = String ; 
  Handle C# declaration:          : using IP = String ; 
  using declar   : using Argument = String ; 
  Test begin scope                : using Port = Int32 ; 
  Test end scope                  : using Port = Int32 ; 
  Test preproc statement:         : using Port = Int32 ; 
  Test namespace definition:      : using Port = Int32 ; 
  using declar   : using ErrorMessage = String ; 
  Test class definition:          : using Port = Int32 ; 
  Test struct definition:         : using Port = Int32 ; 
  Test C# function definition:    : using Port = Int32 ; 
  Test control definition:        : using Port = Int32 ; 
  Test C# declaration:            : using Port = Int32 ; 
  Handle C# declaration:          : using Port = Int32 ; 
  Test begin scope                : using Command = String ; 
  Test end scope                  : using Command = String ; 
  Test preproc statement:         : using Command = String ; 
  Test namespace definition:      : using Command = String ; 
  Test class definition:          : using Command = String ; 
  Test struct definition:         : using Command = String ; 
  Test C# function definition:    : using Command = String ; 
  Test control definition:        : using Command = String ; 
  Test C# declaration:            : using Command = String ; 
  Handle C# declaration:          : using Command = String ; 
  Test begin scope                : using Argument = String ; 
  Test end scope                  : using Argument = String ; 
  Test preproc statement:         : using Argument = String ; 
  Test namespace definition:      : using Argument = String ; 
  Test class definition:          : using Argument = String ; 
  Test struct definition:         : using Argument = String ; 
  Test C# function definition:    : using Argument = String ; 
  Test control definition:        : using Argument = String ; 
  Test C# declaration:            : using Argument = String ; 
  Handle C# declaration:          : using Argument = String ; 
  Test begin scope                : using ErrorMessage = String ; 
  Test end scope                  : using ErrorMessage = String ; 
  Test preproc statement:         : using ErrorMessage = String ; 
  Test namespace definition:      : using ErrorMessage = String ; 
  Test class definition:          : using ErrorMessage = String ; 
  Test struct definition:         : using ErrorMessage = String ; 
  Test C# function definition:    : using ErrorMessage = String ; 
  Test control definition:        : using ErrorMessage = String ; 
  Test C# declaration:            : using ErrorMessage = String ; 
  Handle C# declaration:          : using ErrorMessage = String ; 
  Test begin scope                : public struct ServiceClientEnvironment { 
  handle begin scope              : public struct ServiceClientEnvironment { 
--- stack size = 3 ---
  Test end scope                  : public struct ServiceClientEnvironment { 
  Test preproc statement:         : public struct ServiceClientEnvironment { 
  struct def     : public struct ServiceClientEnvironment { 
  Test namespace definition:      : public struct ServiceClientEnvironment { 
  Test class definition:          : public struct ServiceClientEnvironment { 
  Test struct definition:         : public struct ServiceClientEnvironment { 
  data declar    : public const string fileStorage = "../../../ClientFileStore" ; 
  Handle struct definition:       : public struct ServiceClientEnvironment { 
  Test begin scope                : public const string fileStorage = "../../../ClientFileStore" ; 
  Test end scope                  : public const string fileStorage = "../../../ClientFileStore" ; 
  data declar    : public const long blockSize = 1024 ; 
  Test preproc statement:         : public const string fileStorage = "../../../ClientFileStore" ; 
  Test namespace definition:      : public const string fileStorage = "../../../ClientFileStore" ; 
  Test class definition:          : public const string fileStorage = "../../../ClientFileStore" ; 
  Test struct definition:         : public const string fileStorage = "../../../ClientFileStore" ; 
  Test C# function definition:    : public const string fileStorage = "../../../ClientFileStore" ; 
  Test control definition:        : public const string fileStorage = "../../../ClientFileStore" ; 
  Test C# declaration:            : public const string fileStorage = "../../../ClientFileStore" ; 
  Handle C# declaration:          : public const string fileStorage = "../../../ClientFileStore" ; 
  Test begin scope                : public const long blockSize = 1024 ; 
  Test end scope                  : public const long blockSize = 1024 ; 
  Test preproc statement:         : public const long blockSize = 1024 ; 
  Test namespace definition:      : public const long blockSize = 1024 ; 
  Test class definition:          : public const long blockSize = 1024 ; 
  Test struct definition:         : public const long blockSize = 1024 ; 
  Test C# function definition:    : public const long blockSize = 1024 ; 
  Test control definition:        : public const long blockSize = 1024 ; 
  Test C# declaration:            : public const long blockSize = 1024 ; 
  Handle C# declaration:          : public const long blockSize = 1024 ; 
  Test begin scope                : public static string baseAddress { 
  handle begin scope              : public static string baseAddress { 
--- stack size = 4 ---
  Test end scope                  : public static string baseAddress { 
  Test preproc statement:         : public static string baseAddress { 
  Test namespace definition:      : public static string baseAddress { 
  Test class definition:          : public static string baseAddress { 
  default:       : public static string baseAddress { 
  Test struct definition:         : public static string baseAddress { 
  default:       : get ; 
  Test C# function definition:    : public static string baseAddress { 
  Test control definition:        : public static string baseAddress { 
  default:       : set ; 
  Test C# declaration:            : public static string baseAddress { 
--- stack size = 3 ---
  Test C# executable:             : public static string baseAddress { 
--- stack size = 2 ---
  Test default:                   : public static string baseAddress { 
  Handle default:                 : public static string baseAddress { 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public struct ServiceEnvironment { 
  handle begin scope              : public struct ServiceEnvironment { 
--- stack size = 3 ---
  Test end scope                  : public struct ServiceEnvironment { 
  Test preproc statement:         : public struct ServiceEnvironment { 
  struct def     : public struct ServiceEnvironment { 
  Test namespace definition:      : public struct ServiceEnvironment { 
  Test class definition:          : public struct ServiceEnvironment { 
  Test struct definition:         : public struct ServiceEnvironment { 
  Handle struct definition:       : public struct ServiceEnvironment { 
  data declar    : public const string fileStorage = "../../../ServiceFileStore" ; 
  Test begin scope                : public const string fileStorage = "../../../ServiceFileStore" ; 
  Test end scope                  : public const string fileStorage = "../../../ServiceFileStore" ; 
  Test preproc statement:         : public const string fileStorage = "../../../ServiceFileStore" ; 
  Test namespace definition:      : public const string fileStorage = "../../../ServiceFileStore" ; 
  Test class definition:          : public const string fileStorage = "../../../ServiceFileStore" ; 
  Test struct definition:         : public const string fileStorage = "../../../ServiceFileStore" ; 
  Test C# function definition:    : public const string fileStorage = "../../../ServiceFileStore" ; 
  Test control definition:        : public const string fileStorage = "../../../ServiceFileStore" ; 
  Test C# declaration:            : public const string fileStorage = "../../../ServiceFileStore" ; 
  Handle C# declaration:          : public const string fileStorage = "../../../ServiceFileStore" ; 
  Test begin scope                : public static string baseAddress { 
  handle begin scope              : public static string baseAddress { 
--- stack size = 4 ---
  Test end scope                  : public static string baseAddress { 
  Test preproc statement:         : public static string baseAddress { 
  Test namespace definition:      : public static string baseAddress { 
  default:       : public static string baseAddress { 
  Test class definition:          : public static string baseAddress { 
  Test struct definition:         : public static string baseAddress { 
  Test C# function definition:    : public static string baseAddress { 
  default:       : get ; 
  Test control definition:        : public static string baseAddress { 
  Test C# declaration:            : public static string baseAddress { 
  Test C# executable:             : public static string baseAddress { 
  default:       : set ; 
  Test default:                   : public static string baseAddress { 
--- stack size = 3 ---
  Handle default:                 : public static string baseAddress { 
--- stack size = 2 ---
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    [ ServiceContract ( Namespace = "IPluggableRepository" ) ] public interface IPluggableComm { 
  handle begin scope              : 
    [ ServiceContract ( Namespace = "IPluggableRepository" ) ] public interface IPluggableComm { 
--- stack size = 3 ---
  Test end scope                  : 
    [ ServiceContract ( Namespace = "IPluggableRepository" ) ] public interface IPluggableComm { 
  Test preproc statement:         : 
    [ ServiceContract ( Namespace = "IPluggableRepository" ) ] public interface IPluggableComm { 
  Test namespace definition:      : 
    [ ServiceContract ( Namespace = "IPluggableRepository" ) ] public interface IPluggableComm { 
  interface def  : 
    [ ServiceContract ( Namespace = "IPluggableRepository" ) ] public interface IPluggableComm { 
  Test class definition:          : 
    [ ServiceContract ( Namespace = "IPluggableRepository" ) ] public interface IPluggableComm { 
  Handle class definition:        : 
    [ ServiceContract ( Namespace = "IPluggableRepository" ) ] public interface IPluggableComm { 
  Test begin scope                : [ OperationContract ] void postMessage ( CommMessage msg ) ; 
  Test end scope                  : [ OperationContract ] void postMessage ( CommMessage msg ) ; 
  Test preproc statement:         : [ OperationContract ] void postMessage ( CommMessage msg ) ; 
  Test namespace definition:      : [ OperationContract ] void postMessage ( CommMessage msg ) ; 
  Test class definition:          : [ OperationContract ] void postMessage ( CommMessage msg ) ; 
  Test struct definition:         : [ OperationContract ] void postMessage ( CommMessage msg ) ; 
  Test C# function definition:    : [ OperationContract ] void postMessage ( CommMessage msg ) ; 
  Test control definition:        : [ OperationContract ] void postMessage ( CommMessage msg ) ; 
  function declar: [ OperationContract ] void postMessage ( CommMessage msg ) ; 
  Test C# declaration:            : [ OperationContract ] void postMessage ( CommMessage msg ) ; 
  Handle C# declaration:          : [ OperationContract ] void postMessage ( CommMessage msg ) ; 
  Test begin scope                : CommMessage getMessage ( ) ; 
  Test end scope                  : CommMessage getMessage ( ) ; 
  function declar: CommMessage getMessage ( ) ; 
  Test preproc statement:         : CommMessage getMessage ( ) ; 
  Test namespace definition:      : CommMessage getMessage ( ) ; 
  Test class definition:          : CommMessage getMessage ( ) ; 
  Test struct definition:         : CommMessage getMessage ( ) ; 
  Test C# function definition:    : CommMessage getMessage ( ) ; 
  Test control definition:        : CommMessage getMessage ( ) ; 
  Test C# declaration:            : CommMessage getMessage ( ) ; 
  Handle C# declaration:          : CommMessage getMessage ( ) ; 
  Test begin scope                : [ OperationContract ] bool openFileForWrite ( string name ) ; 
  function declar: [ OperationContract ] bool openFileForWrite ( string name ) ; 
  Test end scope                  : [ OperationContract ] bool openFileForWrite ( string name ) ; 
  Test preproc statement:         : [ OperationContract ] bool openFileForWrite ( string name ) ; 
  Test namespace definition:      : [ OperationContract ] bool openFileForWrite ( string name ) ; 
  Test class definition:          : [ OperationContract ] bool openFileForWrite ( string name ) ; 
  Test struct definition:         : [ OperationContract ] bool openFileForWrite ( string name ) ; 
  Test C# function definition:    : [ OperationContract ] bool openFileForWrite ( string name ) ; 
  Test control definition:        : [ OperationContract ] bool openFileForWrite ( string name ) ; 
  function declar: [ OperationContract ] bool writeFileBlock ( byte [ ] block ) ; 
  Test C# declaration:            : [ OperationContract ] bool openFileForWrite ( string name ) ; 
  Handle C# declaration:          : [ OperationContract ] bool openFileForWrite ( string name ) ; 
  Test begin scope                : [ OperationContract ] bool writeFileBlock ( byte [ ] block ) ; 
  Test end scope                  : [ OperationContract ] bool writeFileBlock ( byte [ ] block ) ; 
  Test preproc statement:         : [ OperationContract ] bool writeFileBlock ( byte [ ] block ) ; 
  Test namespace definition:      : [ OperationContract ] bool writeFileBlock ( byte [ ] block ) ; 
  Test class definition:          : [ OperationContract ] bool writeFileBlock ( byte [ ] block ) ; 
  Test struct definition:         : [ OperationContract ] bool writeFileBlock ( byte [ ] block ) ; 
  function declar: [ OperationContract ] void closeFile ( ) ; 
  Test C# function definition:    : [ OperationContract ] bool writeFileBlock ( byte [ ] block ) ; 
--- stack size = 2 ---
  Test control definition:        : [ OperationContract ] bool writeFileBlock ( byte [ ] block ) ; 
  Test C# declaration:            : [ OperationContract ] bool writeFileBlock ( byte [ ] block ) ; 
  Handle C# declaration:          : [ OperationContract ] bool writeFileBlock ( byte [ ] block ) ; 
  Test begin scope                : [ OperationContract ] void closeFile ( ) ; 
  Test end scope                  : [ OperationContract ] void closeFile ( ) ; 
  Test preproc statement:         : [ OperationContract ] void closeFile ( ) ; 
  Test namespace definition:      : [ OperationContract ] void closeFile ( ) ; 
  Test class definition:          : [ OperationContract ] void closeFile ( ) ; 
  Test struct definition:         : [ OperationContract ] void closeFile ( ) ; 
  Test C# function definition:    : [ OperationContract ] void closeFile ( ) ; 
  Test control definition:        : [ OperationContract ] void closeFile ( ) ; 
  Test C# declaration:            : [ OperationContract ] void closeFile ( ) ; 
  Handle C# declaration:          : [ OperationContract ] void closeFile ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : [ DataContract ] public class CommMessage { 
  handle begin scope              : [ DataContract ] public class CommMessage { 
--- stack size = 3 ---
  Test end scope                  : [ DataContract ] public class CommMessage { 
  class def      : [ DataContract ] public class CommMessage { 
  Test preproc statement:         : [ DataContract ] public class CommMessage { 
  Test namespace definition:      : [ DataContract ] public class CommMessage { 
  Test class definition:          : [ DataContract ] public class CommMessage { 
  Handle class definition:        : [ DataContract ] public class CommMessage { 
  Test begin scope                : public enum MessageType { 
  handle begin scope              : public enum MessageType { 
--- stack size = 4 ---
  Test end scope                  : public enum MessageType { 
  Test preproc statement:         : public enum MessageType { 
  Test namespace definition:      : public enum MessageType { 
  Test class definition:          : public enum MessageType { 
  Test struct definition:         : public enum MessageType { 
  default:       : public enum MessageType { 
  Test C# function definition:    : public enum MessageType { 
  Test control definition:        : public enum MessageType { 
  Test C# declaration:            : public enum MessageType { 
  Test C# executable:             : public enum MessageType { 
  Test default:                   : public enum MessageType { 
  Handle default:                 : public enum MessageType { 
  Test begin scope                : 
    [ EnumMember ] connect , [ EnumMember ] request , [ EnumMember ] reply , [ EnumMember ] closeSender , [ EnumMember ] closeReceiver } 
--- stack size = 3 ---
  Test end scope                  : 
    [ EnumMember ] connect , [ EnumMember ] request , [ EnumMember ] reply , [ EnumMember ] closeSender , [ EnumMember ] closeReceiver } 
  Handle end scope                : 
    [ EnumMember ] connect , [ EnumMember ] request , [ EnumMember ] reply , [ EnumMember ] closeSender , [ EnumMember ] closeReceiver } 
  Test begin scope                : public CommMessage ( MessageType mt ) { 
  handle begin scope              : public CommMessage ( MessageType mt ) { 
--- stack size = 4 ---
  Test end scope                  : public CommMessage ( MessageType mt ) { 
  Test preproc statement:         : public CommMessage ( MessageType mt ) { 
  function def   : public CommMessage ( MessageType mt ) { 
  Test namespace definition:      : public CommMessage ( MessageType mt ) { 
  Test class definition:          : public CommMessage ( MessageType mt ) { 
  Test struct definition:         : public CommMessage ( MessageType mt ) { 
  executable     : type = mt ; 
  Test C# function definition:    : public CommMessage ( MessageType mt ) { 
--- stack size = 3 ---
  Handle C# function definition:  : public CommMessage ( MessageType mt ) { 
  Test begin scope                : type = mt ; 
  Test end scope                  : type = mt ; 
  Test preproc statement:         : type = mt ; 
  Test namespace definition:      : type = mt ; 
  Test class definition:          : type = mt ; 
  Test struct definition:         : type = mt ; 
  Test C# function definition:    : type = mt ; 
  Test control definition:        : type = mt ; 
  Test C# declaration:            : type = mt ; 
  Test C# executable:             : type = mt ; 
  Handle C# executable:           : type = mt ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : [ DataMember ] public MessageType type { 
  handle begin scope              : [ DataMember ] public MessageType type { 
--- stack size = 4 ---
  Test end scope                  : [ DataMember ] public MessageType type { 
  Test preproc statement:         : [ DataMember ] public MessageType type { 
  Test namespace definition:      : [ DataMember ] public MessageType type { 
  Test class definition:          : [ DataMember ] public MessageType type { 
  default:       : [ DataMember ] public MessageType type { 
  Test struct definition:         : [ DataMember ] public MessageType type { 
  Test C# function definition:    : [ DataMember ] public MessageType type { 
  default:       : get ; 
  Test control definition:        : [ DataMember ] public MessageType type { 
  Test C# declaration:            : [ DataMember ] public MessageType type { 
  Test C# executable:             : [ DataMember ] public MessageType type { 
  default:       : set ; 
  Test default:                   : [ DataMember ] public MessageType type { 
--- stack size = 3 ---
  Handle default:                 : [ DataMember ] public MessageType type { 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  executable     : = MessageType . connect ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = MessageType . connect ; 
  Test end scope                  : = MessageType . connect ; 
  Test preproc statement:         : = MessageType . connect ; 
  Test namespace definition:      : = MessageType . connect ; 
  Test class definition:          : = MessageType . connect ; 
  Test struct definition:         : = MessageType . connect ; 
  Test C# function definition:    : = MessageType . connect ; 
  Test control definition:        : = MessageType . connect ; 
  Test C# declaration:            : = MessageType . connect ; 
  Test C# executable:             : = MessageType . connect ; 
  Handle C# executable:           : = MessageType . connect ; 
  Test begin scope                : [ DataMember ] public string to { 
  handle begin scope              : [ DataMember ] public string to { 
--- stack size = 4 ---
  Test end scope                  : [ DataMember ] public string to { 
  Test preproc statement:         : [ DataMember ] public string to { 
  Test namespace definition:      : [ DataMember ] public string to { 
  Test class definition:          : [ DataMember ] public string to { 
  Test struct definition:         : [ DataMember ] public string to { 
  default:       : [ DataMember ] public string to { 
  Test C# function definition:    : [ DataMember ] public string to { 
  Test control definition:        : [ DataMember ] public string to { 
  Test C# declaration:            : [ DataMember ] public string to { 
  Test C# executable:             : [ DataMember ] public string to { 
  default:       : get ; 
  Test default:                   : [ DataMember ] public string to { 
  Handle default:                 : [ DataMember ] public string to { 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  default:       : set ; 
  Test preproc statement:         : get ; 
--- stack size = 3 ---
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : [ DataMember ] public string from { 
  handle begin scope              : [ DataMember ] public string from { 
--- stack size = 4 ---
  Test end scope                  : [ DataMember ] public string from { 
  Test preproc statement:         : [ DataMember ] public string from { 
  Test namespace definition:      : [ DataMember ] public string from { 
  Test class definition:          : [ DataMember ] public string from { 
  default:       : [ DataMember ] public string from { 
  Test struct definition:         : [ DataMember ] public string from { 
  Test C# function definition:    : [ DataMember ] public string from { 
  Test control definition:        : [ DataMember ] public string from { 
  Test C# declaration:            : [ DataMember ] public string from { 
  default:       : get ; 
  Test C# executable:             : [ DataMember ] public string from { 
  Test default:                   : [ DataMember ] public string from { 
  default:       : set ; 
  Handle default:                 : [ DataMember ] public string from { 
--- stack size = 3 ---
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : [ DataMember ] public string author { 
  handle begin scope              : [ DataMember ] public string author { 
--- stack size = 4 ---
  Test end scope                  : [ DataMember ] public string author { 
  Test preproc statement:         : [ DataMember ] public string author { 
  Test namespace definition:      : [ DataMember ] public string author { 
  Test class definition:          : [ DataMember ] public string author { 
  default:       : [ DataMember ] public string author { 
  Test struct definition:         : [ DataMember ] public string author { 
  Test C# function definition:    : [ DataMember ] public string author { 
  default:       : get ; 
  Test control definition:        : [ DataMember ] public string author { 
  Test C# declaration:            : [ DataMember ] public string author { 
  Test C# executable:             : [ DataMember ] public string author { 
  Test default:                   : [ DataMember ] public string author { 
  default:       : set ; 
  Handle default:                 : [ DataMember ] public string author { 
--- stack size = 3 ---
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : [ DataMember ] public Command command { 
  handle begin scope              : [ DataMember ] public Command command { 
--- stack size = 4 ---
  Test end scope                  : [ DataMember ] public Command command { 
  Test preproc statement:         : [ DataMember ] public Command command { 
  Test namespace definition:      : [ DataMember ] public Command command { 
  Test class definition:          : [ DataMember ] public Command command { 
  default:       : [ DataMember ] public Command command { 
  Test struct definition:         : [ DataMember ] public Command command { 
  Test C# function definition:    : [ DataMember ] public Command command { 
  Test control definition:        : [ DataMember ] public Command command { 
  Test C# declaration:            : [ DataMember ] public Command command { 
  default:       : get ; 
  Test C# executable:             : [ DataMember ] public Command command { 
  Test default:                   : [ DataMember ] public Command command { 
  Handle default:                 : [ DataMember ] public Command command { 
  default:       : set ; 
  Test begin scope                : get ; 
--- stack size = 3 ---
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : [ DataMember ] public List < Argument > arguments { 
  handle begin scope              : [ DataMember ] public List < Argument > arguments { 
--- stack size = 4 ---
  Test end scope                  : [ DataMember ] public List < Argument > arguments { 
  Test preproc statement:         : [ DataMember ] public List < Argument > arguments { 
  Test namespace definition:      : [ DataMember ] public List < Argument > arguments { 
  Test class definition:          : [ DataMember ] public List < Argument > arguments { 
  Test struct definition:         : [ DataMember ] public List < Argument > arguments { 
  Test C# function definition:    : [ DataMember ] public List < Argument > arguments { 
  default:       : [ DataMember ] public List < Argument > arguments { 
  Test control definition:        : [ DataMember ] public List < Argument > arguments { 
  default:       : get ; 
  Test C# declaration:            : [ DataMember ] public List < Argument > arguments { 
  Test C# executable:             : [ DataMember ] public List < Argument > arguments { 
  default:       : set ; 
  Test default:                   : [ DataMember ] public List < Argument > arguments { 
--- stack size = 3 ---
  Handle default:                 : [ DataMember ] public List < Argument > arguments { 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  function declar: = new List < Argument > ( ) ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = new List < Argument > ( ) ; 
  Test end scope                  : = new List < Argument > ( ) ; 
  Test preproc statement:         : = new List < Argument > ( ) ; 
  Test namespace definition:      : = new List < Argument > ( ) ; 
  Test class definition:          : = new List < Argument > ( ) ; 
  Test struct definition:         : = new List < Argument > ( ) ; 
  Test C# function definition:    : = new List < Argument > ( ) ; 
  Test control definition:        : = new List < Argument > ( ) ; 
  Test C# declaration:            : = new List < Argument > ( ) ; 
  Handle C# declaration:          : = new List < Argument > ( ) ; 
  Test begin scope                : [ DataMember ] public int threadId { 
  handle begin scope              : [ DataMember ] public int threadId { 
--- stack size = 4 ---
  Test end scope                  : [ DataMember ] public int threadId { 
  Test preproc statement:         : [ DataMember ] public int threadId { 
  Test namespace definition:      : [ DataMember ] public int threadId { 
  Test class definition:          : [ DataMember ] public int threadId { 
  default:       : [ DataMember ] public int threadId { 
  Test struct definition:         : [ DataMember ] public int threadId { 
  Test C# function definition:    : [ DataMember ] public int threadId { 
  Test control definition:        : [ DataMember ] public int threadId { 
  default:       : get ; 
  Test C# declaration:            : [ DataMember ] public int threadId { 
  Test C# executable:             : [ DataMember ] public int threadId { 
  Test default:                   : [ DataMember ] public int threadId { 
  Handle default:                 : [ DataMember ] public int threadId { 
  default:       : set ; 
  Test begin scope                : get ; 
--- stack size = 3 ---
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  executable     : = Thread . CurrentThread . ManagedThreadId ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = Thread . CurrentThread . ManagedThreadId ; 
  Test end scope                  : = Thread . CurrentThread . ManagedThreadId ; 
  Test preproc statement:         : = Thread . CurrentThread . ManagedThreadId ; 
  Test namespace definition:      : = Thread . CurrentThread . ManagedThreadId ; 
  Test class definition:          : = Thread . CurrentThread . ManagedThreadId ; 
  Test struct definition:         : = Thread . CurrentThread . ManagedThreadId ; 
  Test C# function definition:    : = Thread . CurrentThread . ManagedThreadId ; 
  Test control definition:        : = Thread . CurrentThread . ManagedThreadId ; 
  Test C# declaration:            : = Thread . CurrentThread . ManagedThreadId ; 
  Test C# executable:             : = Thread . CurrentThread . ManagedThreadId ; 
  Handle C# executable:           : = Thread . CurrentThread . ManagedThreadId ; 
  Test begin scope                : [ DataMember ] public ErrorMessage errorMsg { 
  handle begin scope              : [ DataMember ] public ErrorMessage errorMsg { 
--- stack size = 4 ---
  Test end scope                  : [ DataMember ] public ErrorMessage errorMsg { 
  Test preproc statement:         : [ DataMember ] public ErrorMessage errorMsg { 
  Test namespace definition:      : [ DataMember ] public ErrorMessage errorMsg { 
  Test class definition:          : [ DataMember ] public ErrorMessage errorMsg { 
  default:       : [ DataMember ] public ErrorMessage errorMsg { 
  Test struct definition:         : [ DataMember ] public ErrorMessage errorMsg { 
  Test C# function definition:    : [ DataMember ] public ErrorMessage errorMsg { 
  default:       : get ; 
  Test control definition:        : [ DataMember ] public ErrorMessage errorMsg { 
  default:       : set ; 
  Test C# declaration:            : [ DataMember ] public ErrorMessage errorMsg { 
--- stack size = 3 ---
  Test C# executable:             : [ DataMember ] public ErrorMessage errorMsg { 
  Test default:                   : [ DataMember ] public ErrorMessage errorMsg { 
  Handle default:                 : [ DataMember ] public ErrorMessage errorMsg { 
  executable     : = "no error" ; 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = "no error" ; 
  Test end scope                  : = "no error" ; 
  Test preproc statement:         : = "no error" ; 
  Test namespace definition:      : = "no error" ; 
  Test class definition:          : = "no error" ; 
  Test struct definition:         : = "no error" ; 
  Test C# function definition:    : = "no error" ; 
  Test control definition:        : = "no error" ; 
  Test C# declaration:            : = "no error" ; 
  Test C# executable:             : = "no error" ; 
  Handle C# executable:           : = "no error" ; 
  Test begin scope                : public void show ( ) { 
  handle begin scope              : public void show ( ) { 
--- stack size = 4 ---
  Test end scope                  : public void show ( ) { 
  Test preproc statement:         : public void show ( ) { 
  Test namespace definition:      : public void show ( ) { 
  function def   : public void show ( ) { 
  Test class definition:          : public void show ( ) { 
  Test struct definition:         : public void show ( ) { 
  Test C# function definition:    : public void show ( ) { 
  Handle C# function definition:  : public void show ( ) { 
  Test begin scope                : Console . Write ( "\n  CommMessage:" ) ; 
  Test end scope                  : Console . Write ( "\n  CommMessage:" ) ; 
  executable     : Console . Write ( "\n  CommMessage:" ) ; 
  Test preproc statement:         : Console . Write ( "\n  CommMessage:" ) ; 
  Test namespace definition:      : Console . Write ( "\n  CommMessage:" ) ; 
  Test class definition:          : Console . Write ( "\n  CommMessage:" ) ; 
  Test struct definition:         : Console . Write ( "\n  CommMessage:" ) ; 
  Test C# function definition:    : Console . Write ( "\n  CommMessage:" ) ; 
  Test control definition:        : Console . Write ( "\n  CommMessage:" ) ; 
  Test C# declaration:            : Console . Write ( "\n  CommMessage:" ) ; 
  Test C# executable:             : Console . Write ( "\n  CommMessage:" ) ; 
  executable     : Console . Write ( "\n    MessageType : {0}" , type . ToString ( ) ) ; 
  Handle C# executable:           : Console . Write ( "\n  CommMessage:" ) ; 
  Test begin scope                : Console . Write ( "\n    MessageType : {0}" , type . ToString ( ) ) ; 
  Test end scope                  : Console . Write ( "\n    MessageType : {0}" , type . ToString ( ) ) ; 
  Test preproc statement:         : Console . Write ( "\n    MessageType : {0}" , type . ToString ( ) ) ; 
  Test namespace definition:      : Console . Write ( "\n    MessageType : {0}" , type . ToString ( ) ) ; 
  Test class definition:          : Console . Write ( "\n    MessageType : {0}" , type . ToString ( ) ) ; 
  executable     : Console . Write ( "\n    to          : {0}" , to ) ; 
  Test struct definition:         : Console . Write ( "\n    MessageType : {0}" , type . ToString ( ) ) ; 
  Test C# function definition:    : Console . Write ( "\n    MessageType : {0}" , type . ToString ( ) ) ; 
  Test control definition:        : Console . Write ( "\n    MessageType : {0}" , type . ToString ( ) ) ; 
  executable     : Console . Write ( "\n    from        : {0}" , from ) ; 
  Test C# declaration:            : Console . Write ( "\n    MessageType : {0}" , type . ToString ( ) ) ; 
  Test C# executable:             : Console . Write ( "\n    MessageType : {0}" , type . ToString ( ) ) ; 
  Handle C# executable:           : Console . Write ( "\n    MessageType : {0}" , type . ToString ( ) ) ; 
  Test begin scope                : Console . Write ( "\n    to          : {0}" , to ) ; 
  executable     : Console . Write ( "\n    author      : {0}" , author ) ; 
  Test end scope                  : Console . Write ( "\n    to          : {0}" , to ) ; 
  Test preproc statement:         : Console . Write ( "\n    to          : {0}" , to ) ; 
  Test namespace definition:      : Console . Write ( "\n    to          : {0}" , to ) ; 
  Test class definition:          : Console . Write ( "\n    to          : {0}" , to ) ; 
  executable     : Console . Write ( "\n    command     : {0}" , command ) ; 
  Test struct definition:         : Console . Write ( "\n    to          : {0}" , to ) ; 
  Test C# function definition:    : Console . Write ( "\n    to          : {0}" , to ) ; 
  Test control definition:        : Console . Write ( "\n    to          : {0}" , to ) ; 
  executable     : Console . Write ( "\n    arguments   :" ) ; 
  Test C# declaration:            : Console . Write ( "\n    to          : {0}" , to ) ; 
  Test C# executable:             : Console . Write ( "\n    to          : {0}" , to ) ; 
  Handle C# executable:           : Console . Write ( "\n    to          : {0}" , to ) ; 
  Test begin scope                : Console . Write ( "\n    from        : {0}" , from ) ; 
  Test end scope                  : Console . Write ( "\n    from        : {0}" , from ) ; 
  Test preproc statement:         : Console . Write ( "\n    from        : {0}" , from ) ; 
  Test namespace definition:      : Console . Write ( "\n    from        : {0}" , from ) ; 
  Test class definition:          : Console . Write ( "\n    from        : {0}" , from ) ; 
  executable     : if ( arguments . Count > 0 ) Console . Write ( "\n      " ) ; 
  Test struct definition:         : Console . Write ( "\n    from        : {0}" , from ) ; 
  Test C# function definition:    : Console . Write ( "\n    from        : {0}" , from ) ; 
  Test control definition:        : Console . Write ( "\n    from        : {0}" , from ) ; 
  Test C# declaration:            : Console . Write ( "\n    from        : {0}" , from ) ; 
  Test C# executable:             : Console . Write ( "\n    from        : {0}" , from ) ; 
  Handle C# executable:           : Console . Write ( "\n    from        : {0}" , from ) ; 
  Test begin scope                : Console . Write ( "\n    author      : {0}" , author ) ; 
  executable     : foreach ( string arg in arguments ) Console . Write ( "{0} " , arg ) ; 
  Test end scope                  : Console . Write ( "\n    author      : {0}" , author ) ; 
  Test preproc statement:         : Console . Write ( "\n    author      : {0}" , author ) ; 
  Test namespace definition:      : Console . Write ( "\n    author      : {0}" , author ) ; 
  Test class definition:          : Console . Write ( "\n    author      : {0}" , author ) ; 
  Test struct definition:         : Console . Write ( "\n    author      : {0}" , author ) ; 
  Test C# function definition:    : Console . Write ( "\n    author      : {0}" , author ) ; 
  executable     : Console . Write ( "\n    ThreadId    : {0}" , threadId ) ; 
  Test control definition:        : Console . Write ( "\n    author      : {0}" , author ) ; 
  Test C# declaration:            : Console . Write ( "\n    author      : {0}" , author ) ; 
  Test C# executable:             : Console . Write ( "\n    author      : {0}" , author ) ; 
  Handle C# executable:           : Console . Write ( "\n    author      : {0}" , author ) ; 
  executable     : Console . Write ( "\n    errorMsg    : {0}\n" , errorMsg ) ; 
  Test begin scope                : Console . Write ( "\n    command     : {0}" , command ) ; 
--- stack size = 3 ---
  Test end scope                  : Console . Write ( "\n    command     : {0}" , command ) ; 
--- stack size = 2 ---
  Test preproc statement:         : Console . Write ( "\n    command     : {0}" , command ) ; 
--- stack size = 1 ---
  Test namespace definition:      : Console . Write ( "\n    command     : {0}" , command ) ; 
  Test class definition:          : Console . Write ( "\n    command     : {0}" , command ) ; 
  Test struct definition:         : Console . Write ( "\n    command     : {0}" , command ) ; 
  using declar   : using System ; 
  Test C# function definition:    : Console . Write ( "\n    command     : {0}" , command ) ; 
  Test control definition:        : Console . Write ( "\n    command     : {0}" , command ) ; 
  using declar   : using System . Collections . Generic ; 
  Test C# declaration:            : Console . Write ( "\n    command     : {0}" , command ) ; 
  Test C# executable:             : Console . Write ( "\n    command     : {0}" , command ) ; 
  using declar   : using System . Configuration ; 
  Handle C# executable:           : Console . Write ( "\n    command     : {0}" , command ) ; 
  Test begin scope                : Console . Write ( "\n    arguments   :" ) ; 
  using declar   : using System . Data ; 
  Test end scope                  : Console . Write ( "\n    arguments   :" ) ; 
  Test preproc statement:         : Console . Write ( "\n    arguments   :" ) ; 
  using declar   : using System . Linq ; 
  Test namespace definition:      : Console . Write ( "\n    arguments   :" ) ; 
  Test class definition:          : Console . Write ( "\n    arguments   :" ) ; 
  using declar   : using System . Threading . Tasks ; 
  Test struct definition:         : Console . Write ( "\n    arguments   :" ) ; 
  Test C# function definition:    : Console . Write ( "\n    arguments   :" ) ; 
  using declar   : using System . Windows ; 
  Test control definition:        : Console . Write ( "\n    arguments   :" ) ; 
  Test C# declaration:            : Console . Write ( "\n    arguments   :" ) ; 
  Test C# executable:             : Console . Write ( "\n    arguments   :" ) ; 
  Handle C# executable:           : Console . Write ( "\n    arguments   :" ) ; 
  Test begin scope                : if ( arguments . Count > 0 ) Console . Write ( "\n      " ) ; 
  Test end scope                  : if ( arguments . Count > 0 ) Console . Write ( "\n      " ) ; 
  Test preproc statement:         : if ( arguments . Count > 0 ) Console . Write ( "\n      " ) ; 
  Test namespace definition:      : if ( arguments . Count > 0 ) Console . Write ( "\n      " ) ; 
  Test class definition:          : if ( arguments . Count > 0 ) Console . Write ( "\n      " ) ; 
  Test struct definition:         : if ( arguments . Count > 0 ) Console . Write ( "\n      " ) ; 
  Test C# function definition:    : if ( arguments . Count > 0 ) Console . Write ( "\n      " ) ; 
  Test control definition:        : if ( arguments . Count > 0 ) Console . Write ( "\n      " ) ; 
  Test C# declaration:            : if ( arguments . Count > 0 ) Console . Write ( "\n      " ) ; 
  Test C# executable:             : if ( arguments . Count > 0 ) Console . Write ( "\n      " ) ; 
  Handle C# executable:           : if ( arguments . Count > 0 ) Console . Write ( "\n      " ) ; 
  Test begin scope                : foreach ( string arg in arguments ) Console . Write ( "{0} " , arg ) ; 
  Test end scope                  : foreach ( string arg in arguments ) Console . Write ( "{0} " , arg ) ; 
  Test preproc statement:         : foreach ( string arg in arguments ) Console . Write ( "{0} " , arg ) ; 
  Test namespace definition:      : foreach ( string arg in arguments ) Console . Write ( "{0} " , arg ) ; 
  Test class definition:          : foreach ( string arg in arguments ) Console . Write ( "{0} " , arg ) ; 
  Test struct definition:         : foreach ( string arg in arguments ) Console . Write ( "{0} " , arg ) ; 
  Test C# function definition:    : foreach ( string arg in arguments ) Console . Write ( "{0} " , arg ) ; 
  Test control definition:        : foreach ( string arg in arguments ) Console . Write ( "{0} " , arg ) ; 
  Test C# declaration:            : foreach ( string arg in arguments ) Console . Write ( "{0} " , arg ) ; 
  Test C# executable:             : foreach ( string arg in arguments ) Console . Write ( "{0} " , arg ) ; 
  Handle C# executable:           : foreach ( string arg in arguments ) Console . Write ( "{0} " , arg ) ; 
  Test begin scope                : Console . Write ( "\n    ThreadId    : {0}" , threadId ) ; 
  Test end scope                  : Console . Write ( "\n    ThreadId    : {0}" , threadId ) ; 
  Test preproc statement:         : Console . Write ( "\n    ThreadId    : {0}" , threadId ) ; 
  Test namespace definition:      : Console . Write ( "\n    ThreadId    : {0}" , threadId ) ; 
  Test class definition:          : Console . Write ( "\n    ThreadId    : {0}" , threadId ) ; 
  Test struct definition:         : Console . Write ( "\n    ThreadId    : {0}" , threadId ) ; 
  Test C# function definition:    : Console . Write ( "\n    ThreadId    : {0}" , threadId ) ; 
  Test control definition:        : Console . Write ( "\n    ThreadId    : {0}" , threadId ) ; 
  Test C# declaration:            : Console . Write ( "\n    ThreadId    : {0}" , threadId ) ; 
  Test C# executable:             : Console . Write ( "\n    ThreadId    : {0}" , threadId ) ; 
  Handle C# executable:           : Console . Write ( "\n    ThreadId    : {0}" , threadId ) ; 
  Test begin scope                : Console . Write ( "\n    errorMsg    : {0}\n" , errorMsg ) ; 
  Test end scope                  : Console . Write ( "\n    errorMsg    : {0}\n" , errorMsg ) ; 
  Test preproc statement:         : Console . Write ( "\n    errorMsg    : {0}\n" , errorMsg ) ; 
  Test namespace definition:      : Console . Write ( "\n    errorMsg    : {0}\n" , errorMsg ) ; 
  Test class definition:          : Console . Write ( "\n    errorMsg    : {0}\n" , errorMsg ) ; 
  Test struct definition:         : Console . Write ( "\n    errorMsg    : {0}\n" , errorMsg ) ; 
  Test C# function definition:    : Console . Write ( "\n    errorMsg    : {0}\n" , errorMsg ) ; 
  Test control definition:        : Console . Write ( "\n    errorMsg    : {0}\n" , errorMsg ) ; 
  Test C# declaration:            : Console . Write ( "\n    errorMsg    : {0}\n" , errorMsg ) ; 
  Test C# executable:             : Console . Write ( "\n    errorMsg    : {0}\n" , errorMsg ) ; 
  Handle C# executable:           : Console . Write ( "\n    errorMsg    : {0}\n" , errorMsg ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Collections . Generic ; 
  Test end scope                  : using System . Collections . Generic ; 
  Test preproc statement:         : using System . Collections . Generic ; 
  Test namespace definition:      : using System . Collections . Generic ; 
  Test class definition:          : using System . Collections . Generic ; 
  Test struct definition:         : using System . Collections . Generic ; 
  Test C# function definition:    : using System . Collections . Generic ; 
  Test control definition:        : using System . Collections . Generic ; 
  Test C# declaration:            : using System . Collections . Generic ; 
  Handle C# declaration:          : using System . Collections . Generic ; 
  Test begin scope                : using System . Configuration ; 
  Test end scope                  : using System . Configuration ; 
  Test preproc statement:         : using System . Configuration ; 
  Test namespace definition:      : using System . Configuration ; 
  Test class definition:          : using System . Configuration ; 
  Test struct definition:         : using System . Configuration ; 
  Test C# function definition:    : using System . Configuration ; 
  Test control definition:        : using System . Configuration ; 
  Test C# declaration:            : using System . Configuration ; 
  Handle C# declaration:          : using System . Configuration ; 
  Test begin scope                : using System . Data ; 
  Test end scope                  : using System . Data ; 
  Test preproc statement:         : using System . Data ; 
  Test namespace definition:      : using System . Data ; 
  Test class definition:          : using System . Data ; 
  Test struct definition:         : using System . Data ; 
  Test C# function definition:    : using System . Data ; 
  Test control definition:        : using System . Data ; 
  Test C# declaration:            : using System . Data ; 
  Handle C# declaration:          : using System . Data ; 
  Test begin scope                : using System . Linq ; 
  Test end scope                  : using System . Linq ; 
  Test preproc statement:         : using System . Linq ; 
  Test namespace definition:      : using System . Linq ; 
  Test class definition:          : using System . Linq ; 
  Test struct definition:         : using System . Linq ; 
  Test C# function definition:    : using System . Linq ; 
  Test control definition:        : using System . Linq ; 
  Test C# declaration:            : using System . Linq ; 
  Handle C# declaration:          : using System . Linq ; 
  Test begin scope                : using System . Threading . Tasks ; 
  Test end scope                  : using System . Threading . Tasks ; 
  Test preproc statement:         : using System . Threading . Tasks ; 
  Test namespace definition:      : using System . Threading . Tasks ; 
  Test class definition:          : using System . Threading . Tasks ; 
  Test struct definition:         : using System . Threading . Tasks ; 
  Test C# function definition:    : using System . Threading . Tasks ; 
  Test control definition:        : using System . Threading . Tasks ; 
  Test C# declaration:            : using System . Threading . Tasks ; 
  Handle C# declaration:          : using System . Threading . Tasks ; 
  Test begin scope                : using System . Windows ; 
  Test end scope                  : using System . Windows ; 
  Test preproc statement:         : using System . Windows ; 
  Test namespace definition:      : using System . Windows ; 
  Test class definition:          : using System . Windows ; 
  Test struct definition:         : using System . Windows ; 
  Test C# function definition:    : using System . Windows ; 
  Test control definition:        : using System . Windows ; 
  Test C# declaration:            : using System . Windows ; 
  Handle C# declaration:          : using System . Windows ; 
  Test begin scope                : namespace ClientGUI { 
  handle begin scope              : namespace ClientGUI { 
--- stack size = 2 ---
  Test end scope                  : namespace ClientGUI { 
  namespace def  : namespace ClientGUI { 
  Test preproc statement:         : namespace ClientGUI { 
  Test namespace definition:      : namespace ClientGUI { 
  Handle namespace definition:    : namespace ClientGUI { 
  Test begin scope                : public partial class App : Application { 
  handle begin scope              : public partial class App : Application { 
--- stack size = 3 ---
  Test end scope                  : public partial class App : Application { 
  Test preproc statement:         : public partial class App : Application { 
  class def      : public partial class App : Application { 
  Test namespace definition:      : public partial class App : Application { 
--- stack size = 2 ---
  Test class definition:          : public partial class App : Application { 
--- stack size = 1 ---
  Handle class definition:        : public partial class App : Application { 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  using declar   : using System ; 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  using declar   : using System . Collections . Generic ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  using declar   : using System . Linq ; 
  Test begin scope                : using System . Collections . Generic ; 
  Test end scope                  : using System . Collections . Generic ; 
  Test preproc statement:         : using System . Collections . Generic ; 
  using declar   : using System . Text ; 
  Test namespace definition:      : using System . Collections . Generic ; 
  Test class definition:          : using System . Collections . Generic ; 
  Test struct definition:         : using System . Collections . Generic ; 
  Test C# function definition:    : using System . Collections . Generic ; 
  using declar   : using System . Threading . Tasks ; 
  Test control definition:        : using System . Collections . Generic ; 
  Test C# declaration:            : using System . Collections . Generic ; 
  Handle C# declaration:          : using System . Collections . Generic ; 
  Test begin scope                : using System . Linq ; 
  Test end scope                  : using System . Linq ; 
  Test preproc statement:         : using System . Linq ; 
  using declar   : using System . Windows ; 
  Test namespace definition:      : using System . Linq ; 
  Test class definition:          : using System . Linq ; 
  Test struct definition:         : using System . Linq ; 
  using declar   : using System . Windows . Controls ; 
  Test C# function definition:    : using System . Linq ; 
  Test control definition:        : using System . Linq ; 
  Test C# declaration:            : using System . Linq ; 
  Handle C# declaration:          : using System . Linq ; 
  using declar   : using System . Windows . Data ; 
  Test begin scope                : using System . Text ; 
  Test end scope                  : using System . Text ; 
  Test preproc statement:         : using System . Text ; 
  Test namespace definition:      : using System . Text ; 
  Test class definition:          : using System . Text ; 
  using declar   : using System . Windows . Documents ; 
  Test struct definition:         : using System . Text ; 
  Test C# function definition:    : using System . Text ; 
  Test control definition:        : using System . Text ; 
  Test C# declaration:            : using System . Text ; 
  Handle C# declaration:          : using System . Text ; 
  using declar   : using System . Windows . Input ; 
  Test begin scope                : using System . Threading . Tasks ; 
  Test end scope                  : using System . Threading . Tasks ; 
  Test preproc statement:         : using System . Threading . Tasks ; 
  Test namespace definition:      : using System . Threading . Tasks ; 
  using declar   : using System . Windows . Media ; 
  Test class definition:          : using System . Threading . Tasks ; 
  Test struct definition:         : using System . Threading . Tasks ; 
  Test C# function definition:    : using System . Threading . Tasks ; 
  Test control definition:        : using System . Threading . Tasks ; 
  Test C# declaration:            : using System . Threading . Tasks ; 
  Handle C# declaration:          : using System . Threading . Tasks ; 
  using declar   : using System . Windows . Media . Imaging ; 
  Test begin scope                : using System . Windows ; 
  Test end scope                  : using System . Windows ; 
  Test preproc statement:         : using System . Windows ; 
  Test namespace definition:      : using System . Windows ; 
  Test class definition:          : using System . Windows ; 
  using declar   : using System . Windows . Shapes ; 
  Test struct definition:         : using System . Windows ; 
  Test C# function definition:    : using System . Windows ; 
  Test control definition:        : using System . Windows ; 
  Test C# declaration:            : using System . Windows ; 
  Handle C# declaration:          : using System . Windows ; 
  Test begin scope                : using System . Windows . Controls ; 
  Test end scope                  : using System . Windows . Controls ; 
  Test preproc statement:         : using System . Windows . Controls ; 
  Test namespace definition:      : using System . Windows . Controls ; 
  Test class definition:          : using System . Windows . Controls ; 
  Test struct definition:         : using System . Windows . Controls ; 
  Test C# function definition:    : using System . Windows . Controls ; 
  Test control definition:        : using System . Windows . Controls ; 
  Test C# declaration:            : using System . Windows . Controls ; 
  Handle C# declaration:          : using System . Windows . Controls ; 
  Test begin scope                : using System . Windows . Data ; 
  Test end scope                  : using System . Windows . Data ; 
  Test preproc statement:         : using System . Windows . Data ; 
  Test namespace definition:      : using System . Windows . Data ; 
  Test class definition:          : using System . Windows . Data ; 
  Test struct definition:         : using System . Windows . Data ; 
  Test C# function definition:    : using System . Windows . Data ; 
  Test control definition:        : using System . Windows . Data ; 
  Test C# declaration:            : using System . Windows . Data ; 
  Handle C# declaration:          : using System . Windows . Data ; 
  Test begin scope                : using System . Windows . Documents ; 
  Test end scope                  : using System . Windows . Documents ; 
  Test preproc statement:         : using System . Windows . Documents ; 
  Test namespace definition:      : using System . Windows . Documents ; 
  Test class definition:          : using System . Windows . Documents ; 
  Test struct definition:         : using System . Windows . Documents ; 
  Test C# function definition:    : using System . Windows . Documents ; 
  Test control definition:        : using System . Windows . Documents ; 
  Test C# declaration:            : using System . Windows . Documents ; 
  Handle C# declaration:          : using System . Windows . Documents ; 
  Test begin scope                : using System . Windows . Input ; 
  Test end scope                  : using System . Windows . Input ; 
  Test preproc statement:         : using System . Windows . Input ; 
  Test namespace definition:      : using System . Windows . Input ; 
  Test class definition:          : using System . Windows . Input ; 
  Test struct definition:         : using System . Windows . Input ; 
  Test C# function definition:    : using System . Windows . Input ; 
  Test control definition:        : using System . Windows . Input ; 
  Test C# declaration:            : using System . Windows . Input ; 
  Handle C# declaration:          : using System . Windows . Input ; 
  Test begin scope                : using System . Windows . Media ; 
  Test end scope                  : using System . Windows . Media ; 
  Test preproc statement:         : using System . Windows . Media ; 
  Test namespace definition:      : using System . Windows . Media ; 
  Test class definition:          : using System . Windows . Media ; 
  Test struct definition:         : using System . Windows . Media ; 
  Test C# function definition:    : using System . Windows . Media ; 
  Test control definition:        : using System . Windows . Media ; 
  Test C# declaration:            : using System . Windows . Media ; 
  Handle C# declaration:          : using System . Windows . Media ; 
  Test begin scope                : using System . Windows . Media . Imaging ; 
  Test end scope                  : using System . Windows . Media . Imaging ; 
  Test preproc statement:         : using System . Windows . Media . Imaging ; 
  Test namespace definition:      : using System . Windows . Media . Imaging ; 
  Test class definition:          : using System . Windows . Media . Imaging ; 
  Test struct definition:         : using System . Windows . Media . Imaging ; 
  Test C# function definition:    : using System . Windows . Media . Imaging ; 
  Test control definition:        : using System . Windows . Media . Imaging ; 
  Test C# declaration:            : using System . Windows . Media . Imaging ; 
  Handle C# declaration:          : using System . Windows . Media . Imaging ; 
  Test begin scope                : using System . Windows . Shapes ; 
  Test end scope                  : using System . Windows . Shapes ; 
  Test preproc statement:         : using System . Windows . Shapes ; 
  Test namespace definition:      : using System . Windows . Shapes ; 
  Test class definition:          : using System . Windows . Shapes ; 
  Test struct definition:         : using System . Windows . Shapes ; 
  Test C# function definition:    : using System . Windows . Shapes ; 
  Test control definition:        : using System . Windows . Shapes ; 
  Test C# declaration:            : using System . Windows . Shapes ; 
  Handle C# declaration:          : using System . Windows . Shapes ; 
  Test begin scope                : namespace ClientGUI { 
  handle begin scope              : namespace ClientGUI { 
--- stack size = 2 ---
  Test end scope                  : namespace ClientGUI { 
  namespace def  : namespace ClientGUI { 
  Test preproc statement:         : namespace ClientGUI { 
  Test namespace definition:      : namespace ClientGUI { 
  Handle namespace definition:    : namespace ClientGUI { 
  Test begin scope                : public partial class CodePopUp : Window { 
  handle begin scope              : public partial class CodePopUp : Window { 
--- stack size = 3 ---
  Test end scope                  : public partial class CodePopUp : Window { 
  class def      : public partial class CodePopUp : Window { 
  Test preproc statement:         : public partial class CodePopUp : Window { 
  Test namespace definition:      : public partial class CodePopUp : Window { 
  Test class definition:          : public partial class CodePopUp : Window { 
  Handle class definition:        : public partial class CodePopUp : Window { 
  Test begin scope                : public CodePopUp ( ) { 
  handle begin scope              : public CodePopUp ( ) { 
--- stack size = 4 ---
  Test end scope                  : public CodePopUp ( ) { 
  Test preproc statement:         : public CodePopUp ( ) { 
  Test namespace definition:      : public CodePopUp ( ) { 
  function def   : public CodePopUp ( ) { 
  Test class definition:          : public CodePopUp ( ) { 
  Test struct definition:         : public CodePopUp ( ) { 
  Test C# function definition:    : public CodePopUp ( ) { 
  Handle C# function definition:  : public CodePopUp ( ) { 
  executable     : InitializeComponent ( ) ; 
  Test begin scope                : InitializeComponent ( ) ; 
--- stack size = 3 ---
  Test end scope                  : InitializeComponent ( ) ; 
--- stack size = 2 ---
  Test preproc statement:         : InitializeComponent ( ) ; 
--- stack size = 1 ---
  Test namespace definition:      : InitializeComponent ( ) ; 
  Test class definition:          : InitializeComponent ( ) ; 
  Test struct definition:         : InitializeComponent ( ) ; 
  Test C# function definition:    : InitializeComponent ( ) ; 
  Test control definition:        : InitializeComponent ( ) ; 
  using declar   : using MessagePassingComm ; 
  Test C# declaration:            : InitializeComponent ( ) ; 
  using declar   : using System ; 
  Test C# executable:             : InitializeComponent ( ) ; 
  Handle C# executable:           : InitializeComponent ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  using declar   : using System . Collections . Generic ; 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System . Diagnostics ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System . IO ; 
  Test begin scope                : using MessagePassingComm ; 
  Test end scope                  : using MessagePassingComm ; 
  Test preproc statement:         : using MessagePassingComm ; 
  using declar   : using System . Linq ; 
  Test namespace definition:      : using MessagePassingComm ; 
  Test class definition:          : using MessagePassingComm ; 
  using declar   : using System . Text ; 
  Test struct definition:         : using MessagePassingComm ; 
  Test C# function definition:    : using MessagePassingComm ; 
  Test control definition:        : using MessagePassingComm ; 
  using declar   : using System . Threading ; 
  Test C# declaration:            : using MessagePassingComm ; 
  Handle C# declaration:          : using MessagePassingComm ; 
  Test begin scope                : using System ; 
  using declar   : using System . Threading . Tasks ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  using declar   : using System . Windows ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  using declar   : using System . Windows . Controls ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  using declar   : using System . Windows . Data ; 
  Test begin scope                : using System . Collections . Generic ; 
  Test end scope                  : using System . Collections . Generic ; 
  Test preproc statement:         : using System . Collections . Generic ; 
  using declar   : using System . Windows . Documents ; 
  Test namespace definition:      : using System . Collections . Generic ; 
  Test class definition:          : using System . Collections . Generic ; 
  using declar   : using System . Windows . Input ; 
  Test struct definition:         : using System . Collections . Generic ; 
  Test C# function definition:    : using System . Collections . Generic ; 
  using declar   : using System . Windows . Media ; 
  Test control definition:        : using System . Collections . Generic ; 
  Test C# declaration:            : using System . Collections . Generic ; 
  Handle C# declaration:          : using System . Collections . Generic ; 
  using declar   : using System . Windows . Media . Imaging ; 
  Test begin scope                : using System . Diagnostics ; 
  Test end scope                  : using System . Diagnostics ; 
  using declar   : using System . Windows . Navigation ; 
  Test preproc statement:         : using System . Diagnostics ; 
  Test namespace definition:      : using System . Diagnostics ; 
  Test class definition:          : using System . Diagnostics ; 
  using declar   : using System . Windows . Shapes ; 
  Test struct definition:         : using System . Diagnostics ; 
  using declar   : using Utilities ; 
  Test C# function definition:    : using System . Diagnostics ; 
  Test control definition:        : using System . Diagnostics ; 
  Test C# declaration:            : using System . Diagnostics ; 
  Handle C# declaration:          : using System . Diagnostics ; 
  Test begin scope                : using System . IO ; 
  Test end scope                  : using System . IO ; 
  Test preproc statement:         : using System . IO ; 
  Test namespace definition:      : using System . IO ; 
  Test class definition:          : using System . IO ; 
  Test struct definition:         : using System . IO ; 
  Test C# function definition:    : using System . IO ; 
  Test control definition:        : using System . IO ; 
  Test C# declaration:            : using System . IO ; 
  Handle C# declaration:          : using System . IO ; 
  Test begin scope                : using System . Linq ; 
  Test end scope                  : using System . Linq ; 
  Test preproc statement:         : using System . Linq ; 
  Test namespace definition:      : using System . Linq ; 
  Test class definition:          : using System . Linq ; 
  Test struct definition:         : using System . Linq ; 
  Test C# function definition:    : using System . Linq ; 
  Test control definition:        : using System . Linq ; 
  Test C# declaration:            : using System . Linq ; 
  Handle C# declaration:          : using System . Linq ; 
  Test begin scope                : using System . Text ; 
  Test end scope                  : using System . Text ; 
  Test preproc statement:         : using System . Text ; 
  Test namespace definition:      : using System . Text ; 
  Test class definition:          : using System . Text ; 
  Test struct definition:         : using System . Text ; 
  Test C# function definition:    : using System . Text ; 
  Test control definition:        : using System . Text ; 
  Test C# declaration:            : using System . Text ; 
  Handle C# declaration:          : using System . Text ; 
  Test begin scope                : using System . Threading ; 
  Test end scope                  : using System . Threading ; 
  Test preproc statement:         : using System . Threading ; 
  Test namespace definition:      : using System . Threading ; 
  Test class definition:          : using System . Threading ; 
  Test struct definition:         : using System . Threading ; 
  Test C# function definition:    : using System . Threading ; 
  Test control definition:        : using System . Threading ; 
  Test C# declaration:            : using System . Threading ; 
  Handle C# declaration:          : using System . Threading ; 
  Test begin scope                : using System . Threading . Tasks ; 
  Test end scope                  : using System . Threading . Tasks ; 
  Test preproc statement:         : using System . Threading . Tasks ; 
  Test namespace definition:      : using System . Threading . Tasks ; 
  Test class definition:          : using System . Threading . Tasks ; 
  Test struct definition:         : using System . Threading . Tasks ; 
  Test C# function definition:    : using System . Threading . Tasks ; 
  Test control definition:        : using System . Threading . Tasks ; 
  Test C# declaration:            : using System . Threading . Tasks ; 
  Handle C# declaration:          : using System . Threading . Tasks ; 
  Test begin scope                : using System . Windows ; 
  Test end scope                  : using System . Windows ; 
  Test preproc statement:         : using System . Windows ; 
  Test namespace definition:      : using System . Windows ; 
  Test class definition:          : using System . Windows ; 
  Test struct definition:         : using System . Windows ; 
  Test C# function definition:    : using System . Windows ; 
  Test control definition:        : using System . Windows ; 
  Test C# declaration:            : using System . Windows ; 
  Handle C# declaration:          : using System . Windows ; 
  Test begin scope                : using System . Windows . Controls ; 
  Test end scope                  : using System . Windows . Controls ; 
  Test preproc statement:         : using System . Windows . Controls ; 
  Test namespace definition:      : using System . Windows . Controls ; 
  Test class definition:          : using System . Windows . Controls ; 
  Test struct definition:         : using System . Windows . Controls ; 
  Test C# function definition:    : using System . Windows . Controls ; 
  Test control definition:        : using System . Windows . Controls ; 
  Test C# declaration:            : using System . Windows . Controls ; 
  Handle C# declaration:          : using System . Windows . Controls ; 
  Test begin scope                : using System . Windows . Data ; 
  Test end scope                  : using System . Windows . Data ; 
  Test preproc statement:         : using System . Windows . Data ; 
  Test namespace definition:      : using System . Windows . Data ; 
  Test class definition:          : using System . Windows . Data ; 
  Test struct definition:         : using System . Windows . Data ; 
  Test C# function definition:    : using System . Windows . Data ; 
  Test control definition:        : using System . Windows . Data ; 
  Test C# declaration:            : using System . Windows . Data ; 
  Handle C# declaration:          : using System . Windows . Data ; 
  Test begin scope                : using System . Windows . Documents ; 
  Test end scope                  : using System . Windows . Documents ; 
  Test preproc statement:         : using System . Windows . Documents ; 
  Test namespace definition:      : using System . Windows . Documents ; 
  Test class definition:          : using System . Windows . Documents ; 
  Test struct definition:         : using System . Windows . Documents ; 
  Test C# function definition:    : using System . Windows . Documents ; 
  Test control definition:        : using System . Windows . Documents ; 
  Test C# declaration:            : using System . Windows . Documents ; 
  Handle C# declaration:          : using System . Windows . Documents ; 
  Test begin scope                : using System . Windows . Input ; 
  Test end scope                  : using System . Windows . Input ; 
  Test preproc statement:         : using System . Windows . Input ; 
  Test namespace definition:      : using System . Windows . Input ; 
  Test class definition:          : using System . Windows . Input ; 
  Test struct definition:         : using System . Windows . Input ; 
  Test C# function definition:    : using System . Windows . Input ; 
  Test control definition:        : using System . Windows . Input ; 
  Test C# declaration:            : using System . Windows . Input ; 
  Handle C# declaration:          : using System . Windows . Input ; 
  Test begin scope                : using System . Windows . Media ; 
  Test end scope                  : using System . Windows . Media ; 
  Test preproc statement:         : using System . Windows . Media ; 
  Test namespace definition:      : using System . Windows . Media ; 
  Test class definition:          : using System . Windows . Media ; 
  Test struct definition:         : using System . Windows . Media ; 
  Test C# function definition:    : using System . Windows . Media ; 
  Test control definition:        : using System . Windows . Media ; 
  Test C# declaration:            : using System . Windows . Media ; 
  Handle C# declaration:          : using System . Windows . Media ; 
  Test begin scope                : using System . Windows . Media . Imaging ; 
  Test end scope                  : using System . Windows . Media . Imaging ; 
  Test preproc statement:         : using System . Windows . Media . Imaging ; 
  Test namespace definition:      : using System . Windows . Media . Imaging ; 
  Test class definition:          : using System . Windows . Media . Imaging ; 
  Test struct definition:         : using System . Windows . Media . Imaging ; 
  Test C# function definition:    : using System . Windows . Media . Imaging ; 
  Test control definition:        : using System . Windows . Media . Imaging ; 
  Test C# declaration:            : using System . Windows . Media . Imaging ; 
  Handle C# declaration:          : using System . Windows . Media . Imaging ; 
  Test begin scope                : using System . Windows . Navigation ; 
  Test end scope                  : using System . Windows . Navigation ; 
  Test preproc statement:         : using System . Windows . Navigation ; 
  Test namespace definition:      : using System . Windows . Navigation ; 
  Test class definition:          : using System . Windows . Navigation ; 
  Test struct definition:         : using System . Windows . Navigation ; 
  Test C# function definition:    : using System . Windows . Navigation ; 
  Test control definition:        : using System . Windows . Navigation ; 
  Test C# declaration:            : using System . Windows . Navigation ; 
  Handle C# declaration:          : using System . Windows . Navigation ; 
  Test begin scope                : using System . Windows . Shapes ; 
  Test end scope                  : using System . Windows . Shapes ; 
  Test preproc statement:         : using System . Windows . Shapes ; 
  Test namespace definition:      : using System . Windows . Shapes ; 
  Test class definition:          : using System . Windows . Shapes ; 
  Test struct definition:         : using System . Windows . Shapes ; 
  Test C# function definition:    : using System . Windows . Shapes ; 
  Test control definition:        : using System . Windows . Shapes ; 
  Test C# declaration:            : using System . Windows . Shapes ; 
  Handle C# declaration:          : using System . Windows . Shapes ; 
  Test begin scope                : using Utilities ; 
  Test end scope                  : using Utilities ; 
  Test preproc statement:         : using Utilities ; 
  Test namespace definition:      : using Utilities ; 
  Test class definition:          : using Utilities ; 
  Test struct definition:         : using Utilities ; 
  Test C# function definition:    : using Utilities ; 
  Test control definition:        : using Utilities ; 
  Test C# declaration:            : using Utilities ; 
  Handle C# declaration:          : using Utilities ; 
  Test begin scope                : namespace ClientGUI { 
  handle begin scope              : namespace ClientGUI { 
--- stack size = 2 ---
  Test end scope                  : namespace ClientGUI { 
  namespace def  : namespace ClientGUI { 
  Test preproc statement:         : namespace ClientGUI { 
  Test namespace definition:      : namespace ClientGUI { 
  Handle namespace definition:    : namespace ClientGUI { 
  Test begin scope                : public partial class MainWindow : Window { 
  handle begin scope              : public partial class MainWindow : Window { 
--- stack size = 3 ---
  Test end scope                  : public partial class MainWindow : Window { 
  class def      : public partial class MainWindow : Window { 
  Test preproc statement:         : public partial class MainWindow : Window { 
  Test namespace definition:      : public partial class MainWindow : Window { 
  Test class definition:          : public partial class MainWindow : Window { 
  Handle class definition:        : public partial class MainWindow : Window { 
  Test begin scope                : private static int repocheck { 
  handle begin scope              : private static int repocheck { 
--- stack size = 4 ---
  Test end scope                  : private static int repocheck { 
  Test preproc statement:         : private static int repocheck { 
  Test namespace definition:      : private static int repocheck { 
  default:       : private static int repocheck { 
  Test class definition:          : private static int repocheck { 
  Test struct definition:         : private static int repocheck { 
  default:       : get ; 
  Test C# function definition:    : private static int repocheck { 
  Test control definition:        : private static int repocheck { 
  default:       : set ; 
  Test C# declaration:            : private static int repocheck { 
--- stack size = 3 ---
  Test C# executable:             : private static int repocheck { 
  Test default:                   : private static int repocheck { 
  Handle default:                 : private static int repocheck { 
  executable     : = 0 ; 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = 0 ; 
  Test end scope                  : = 0 ; 
  Test preproc statement:         : = 0 ; 
  Test namespace definition:      : = 0 ; 
  Test class definition:          : = 0 ; 
  Test struct definition:         : = 0 ; 
  Test C# function definition:    : = 0 ; 
  Test control definition:        : = 0 ; 
  Test C# declaration:            : = 0 ; 
  Test C# executable:             : = 0 ; 
  Handle C# executable:           : = 0 ; 
  Test begin scope                : private static int Thcheck { 
  handle begin scope              : private static int Thcheck { 
--- stack size = 4 ---
  Test end scope                  : private static int Thcheck { 
  Test preproc statement:         : private static int Thcheck { 
  Test namespace definition:      : private static int Thcheck { 
  default:       : private static int Thcheck { 
  Test class definition:          : private static int Thcheck { 
  Test struct definition:         : private static int Thcheck { 
  default:       : get ; 
  Test C# function definition:    : private static int Thcheck { 
  Test control definition:        : private static int Thcheck { 
  default:       : set ; 
  Test C# declaration:            : private static int Thcheck { 
--- stack size = 3 ---
  Test C# executable:             : private static int Thcheck { 
  Test default:                   : private static int Thcheck { 
  Handle default:                 : private static int Thcheck { 
  Test begin scope                : get ; 
  executable     : = 0 ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = 0 ; 
  Test end scope                  : = 0 ; 
  Test preproc statement:         : = 0 ; 
  Test namespace definition:      : = 0 ; 
  Test class definition:          : = 0 ; 
  Test struct definition:         : = 0 ; 
  Test C# function definition:    : = 0 ; 
  Test control definition:        : = 0 ; 
  Test C# declaration:            : = 0 ; 
  Test C# executable:             : = 0 ; 
  Handle C# executable:           : = 0 ; 
  Test begin scope                : private static int buildcheck { 
  handle begin scope              : private static int buildcheck { 
--- stack size = 4 ---
  Test end scope                  : private static int buildcheck { 
  Test preproc statement:         : private static int buildcheck { 
  Test namespace definition:      : private static int buildcheck { 
  Test class definition:          : private static int buildcheck { 
  default:       : private static int buildcheck { 
  Test struct definition:         : private static int buildcheck { 
  Test C# function definition:    : private static int buildcheck { 
  default:       : get ; 
  Test control definition:        : private static int buildcheck { 
  Test C# declaration:            : private static int buildcheck { 
  default:       : set ; 
  Test C# executable:             : private static int buildcheck { 
--- stack size = 3 ---
  Test default:                   : private static int buildcheck { 
  Handle default:                 : private static int buildcheck { 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  executable     : = 0 ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = 0 ; 
  Test end scope                  : = 0 ; 
  Test preproc statement:         : = 0 ; 
  Test namespace definition:      : = 0 ; 
  Test class definition:          : = 0 ; 
  Test struct definition:         : = 0 ; 
  Test C# function definition:    : = 0 ; 
  Test control definition:        : = 0 ; 
  Test C# declaration:            : = 0 ; 
  Test C# executable:             : = 0 ; 
  Handle C# executable:           : = 0 ; 
  Test begin scope                : private static bool restartcheck { 
  handle begin scope              : private static bool restartcheck { 
--- stack size = 4 ---
  Test end scope                  : private static bool restartcheck { 
  Test preproc statement:         : private static bool restartcheck { 
  Test namespace definition:      : private static bool restartcheck { 
  default:       : private static bool restartcheck { 
  Test class definition:          : private static bool restartcheck { 
  Test struct definition:         : private static bool restartcheck { 
  default:       : get ; 
  Test C# function definition:    : private static bool restartcheck { 
  default:       : set ; 
  Test control definition:        : private static bool restartcheck { 
--- stack size = 3 ---
  Test C# declaration:            : private static bool restartcheck { 
  Test C# executable:             : private static bool restartcheck { 
  Test default:                   : private static bool restartcheck { 
  executable     : = false ; 
  Handle default:                 : private static bool restartcheck { 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  data declar    : static Thread repThread = null ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  data declar    : static Thread thThread = null ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = false ; 
  Test end scope                  : = false ; 
  Test preproc statement:         : = false ; 
  Test namespace definition:      : = false ; 
  Test class definition:          : = false ; 
  Test struct definition:         : = false ; 
  Test C# function definition:    : = false ; 
  Test control definition:        : = false ; 
  Test C# declaration:            : = false ; 
  Test C# executable:             : = false ; 
  Handle C# executable:           : = false ; 
  Test begin scope                : static Thread repThread = null ; 
  Test end scope                  : static Thread repThread = null ; 
  Test preproc statement:         : static Thread repThread = null ; 
  Test namespace definition:      : static Thread repThread = null ; 
  Test class definition:          : static Thread repThread = null ; 
  Test struct definition:         : static Thread repThread = null ; 
  Test C# function definition:    : static Thread repThread = null ; 
  Test control definition:        : static Thread repThread = null ; 
  Test C# declaration:            : static Thread repThread = null ; 
  Handle C# declaration:          : static Thread repThread = null ; 
  Test begin scope                : static Thread thThread = null ; 
  Test end scope                  : static Thread thThread = null ; 
  Test preproc statement:         : static Thread thThread = null ; 
  Test namespace definition:      : static Thread thThread = null ; 
  Test class definition:          : static Thread thThread = null ; 
  Test struct definition:         : static Thread thThread = null ; 
  Test C# function definition:    : static Thread thThread = null ; 
  Test control definition:        : static Thread thThread = null ; 
  Test C# declaration:            : static Thread thThread = null ; 
  Handle C# declaration:          : static Thread thThread = null ; 
  Test begin scope                : private int testno { 
  handle begin scope              : private int testno { 
--- stack size = 4 ---
  Test end scope                  : private int testno { 
  Test preproc statement:         : private int testno { 
  Test namespace definition:      : private int testno { 
  Test class definition:          : private int testno { 
  default:       : private int testno { 
  Test struct definition:         : private int testno { 
  default:       : get ; 
  Test C# function definition:    : private int testno { 
  Test control definition:        : private int testno { 
  Test C# declaration:            : private int testno { 
  default:       : set ; 
  Test C# executable:             : private int testno { 
--- stack size = 3 ---
  Test default:                   : private int testno { 
  Handle default:                 : private int testno { 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  executable     : = 0 ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = 0 ; 
  Test end scope                  : = 0 ; 
  Test preproc statement:         : = 0 ; 
  Test namespace definition:      : = 0 ; 
  Test class definition:          : = 0 ; 
  Test struct definition:         : = 0 ; 
  Test C# function definition:    : = 0 ; 
  Test control definition:        : = 0 ; 
  Test C# declaration:            : = 0 ; 
  Test C# executable:             : = 0 ; 
  Handle C# executable:           : = 0 ; 
  Test begin scope                : private static int requestcount { 
  handle begin scope              : private static int requestcount { 
--- stack size = 4 ---
  Test end scope                  : private static int requestcount { 
  Test preproc statement:         : private static int requestcount { 
  Test namespace definition:      : private static int requestcount { 
  default:       : private static int requestcount { 
  Test class definition:          : private static int requestcount { 
  Test struct definition:         : private static int requestcount { 
  default:       : get ; 
  Test C# function definition:    : private static int requestcount { 
  default:       : set ; 
  Test control definition:        : private static int requestcount { 
--- stack size = 3 ---
  Test C# declaration:            : private static int requestcount { 
  Test C# executable:             : private static int requestcount { 
  Test default:                   : private static int requestcount { 
  executable     : = 1 ; 
  Handle default:                 : private static int requestcount { 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = 1 ; 
  Test end scope                  : = 1 ; 
  Test preproc statement:         : = 1 ; 
  Test namespace definition:      : = 1 ; 
  Test class definition:          : = 1 ; 
  Test struct definition:         : = 1 ; 
  Test C# function definition:    : = 1 ; 
  Test control definition:        : = 1 ; 
  Test C# declaration:            : = 1 ; 
  Test C# executable:             : = 1 ; 
  Handle C# executable:           : = 1 ; 
  Test begin scope                : private static int proc { 
  handle begin scope              : private static int proc { 
--- stack size = 4 ---
  Test end scope                  : private static int proc { 
  Test preproc statement:         : private static int proc { 
  Test namespace definition:      : private static int proc { 
  default:       : private static int proc { 
  Test class definition:          : private static int proc { 
  Test struct definition:         : private static int proc { 
  default:       : get ; 
  Test C# function definition:    : private static int proc { 
  Test control definition:        : private static int proc { 
  default:       : set ; 
  Test C# declaration:            : private static int proc { 
--- stack size = 3 ---
  Test C# executable:             : private static int proc { 
  Test default:                   : private static int proc { 
  Handle default:                 : private static int proc { 
  executable     : = 0 ; 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = 0 ; 
  Test end scope                  : = 0 ; 
  Test preproc statement:         : = 0 ; 
  Test namespace definition:      : = 0 ; 
  Test class definition:          : = 0 ; 
  Test struct definition:         : = 0 ; 
  Test C# function definition:    : = 0 ; 
  Test control definition:        : = 0 ; 
  Test C# declaration:            : = 0 ; 
  Test C# executable:             : = 0 ; 
  Handle C# executable:           : = 0 ; 
  Test begin scope                : private static int tccnt { 
  handle begin scope              : private static int tccnt { 
--- stack size = 4 ---
  Test end scope                  : private static int tccnt { 
  Test preproc statement:         : private static int tccnt { 
  Test namespace definition:      : private static int tccnt { 
  default:       : private static int tccnt { 
  Test class definition:          : private static int tccnt { 
  Test struct definition:         : private static int tccnt { 
  default:       : get ; 
  Test C# function definition:    : private static int tccnt { 
  Test control definition:        : private static int tccnt { 
  default:       : set ; 
  Test C# declaration:            : private static int tccnt { 
--- stack size = 3 ---
  Test C# executable:             : private static int tccnt { 
  Test default:                   : private static int tccnt { 
  Handle default:                 : private static int tccnt { 
  Test begin scope                : get ; 
  executable     : = 0 ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = 0 ; 
  Test end scope                  : = 0 ; 
  Test preproc statement:         : = 0 ; 
  Test namespace definition:      : = 0 ; 
  Test class definition:          : = 0 ; 
  Test struct definition:         : = 0 ; 
  Test C# function definition:    : = 0 ; 
  Test control definition:        : = 0 ; 
  Test C# declaration:            : = 0 ; 
  Test C# executable:             : = 0 ; 
  Handle C# executable:           : = 0 ; 
  Test begin scope                : private static List < String > testlist { 
  handle begin scope              : private static List < String > testlist { 
--- stack size = 4 ---
  Test end scope                  : private static List < String > testlist { 
  Test preproc statement:         : private static List < String > testlist { 
  Test namespace definition:      : private static List < String > testlist { 
  Test class definition:          : private static List < String > testlist { 
  default:       : private static List < String > testlist { 
  Test struct definition:         : private static List < String > testlist { 
  default:       : get ; 
  Test C# function definition:    : private static List < String > testlist { 
  Test control definition:        : private static List < String > testlist { 
  default:       : set ; 
  Test C# declaration:            : private static List < String > testlist { 
--- stack size = 3 ---
  Test C# executable:             : private static List < String > testlist { 
  Test default:                   : private static List < String > testlist { 
  Handle default:                 : private static List < String > testlist { 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  function declar: = new List < String > ( ) ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = new List < String > ( ) ; 
  Test end scope                  : = new List < String > ( ) ; 
  Test preproc statement:         : = new List < String > ( ) ; 
  Test namespace definition:      : = new List < String > ( ) ; 
  Test class definition:          : = new List < String > ( ) ; 
  Test struct definition:         : = new List < String > ( ) ; 
  Test C# function definition:    : = new List < String > ( ) ; 
  Test control definition:        : = new List < String > ( ) ; 
  Test C# declaration:            : = new List < String > ( ) ; 
  Handle C# declaration:          : = new List < String > ( ) ; 
  Test begin scope                : private static List < String > tcfilenames { 
  handle begin scope              : private static List < String > tcfilenames { 
--- stack size = 4 ---
  Test end scope                  : private static List < String > tcfilenames { 
  Test preproc statement:         : private static List < String > tcfilenames { 
  Test namespace definition:      : private static List < String > tcfilenames { 
  Test class definition:          : private static List < String > tcfilenames { 
  default:       : private static List < String > tcfilenames { 
  Test struct definition:         : private static List < String > tcfilenames { 
  default:       : get ; 
  Test C# function definition:    : private static List < String > tcfilenames { 
  default:       : set ; 
  Test control definition:        : private static List < String > tcfilenames { 
--- stack size = 3 ---
  Test C# declaration:            : private static List < String > tcfilenames { 
  Test C# executable:             : private static List < String > tcfilenames { 
  Test default:                   : private static List < String > tcfilenames { 
  Handle default:                 : private static List < String > tcfilenames { 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  function declar: = new List < String > ( ) ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = new List < String > ( ) ; 
  Test end scope                  : = new List < String > ( ) ; 
  Test preproc statement:         : = new List < String > ( ) ; 
  Test namespace definition:      : = new List < String > ( ) ; 
  Test class definition:          : = new List < String > ( ) ; 
  Test struct definition:         : = new List < String > ( ) ; 
  Test C# function definition:    : = new List < String > ( ) ; 
  Test control definition:        : = new List < String > ( ) ; 
  Test C# declaration:            : = new List < String > ( ) ; 
  Handle C# declaration:          : = new List < String > ( ) ; 
  Test begin scope                : private static int xmlcnt { 
  handle begin scope              : private static int xmlcnt { 
--- stack size = 4 ---
  Test end scope                  : private static int xmlcnt { 
  Test preproc statement:         : private static int xmlcnt { 
  Test namespace definition:      : private static int xmlcnt { 
  default:       : private static int xmlcnt { 
  Test class definition:          : private static int xmlcnt { 
  Test struct definition:         : private static int xmlcnt { 
  default:       : get ; 
  Test C# function definition:    : private static int xmlcnt { 
  Test control definition:        : private static int xmlcnt { 
  default:       : set ; 
  Test C# declaration:            : private static int xmlcnt { 
--- stack size = 3 ---
  Test C# executable:             : private static int xmlcnt { 
  Test default:                   : private static int xmlcnt { 
  Handle default:                 : private static int xmlcnt { 
  Test begin scope                : get ; 
  executable     : = 1 ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = 1 ; 
  Test end scope                  : = 1 ; 
  Test preproc statement:         : = 1 ; 
  Test namespace definition:      : = 1 ; 
  Test class definition:          : = 1 ; 
  Test struct definition:         : = 1 ; 
  Test C# function definition:    : = 1 ; 
  Test control definition:        : = 1 ; 
  Test C# declaration:            : = 1 ; 
  Test C# executable:             : = 1 ; 
  Handle C# executable:           : = 1 ; 
  Test begin scope                : private static Comm comm { 
  handle begin scope              : private static Comm comm { 
--- stack size = 4 ---
  Test end scope                  : private static Comm comm { 
  Test preproc statement:         : private static Comm comm { 
  Test namespace definition:      : private static Comm comm { 
  default:       : private static Comm comm { 
  Test class definition:          : private static Comm comm { 
  Test struct definition:         : private static Comm comm { 
  default:       : get ; 
  Test C# function definition:    : private static Comm comm { 
  Test control definition:        : private static Comm comm { 
  default:       : set ; 
  Test C# declaration:            : private static Comm comm { 
--- stack size = 3 ---
  Test C# executable:             : private static Comm comm { 
  Test default:                   : private static Comm comm { 
  Handle default:                 : private static Comm comm { 
  Test begin scope                : get ; 
  executable     : = null ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = null ; 
  Test end scope                  : = null ; 
  Test preproc statement:         : = null ; 
  Test namespace definition:      : = null ; 
  Test class definition:          : = null ; 
  Test struct definition:         : = null ; 
  Test C# function definition:    : = null ; 
  Test control definition:        : = null ; 
  Test C# declaration:            : = null ; 
  Test C# executable:             : = null ; 
  Handle C# executable:           : = null ; 
  Test begin scope                : public MainWindow ( ) { 
  handle begin scope              : public MainWindow ( ) { 
--- stack size = 4 ---
  Test end scope                  : public MainWindow ( ) { 
  Test preproc statement:         : public MainWindow ( ) { 
  Test namespace definition:      : public MainWindow ( ) { 
  function def   : public MainWindow ( ) { 
  Test class definition:          : public MainWindow ( ) { 
  Test struct definition:         : public MainWindow ( ) { 
  Test C# function definition:    : public MainWindow ( ) { 
  Handle C# function definition:  : public MainWindow ( ) { 
  Test begin scope                : InitializeComponent ( ) ; 
  Test end scope                  : InitializeComponent ( ) ; 
  executable     : InitializeComponent ( ) ; 
  Test preproc statement:         : InitializeComponent ( ) ; 
  Test namespace definition:      : InitializeComponent ( ) ; 
  Test class definition:          : InitializeComponent ( ) ; 
  Test struct definition:         : InitializeComponent ( ) ; 
  Test C# function definition:    : InitializeComponent ( ) ; 
  Test control definition:        : InitializeComponent ( ) ; 
  executable     : comm = new Comm ( , 8074 ) ; 
  Test C# declaration:            : InitializeComponent ( ) ; 
  Test C# executable:             : InitializeComponent ( ) ; 
  Handle C# executable:           : InitializeComponent ( ) ; 
  Test begin scope                : comm = new Comm ( , 8074 ) ; 
  data declar    : Thread listenTrd = null ; 
  Test end scope                  : comm = new Comm ( , 8074 ) ; 
  Test preproc statement:         : comm = new Comm ( , 8074 ) ; 
  Test namespace definition:      : comm = new Comm ( , 8074 ) ; 
  Test class definition:          : comm = new Comm ( , 8074 ) ; 
  Test struct definition:         : comm = new Comm ( , 8074 ) ; 
  executable     : listenTrd = new Thread ( listen ) ; 
  Test C# function definition:    : comm = new Comm ( , 8074 ) ; 
  Test control definition:        : comm = new Comm ( , 8074 ) ; 
  Test C# declaration:            : comm = new Comm ( , 8074 ) ; 
  Test C# executable:             : comm = new Comm ( , 8074 ) ; 
  Handle C# executable:           : comm = new Comm ( , 8074 ) ; 
  executable     : listenTrd . Start ( ) ; 
  Test begin scope                : Thread listenTrd = null ; 
  Test end scope                  : Thread listenTrd = null ; 
  Test preproc statement:         : Thread listenTrd = null ; 
  executable     : refreshCsList ( ) ; 
  Test namespace definition:      : Thread listenTrd = null ; 
  Test class definition:          : Thread listenTrd = null ; 
  Test struct definition:         : Thread listenTrd = null ; 
  executable     : refreshXmlList ( ) ; 
  Test C# function definition:    : Thread listenTrd = null ; 
  Test control definition:        : Thread listenTrd = null ; 
  Test C# declaration:            : Thread listenTrd = null ; 
  Handle C# declaration:          : Thread listenTrd = null ; 
  executable     : createChildMessage ( 2 ) ; 
  Test begin scope                : listenTrd = new Thread ( listen ) ; 
  Test end scope                  : listenTrd = new Thread ( listen ) ; 
  Test preproc statement:         : listenTrd = new Thread ( listen ) ; 
  Test namespace definition:      : listenTrd = new Thread ( listen ) ; 
  executable     : sendTestRequestToBuild ( "TestRequest_3.xml" ) ; 
  Test class definition:          : listenTrd = new Thread ( listen ) ; 
--- stack size = 3 ---
  Test struct definition:         : listenTrd = new Thread ( listen ) ; 
  Test C# function definition:    : listenTrd = new Thread ( listen ) ; 
  Test control definition:        : listenTrd = new Thread ( listen ) ; 
  Test C# declaration:            : listenTrd = new Thread ( listen ) ; 
  Test C# executable:             : listenTrd = new Thread ( listen ) ; 
  Handle C# executable:           : listenTrd = new Thread ( listen ) ; 
  Test begin scope                : listenTrd . Start ( ) ; 
  Test end scope                  : listenTrd . Start ( ) ; 
  Test preproc statement:         : listenTrd . Start ( ) ; 
  Test namespace definition:      : listenTrd . Start ( ) ; 
  Test class definition:          : listenTrd . Start ( ) ; 
  Test struct definition:         : listenTrd . Start ( ) ; 
  Test C# function definition:    : listenTrd . Start ( ) ; 
  Test control definition:        : listenTrd . Start ( ) ; 
  Test C# declaration:            : listenTrd . Start ( ) ; 
  Test C# executable:             : listenTrd . Start ( ) ; 
  Handle C# executable:           : listenTrd . Start ( ) ; 
  Test begin scope                : refreshCsList ( ) ; 
  Test end scope                  : refreshCsList ( ) ; 
  Test preproc statement:         : refreshCsList ( ) ; 
  Test namespace definition:      : refreshCsList ( ) ; 
  Test class definition:          : refreshCsList ( ) ; 
  Test struct definition:         : refreshCsList ( ) ; 
  Test C# function definition:    : refreshCsList ( ) ; 
  Test control definition:        : refreshCsList ( ) ; 
  Test C# declaration:            : refreshCsList ( ) ; 
  Test C# executable:             : refreshCsList ( ) ; 
  Handle C# executable:           : refreshCsList ( ) ; 
  Test begin scope                : refreshXmlList ( ) ; 
  Test end scope                  : refreshXmlList ( ) ; 
  Test preproc statement:         : refreshXmlList ( ) ; 
  Test namespace definition:      : refreshXmlList ( ) ; 
  Test class definition:          : refreshXmlList ( ) ; 
  Test struct definition:         : refreshXmlList ( ) ; 
  Test C# function definition:    : refreshXmlList ( ) ; 
  Test control definition:        : refreshXmlList ( ) ; 
  Test C# declaration:            : refreshXmlList ( ) ; 
  Test C# executable:             : refreshXmlList ( ) ; 
  Handle C# executable:           : refreshXmlList ( ) ; 
  Test begin scope                : createChildMessage ( 2 ) ; 
  Test end scope                  : createChildMessage ( 2 ) ; 
  Test preproc statement:         : createChildMessage ( 2 ) ; 
  Test namespace definition:      : createChildMessage ( 2 ) ; 
  Test class definition:          : createChildMessage ( 2 ) ; 
  Test struct definition:         : createChildMessage ( 2 ) ; 
  Test C# function definition:    : createChildMessage ( 2 ) ; 
  Test control definition:        : createChildMessage ( 2 ) ; 
  Test C# declaration:            : createChildMessage ( 2 ) ; 
  Test C# executable:             : createChildMessage ( 2 ) ; 
  Handle C# executable:           : createChildMessage ( 2 ) ; 
  Test begin scope                : sendTestRequestToBuild ( "TestRequest_3.xml" ) ; 
  Test end scope                  : sendTestRequestToBuild ( "TestRequest_3.xml" ) ; 
  Test preproc statement:         : sendTestRequestToBuild ( "TestRequest_3.xml" ) ; 
  Test namespace definition:      : sendTestRequestToBuild ( "TestRequest_3.xml" ) ; 
  Test class definition:          : sendTestRequestToBuild ( "TestRequest_3.xml" ) ; 
  Test struct definition:         : sendTestRequestToBuild ( "TestRequest_3.xml" ) ; 
  Test C# function definition:    : sendTestRequestToBuild ( "TestRequest_3.xml" ) ; 
  Test control definition:        : sendTestRequestToBuild ( "TestRequest_3.xml" ) ; 
  Test C# declaration:            : sendTestRequestToBuild ( "TestRequest_3.xml" ) ; 
  Test C# executable:             : sendTestRequestToBuild ( "TestRequest_3.xml" ) ; 
  Handle C# executable:           : sendTestRequestToBuild ( "TestRequest_3.xml" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : void listen ( ) { 
  handle begin scope              : void listen ( ) { 
--- stack size = 4 ---
  Test end scope                  : void listen ( ) { 
  Test preproc statement:         : void listen ( ) { 
  Test namespace definition:      : void listen ( ) { 
  function def   : void listen ( ) { 
  Test class definition:          : void listen ( ) { 
  Test struct definition:         : void listen ( ) { 
  Test C# function definition:    : void listen ( ) { 
  Handle C# function definition:  : void listen ( ) { 
  Test begin scope                : while ( true ) { 
  handle begin scope              : while ( true ) { 
--- stack size = 5 ---
  Test end scope                  : while ( true ) { 
  Test preproc statement:         : while ( true ) { 
  Test namespace definition:      : while ( true ) { 
  control def    : while ( true ) { 
  Test class definition:          : while ( true ) { 
  Test struct definition:         : while ( true ) { 
  Test C# function definition:    : while ( true ) { 
  Test control definition:        : while ( true ) { 
  Handle control definition:      : while ( true ) { 
  executable     : ClientEnvironment . verbose = true ; 
  Test begin scope                : ClientEnvironment . verbose = true ; 
  Test end scope                  : ClientEnvironment . verbose = true ; 
  Test preproc statement:         : ClientEnvironment . verbose = true ; 
  Test namespace definition:      : ClientEnvironment . verbose = true ; 
  Test class definition:          : ClientEnvironment . verbose = true ; 
  Test struct definition:         : ClientEnvironment . verbose = true ; 
  Test C# function definition:    : ClientEnvironment . verbose = true ; 
  function declar: CommMessage crcvMsg = comm . getMessage ( ) ; 
  Test control definition:        : ClientEnvironment . verbose = true ; 
  Test C# declaration:            : ClientEnvironment . verbose = true ; 
  Test C# executable:             : ClientEnvironment . verbose = true ; 
  Handle C# executable:           : ClientEnvironment . verbose = true ; 
  Test begin scope                : CommMessage crcvMsg = comm . getMessage ( ) ; 
  Test end scope                  : CommMessage crcvMsg = comm . getMessage ( ) ; 
  Test preproc statement:         : CommMessage crcvMsg = comm . getMessage ( ) ; 
  Test namespace definition:      : CommMessage crcvMsg = comm . getMessage ( ) ; 
  Test class definition:          : CommMessage crcvMsg = comm . getMessage ( ) ; 
  Test struct definition:         : CommMessage crcvMsg = comm . getMessage ( ) ; 
  Test C# function definition:    : CommMessage crcvMsg = comm . getMessage ( ) ; 
  Test control definition:        : CommMessage crcvMsg = comm . getMessage ( ) ; 
  Test C# declaration:            : CommMessage crcvMsg = comm . getMessage ( ) ; 
  Handle C# declaration:          : CommMessage crcvMsg = comm . getMessage ( ) ; 
  Test begin scope                : if ( crcvMsg . body != null ) { 
  handle begin scope              : if ( crcvMsg . body != null ) { 
--- stack size = 6 ---
  Test end scope                  : if ( crcvMsg . body != null ) { 
  Test preproc statement:         : if ( crcvMsg . body != null ) { 
  Test namespace definition:      : if ( crcvMsg . body != null ) { 
  control def    : if ( crcvMsg . body != null ) { 
  Test class definition:          : if ( crcvMsg . body != null ) { 
  Test struct definition:         : if ( crcvMsg . body != null ) { 
  Test C# function definition:    : if ( crcvMsg . body != null ) { 
  Test control definition:        : if ( crcvMsg . body != null ) { 
  Handle control definition:      : if ( crcvMsg . body != null ) { 
  Test begin scope                : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  executable     : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test end scope                  : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test preproc statement:         : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test namespace definition:      : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test class definition:          : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test struct definition:         : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test C# function definition:    : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test control definition:        : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test C# declaration:            : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test C# executable:             : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Handle C# executable:           : if ( ClientEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test begin scope                : if ( crcvMsg . command . Equals ( "csFileListFromRepo" ) ) { 
  handle begin scope              : if ( crcvMsg . command . Equals ( "csFileListFromRepo" ) ) { 
--- stack size = 7 ---
  Test end scope                  : if ( crcvMsg . command . Equals ( "csFileListFromRepo" ) ) { 
  Test preproc statement:         : if ( crcvMsg . command . Equals ( "csFileListFromRepo" ) ) { 
  Test namespace definition:      : if ( crcvMsg . command . Equals ( "csFileListFromRepo" ) ) { 
  control def    : if ( crcvMsg . command . Equals ( "csFileListFromRepo" ) ) { 
  Test class definition:          : if ( crcvMsg . command . Equals ( "csFileListFromRepo" ) ) { 
  Test struct definition:         : if ( crcvMsg . command . Equals ( "csFileListFromRepo" ) ) { 
  Test C# function definition:    : if ( crcvMsg . command . Equals ( "csFileListFromRepo" ) ) { 
  Test control definition:        : if ( crcvMsg . command . Equals ( "csFileListFromRepo" ) ) { 
  Handle control definition:      : if ( crcvMsg . command . Equals ( "csFileListFromRepo" ) ) { 
  executable     : Console . WriteLine ( crcvMsg . body ) ; 
  Test begin scope                : Console . WriteLine ( crcvMsg . body ) ; 
  Test end scope                  : Console . WriteLine ( crcvMsg . body ) ; 
  Test preproc statement:         : Console . WriteLine ( crcvMsg . body ) ; 
  Test namespace definition:      : Console . WriteLine ( crcvMsg . body ) ; 
  Test class definition:          : Console . WriteLine ( crcvMsg . body ) ; 
  executable     : csFileListFromRepo ( crcvMsg . body ) ; 
  Test struct definition:         : Console . WriteLine ( crcvMsg . body ) ; 
--- stack size = 6 ---
  Test C# function definition:    : Console . WriteLine ( crcvMsg . body ) ; 
  Test control definition:        : Console . WriteLine ( crcvMsg . body ) ; 
  Test C# declaration:            : Console . WriteLine ( crcvMsg . body ) ; 
  Test C# executable:             : Console . WriteLine ( crcvMsg . body ) ; 
  Handle C# executable:           : Console . WriteLine ( crcvMsg . body ) ; 
  Test begin scope                : csFileListFromRepo ( crcvMsg . body ) ; 
  Test end scope                  : csFileListFromRepo ( crcvMsg . body ) ; 
  Test preproc statement:         : csFileListFromRepo ( crcvMsg . body ) ; 
  Test namespace definition:      : csFileListFromRepo ( crcvMsg . body ) ; 
  Test class definition:          : csFileListFromRepo ( crcvMsg . body ) ; 
  Test struct definition:         : csFileListFromRepo ( crcvMsg . body ) ; 
  Test C# function definition:    : csFileListFromRepo ( crcvMsg . body ) ; 
  Test control definition:        : csFileListFromRepo ( crcvMsg . body ) ; 
  Test C# declaration:            : csFileListFromRepo ( crcvMsg . body ) ; 
  Test C# executable:             : csFileListFromRepo ( crcvMsg . body ) ; 
  Handle C# executable:           : csFileListFromRepo ( crcvMsg . body ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : if ( crcvMsg . command . Equals ( "xmlsaved" ) ) { 
  handle begin scope              : if ( crcvMsg . command . Equals ( "xmlsaved" ) ) { 
--- stack size = 7 ---
  Test end scope                  : if ( crcvMsg . command . Equals ( "xmlsaved" ) ) { 
  Test preproc statement:         : if ( crcvMsg . command . Equals ( "xmlsaved" ) ) { 
  Test namespace definition:      : if ( crcvMsg . command . Equals ( "xmlsaved" ) ) { 
  control def    : if ( crcvMsg . command . Equals ( "xmlsaved" ) ) { 
  Test class definition:          : if ( crcvMsg . command . Equals ( "xmlsaved" ) ) { 
  Test struct definition:         : if ( crcvMsg . command . Equals ( "xmlsaved" ) ) { 
  Test C# function definition:    : if ( crcvMsg . command . Equals ( "xmlsaved" ) ) { 
  function declar: refreshXmlList ( ) ; 
  Test control definition:        : if ( crcvMsg . command . Equals ( "xmlsaved" ) ) { 
--- stack size = 6 ---
  Handle control definition:      : if ( crcvMsg . command . Equals ( "xmlsaved" ) ) { 
  Test begin scope                : refreshXmlList ( ) ; 
  Test end scope                  : refreshXmlList ( ) ; 
  Test preproc statement:         : refreshXmlList ( ) ; 
  Test namespace definition:      : refreshXmlList ( ) ; 
  Test class definition:          : refreshXmlList ( ) ; 
  Test struct definition:         : refreshXmlList ( ) ; 
  Test C# function definition:    : refreshXmlList ( ) ; 
  Test control definition:        : refreshXmlList ( ) ; 
  Test C# declaration:            : refreshXmlList ( ) ; 
  Handle C# declaration:          : refreshXmlList ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : if ( crcvMsg . command . Equals ( "deleterequest" ) ) { 
  handle begin scope              : if ( crcvMsg . command . Equals ( "deleterequest" ) ) { 
--- stack size = 7 ---
  Test end scope                  : if ( crcvMsg . command . Equals ( "deleterequest" ) ) { 
  Test preproc statement:         : if ( crcvMsg . command . Equals ( "deleterequest" ) ) { 
  Test namespace definition:      : if ( crcvMsg . command . Equals ( "deleterequest" ) ) { 
  control def    : if ( crcvMsg . command . Equals ( "deleterequest" ) ) { 
  Test class definition:          : if ( crcvMsg . command . Equals ( "deleterequest" ) ) { 
  Test struct definition:         : if ( crcvMsg . command . Equals ( "deleterequest" ) ) { 
  Test C# function definition:    : if ( crcvMsg . command . Equals ( "deleterequest" ) ) { 
  Test control definition:        : if ( crcvMsg . command . Equals ( "deleterequest" ) ) { 
  Handle control definition:      : if ( crcvMsg . command . Equals ( "deleterequest" ) ) { 
  executable     : if ( crcvMsg . body . Equals ( "success" ) ) refreshXmlList ( ) ; 
  Test begin scope                : if ( crcvMsg . body . Equals ( "success" ) ) refreshXmlList ( ) ; 
  Test end scope                  : if ( crcvMsg . body . Equals ( "success" ) ) refreshXmlList ( ) ; 
  Test preproc statement:         : if ( crcvMsg . body . Equals ( "success" ) ) refreshXmlList ( ) ; 
  Test namespace definition:      : if ( crcvMsg . body . Equals ( "success" ) ) refreshXmlList ( ) ; 
  Test class definition:          : if ( crcvMsg . body . Equals ( "success" ) ) refreshXmlList ( ) ; 
  Test struct definition:         : if ( crcvMsg . body . Equals ( "success" ) ) refreshXmlList ( ) ; 
  executable     : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test C# function definition:    : if ( crcvMsg . body . Equals ( "success" ) ) refreshXmlList ( ) ; 
--- stack size = 6 ---
  Test control definition:        : if ( crcvMsg . body . Equals ( "success" ) ) refreshXmlList ( ) ; 
  Test C# declaration:            : if ( crcvMsg . body . Equals ( "success" ) ) refreshXmlList ( ) ; 
  Test C# executable:             : if ( crcvMsg . body . Equals ( "success" ) ) refreshXmlList ( ) ; 
  Handle C# executable:           : if ( crcvMsg . body . Equals ( "success" ) ) refreshXmlList ( ) ; 
  Test begin scope                : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test end scope                  : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test preproc statement:         : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test namespace definition:      : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test class definition:          : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test struct definition:         : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test C# function definition:    : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test control definition:        : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test C# declaration:            : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test C# executable:             : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Handle C# executable:           : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : if ( crcvMsg . command . Equals ( "deletefiles" ) ) { 
  handle begin scope              : if ( crcvMsg . command . Equals ( "deletefiles" ) ) { 
--- stack size = 7 ---
  Test end scope                  : if ( crcvMsg . command . Equals ( "deletefiles" ) ) { 
  Test preproc statement:         : if ( crcvMsg . command . Equals ( "deletefiles" ) ) { 
  Test namespace definition:      : if ( crcvMsg . command . Equals ( "deletefiles" ) ) { 
  control def    : if ( crcvMsg . command . Equals ( "deletefiles" ) ) { 
  Test class definition:          : if ( crcvMsg . command . Equals ( "deletefiles" ) ) { 
  Test struct definition:         : if ( crcvMsg . command . Equals ( "deletefiles" ) ) { 
  Test C# function definition:    : if ( crcvMsg . command . Equals ( "deletefiles" ) ) { 
  Test control definition:        : if ( crcvMsg . command . Equals ( "deletefiles" ) ) { 
  Handle control definition:      : if ( crcvMsg . command . Equals ( "deletefiles" ) ) { 
  executable     : if ( crcvMsg . body . Equals ( "success" ) ) refreshCsList ( ) ; 
  Test begin scope                : if ( crcvMsg . body . Equals ( "success" ) ) refreshCsList ( ) ; 
  Test end scope                  : if ( crcvMsg . body . Equals ( "success" ) ) refreshCsList ( ) ; 
  Test preproc statement:         : if ( crcvMsg . body . Equals ( "success" ) ) refreshCsList ( ) ; 
  Test namespace definition:      : if ( crcvMsg . body . Equals ( "success" ) ) refreshCsList ( ) ; 
  Test class definition:          : if ( crcvMsg . body . Equals ( "success" ) ) refreshCsList ( ) ; 
  Test struct definition:         : if ( crcvMsg . body . Equals ( "success" ) ) refreshCsList ( ) ; 
  Test C# function definition:    : if ( crcvMsg . body . Equals ( "success" ) ) refreshCsList ( ) ; 
  executable     : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test control definition:        : if ( crcvMsg . body . Equals ( "success" ) ) refreshCsList ( ) ; 
--- stack size = 6 ---
  Test C# declaration:            : if ( crcvMsg . body . Equals ( "success" ) ) refreshCsList ( ) ; 
  Test C# executable:             : if ( crcvMsg . body . Equals ( "success" ) ) refreshCsList ( ) ; 
  Handle C# executable:           : if ( crcvMsg . body . Equals ( "success" ) ) refreshCsList ( ) ; 
  Test begin scope                : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test end scope                  : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test preproc statement:         : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test namespace definition:      : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test class definition:          : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test struct definition:         : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test C# function definition:    : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test control definition:        : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test C# declaration:            : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test C# executable:             : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Handle C# executable:           : else MessageBox . Show ( String . Format ( crcvMsg . body ) ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : if ( crcvMsg . command . Equals ( "xmlFileListFromRepo" ) ) { 
  handle begin scope              : if ( crcvMsg . command . Equals ( "xmlFileListFromRepo" ) ) { 
--- stack size = 7 ---
  Test end scope                  : if ( crcvMsg . command . Equals ( "xmlFileListFromRepo" ) ) { 
  Test preproc statement:         : if ( crcvMsg . command . Equals ( "xmlFileListFromRepo" ) ) { 
  Test namespace definition:      : if ( crcvMsg . command . Equals ( "xmlFileListFromRepo" ) ) { 
  control def    : if ( crcvMsg . command . Equals ( "xmlFileListFromRepo" ) ) { 
  Test class definition:          : if ( crcvMsg . command . Equals ( "xmlFileListFromRepo" ) ) { 
  Test struct definition:         : if ( crcvMsg . command . Equals ( "xmlFileListFromRepo" ) ) { 
  Test C# function definition:    : if ( crcvMsg . command . Equals ( "xmlFileListFromRepo" ) ) { 
  Test control definition:        : if ( crcvMsg . command . Equals ( "xmlFileListFromRepo" ) ) { 
  Handle control definition:      : if ( crcvMsg . command . Equals ( "xmlFileListFromRepo" ) ) { 
  executable     : xmlFileListFromRepo ( crcvMsg . body ) ; 
  Test begin scope                : xmlFileListFromRepo ( crcvMsg . body ) ; 
--- stack size = 6 ---
  Test end scope                  : xmlFileListFromRepo ( crcvMsg . body ) ; 
  Test preproc statement:         : xmlFileListFromRepo ( crcvMsg . body ) ; 
  Test namespace definition:      : xmlFileListFromRepo ( crcvMsg . body ) ; 
  Test class definition:          : xmlFileListFromRepo ( crcvMsg . body ) ; 
  Test struct definition:         : xmlFileListFromRepo ( crcvMsg . body ) ; 
  Test C# function definition:    : xmlFileListFromRepo ( crcvMsg . body ) ; 
  Test control definition:        : xmlFileListFromRepo ( crcvMsg . body ) ; 
  Test C# declaration:            : xmlFileListFromRepo ( crcvMsg . body ) ; 
  Test C# executable:             : xmlFileListFromRepo ( crcvMsg . body ) ; 
  Handle C# executable:           : xmlFileListFromRepo ( crcvMsg . body ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : if ( crcvMsg . command . Equals ( "notification" ) ) { 
  handle begin scope              : if ( crcvMsg . command . Equals ( "notification" ) ) { 
--- stack size = 7 ---
  Test end scope                  : if ( crcvMsg . command . Equals ( "notification" ) ) { 
  Test preproc statement:         : if ( crcvMsg . command . Equals ( "notification" ) ) { 
  Test namespace definition:      : if ( crcvMsg . command . Equals ( "notification" ) ) { 
  Test class definition:          : if ( crcvMsg . command . Equals ( "notification" ) ) { 
  Test struct definition:         : if ( crcvMsg . command . Equals ( "notification" ) ) { 
  control def    : if ( crcvMsg . command . Equals ( "notification" ) ) { 
  Test C# function definition:    : if ( crcvMsg . command . Equals ( "notification" ) ) { 
  Test control definition:        : if ( crcvMsg . command . Equals ( "notification" ) ) { 
  Handle control definition:      : if ( crcvMsg . command . Equals ( "notification" ) ) { 
  Test begin scope                : Action act = ( ) = > { 
  handle begin scope              : Action act = ( ) = > { 
--- stack size = 8 ---
  Test end scope                  : Action act = ( ) = > { 
  Test preproc statement:         : Action act = ( ) = > { 
  Test namespace definition:      : Action act = ( ) = > { 
  Test class definition:          : Action act = ( ) = > { 
  default:       : Action act = ( ) = > { 
  Test struct definition:         : Action act = ( ) = > { 
  Test C# function definition:    : Action act = ( ) = > { 
  Test control definition:        : Action act = ( ) = > { 
  Test C# declaration:            : Action act = ( ) = > { 
  Test C# executable:             : Action act = ( ) = > { 
  Test default:                   : Action act = ( ) = > { 
  Handle default:                 : Action act = ( ) = > { 
  Test begin scope                : AddInNotificationList ( crcvMsg . body ) ; 
  executable     : AddInNotificationList ( crcvMsg . body ) ; 
  Test end scope                  : AddInNotificationList ( crcvMsg . body ) ; 
--- stack size = 7 ---
  Test preproc statement:         : AddInNotificationList ( crcvMsg . body ) ; 
  Test namespace definition:      : AddInNotificationList ( crcvMsg . body ) ; 
  Test class definition:          : AddInNotificationList ( crcvMsg . body ) ; 
  Test struct definition:         : AddInNotificationList ( crcvMsg . body ) ; 
  Test C# function definition:    : AddInNotificationList ( crcvMsg . body ) ; 
  Test control definition:        : AddInNotificationList ( crcvMsg . body ) ; 
  Test C# declaration:            : AddInNotificationList ( crcvMsg . body ) ; 
  Test C# executable:             : AddInNotificationList ( crcvMsg . body ) ; 
  Handle C# executable:           : AddInNotificationList ( crcvMsg . body ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : ; 
  Test begin scope                : string [ ] args = new string [ ] { 
  handle begin scope              : string [ ] args = new string [ ] { 
--- stack size = 8 ---
  Test end scope                  : string [ ] args = new string [ ] { 
  Test preproc statement:         : string [ ] args = new string [ ] { 
  Test namespace definition:      : string [ ] args = new string [ ] { 
  Test class definition:          : string [ ] args = new string [ ] { 
  Test struct definition:         : string [ ] args = new string [ ] { 
  default:       : string [ ] args = new string [ ] { 
  Test C# function definition:    : string [ ] args = new string [ ] { 
--- stack size = 7 ---
  Test control definition:        : string [ ] args = new string [ ] { 
  Test C# declaration:            : string [ ] args = new string [ ] { 
  Test C# executable:             : string [ ] args = new string [ ] { 
  Test default:                   : string [ ] args = new string [ ] { 
  Handle default:                 : string [ ] args = new string [ ] { 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : ; 
  Test begin scope                : Dispatcher . Invoke ( act , args ) ; 
  Test end scope                  : Dispatcher . Invoke ( act , args ) ; 
  Test preproc statement:         : Dispatcher . Invoke ( act , args ) ; 
  executable     : Dispatcher . Invoke ( act , args ) ; 
  Test namespace definition:      : Dispatcher . Invoke ( act , args ) ; 
--- stack size = 6 ---
  Test class definition:          : Dispatcher . Invoke ( act , args ) ; 
  Test struct definition:         : Dispatcher . Invoke ( act , args ) ; 
  Test C# function definition:    : Dispatcher . Invoke ( act , args ) ; 
  Test control definition:        : Dispatcher . Invoke ( act , args ) ; 
  Test C# declaration:            : Dispatcher . Invoke ( act , args ) ; 
  Test C# executable:             : Dispatcher . Invoke ( act , args ) ; 
  Handle C# executable:           : Dispatcher . Invoke ( act , args ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : if ( crcvMsg . command . Equals ( "fileContents" ) ) { 
  handle begin scope              : if ( crcvMsg . command . Equals ( "fileContents" ) ) { 
--- stack size = 7 ---
  Test end scope                  : if ( crcvMsg . command . Equals ( "fileContents" ) ) { 
  Test preproc statement:         : if ( crcvMsg . command . Equals ( "fileContents" ) ) { 
  Test namespace definition:      : if ( crcvMsg . command . Equals ( "fileContents" ) ) { 
  control def    : if ( crcvMsg . command . Equals ( "fileContents" ) ) { 
  Test class definition:          : if ( crcvMsg . command . Equals ( "fileContents" ) ) { 
  Test struct definition:         : if ( crcvMsg . command . Equals ( "fileContents" ) ) { 
  Test C# function definition:    : if ( crcvMsg . command . Equals ( "fileContents" ) ) { 
  Test control definition:        : if ( crcvMsg . command . Equals ( "fileContents" ) ) { 
  Handle control definition:      : if ( crcvMsg . command . Equals ( "fileContents" ) ) { 
  executable     : showcontents ( crcvMsg . body ) ; 
  Test begin scope                : showcontents ( crcvMsg . body ) ; 
--- stack size = 6 ---
  Test end scope                  : showcontents ( crcvMsg . body ) ; 
--- stack size = 5 ---
  Test preproc statement:         : showcontents ( crcvMsg . body ) ; 
  Test namespace definition:      : showcontents ( crcvMsg . body ) ; 
  Test class definition:          : showcontents ( crcvMsg . body ) ; 
  Test struct definition:         : showcontents ( crcvMsg . body ) ; 
  Test C# function definition:    : showcontents ( crcvMsg . body ) ; 
  Test control definition:        : showcontents ( crcvMsg . body ) ; 
  Test C# declaration:            : showcontents ( crcvMsg . body ) ; 
  executable     : Thread . Sleep ( 1000 ) ; 
  Test C# executable:             : showcontents ( crcvMsg . body ) ; 
--- stack size = 4 ---
  Handle C# executable:           : showcontents ( crcvMsg . body ) ; 
--- stack size = 3 ---
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : Thread . Sleep ( 1000 ) ; 
  Test end scope                  : Thread . Sleep ( 1000 ) ; 
  Test preproc statement:         : Thread . Sleep ( 1000 ) ; 
  Test namespace definition:      : Thread . Sleep ( 1000 ) ; 
  Test class definition:          : Thread . Sleep ( 1000 ) ; 
  Test struct definition:         : Thread . Sleep ( 1000 ) ; 
  Test C# function definition:    : Thread . Sleep ( 1000 ) ; 
  Test control definition:        : Thread . Sleep ( 1000 ) ; 
  Test C# declaration:            : Thread . Sleep ( 1000 ) ; 
  Test C# executable:             : Thread . Sleep ( 1000 ) ; 
  Handle C# executable:           : Thread . Sleep ( 1000 ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : void showcontents ( string contents ) { 
  handle begin scope              : void showcontents ( string contents ) { 
--- stack size = 4 ---
  Test end scope                  : void showcontents ( string contents ) { 
  Test preproc statement:         : void showcontents ( string contents ) { 
  function def   : void showcontents ( string contents ) { 
  Test namespace definition:      : void showcontents ( string contents ) { 
  Test class definition:          : void showcontents ( string contents ) { 
  Test struct definition:         : void showcontents ( string contents ) { 
  Test C# function definition:    : void showcontents ( string contents ) { 
  Handle C# function definition:  : void showcontents ( string contents ) { 
  Test begin scope                : Thread t = new Thread ( ( ) = > PopupthreadProc ( contents ) ) ; 
  data declar    : Thread t = new Thread ( ( ) = > PopupthreadProc ( contents ) ) ; 
  Test end scope                  : Thread t = new Thread ( ( ) = > PopupthreadProc ( contents ) ) ; 
  Test preproc statement:         : Thread t = new Thread ( ( ) = > PopupthreadProc ( contents ) ) ; 
  Test namespace definition:      : Thread t = new Thread ( ( ) = > PopupthreadProc ( contents ) ) ; 
  Test class definition:          : Thread t = new Thread ( ( ) = > PopupthreadProc ( contents ) ) ; 
  executable     : t . SetApartmentState ( ApartmentState . STA ) ; 
  Test struct definition:         : Thread t = new Thread ( ( ) = > PopupthreadProc ( contents ) ) ; 
  Test C# function definition:    : Thread t = new Thread ( ( ) = > PopupthreadProc ( contents ) ) ; 
  Test control definition:        : Thread t = new Thread ( ( ) = > PopupthreadProc ( contents ) ) ; 
  executable     : t . Start ( ) ; 
  Test C# declaration:            : Thread t = new Thread ( ( ) = > PopupthreadProc ( contents ) ) ; 
--- stack size = 3 ---
  Handle C# declaration:          : Thread t = new Thread ( ( ) = > PopupthreadProc ( contents ) ) ; 
  Test begin scope                : t . SetApartmentState ( ApartmentState . STA ) ; 
  Test end scope                  : t . SetApartmentState ( ApartmentState . STA ) ; 
  Test preproc statement:         : t . SetApartmentState ( ApartmentState . STA ) ; 
  Test namespace definition:      : t . SetApartmentState ( ApartmentState . STA ) ; 
  Test class definition:          : t . SetApartmentState ( ApartmentState . STA ) ; 
  Test struct definition:         : t . SetApartmentState ( ApartmentState . STA ) ; 
  Test C# function definition:    : t . SetApartmentState ( ApartmentState . STA ) ; 
  Test control definition:        : t . SetApartmentState ( ApartmentState . STA ) ; 
  Test C# declaration:            : t . SetApartmentState ( ApartmentState . STA ) ; 
  Test C# executable:             : t . SetApartmentState ( ApartmentState . STA ) ; 
  Handle C# executable:           : t . SetApartmentState ( ApartmentState . STA ) ; 
  Test begin scope                : t . Start ( ) ; 
  Test end scope                  : t . Start ( ) ; 
  Test preproc statement:         : t . Start ( ) ; 
  Test namespace definition:      : t . Start ( ) ; 
  Test class definition:          : t . Start ( ) ; 
  Test struct definition:         : t . Start ( ) ; 
  Test C# function definition:    : t . Start ( ) ; 
  Test control definition:        : t . Start ( ) ; 
  Test C# declaration:            : t . Start ( ) ; 
  Test C# executable:             : t . Start ( ) ; 
  Handle C# executable:           : t . Start ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void PopupthreadProc ( string contents ) { 
  handle begin scope              : private void PopupthreadProc ( string contents ) { 
--- stack size = 4 ---
  Test end scope                  : private void PopupthreadProc ( string contents ) { 
  Test preproc statement:         : private void PopupthreadProc ( string contents ) { 
  Test namespace definition:      : private void PopupthreadProc ( string contents ) { 
  function def   : private void PopupthreadProc ( string contents ) { 
  Test class definition:          : private void PopupthreadProc ( string contents ) { 
  Test struct definition:         : private void PopupthreadProc ( string contents ) { 
  Test C# function definition:    : private void PopupthreadProc ( string contents ) { 
  Handle C# function definition:  : private void PopupthreadProc ( string contents ) { 
  Test begin scope                : CodePopUp popup = new CodePopUp ( ) ; 
  data declar    : CodePopUp popup = new CodePopUp ( ) ; 
  Test end scope                  : CodePopUp popup = new CodePopUp ( ) ; 
  Test preproc statement:         : CodePopUp popup = new CodePopUp ( ) ; 
  Test namespace definition:      : CodePopUp popup = new CodePopUp ( ) ; 
  Test class definition:          : CodePopUp popup = new CodePopUp ( ) ; 
  Test struct definition:         : CodePopUp popup = new CodePopUp ( ) ; 
  executable     : popup . codeView . Text = contents ; 
  Test C# function definition:    : CodePopUp popup = new CodePopUp ( ) ; 
  Test control definition:        : CodePopUp popup = new CodePopUp ( ) ; 
  Test C# declaration:            : CodePopUp popup = new CodePopUp ( ) ; 
  Handle C# declaration:          : CodePopUp popup = new CodePopUp ( ) ; 
  Test begin scope                : popup . codeView . Text = contents ; 
  executable     : popup . ShowDialog ( ) ; 
  Test end scope                  : popup . codeView . Text = contents ; 
--- stack size = 3 ---
  Test preproc statement:         : popup . codeView . Text = contents ; 
  Test namespace definition:      : popup . codeView . Text = contents ; 
  Test class definition:          : popup . codeView . Text = contents ; 
  Test struct definition:         : popup . codeView . Text = contents ; 
  Test C# function definition:    : popup . codeView . Text = contents ; 
  Test control definition:        : popup . codeView . Text = contents ; 
  Test C# declaration:            : popup . codeView . Text = contents ; 
  Test C# executable:             : popup . codeView . Text = contents ; 
  Handle C# executable:           : popup . codeView . Text = contents ; 
  Test begin scope                : popup . ShowDialog ( ) ; 
  Test end scope                  : popup . ShowDialog ( ) ; 
  Test preproc statement:         : popup . ShowDialog ( ) ; 
  Test namespace definition:      : popup . ShowDialog ( ) ; 
  Test class definition:          : popup . ShowDialog ( ) ; 
  Test struct definition:         : popup . ShowDialog ( ) ; 
  Test C# function definition:    : popup . ShowDialog ( ) ; 
  Test control definition:        : popup . ShowDialog ( ) ; 
  Test C# declaration:            : popup . ShowDialog ( ) ; 
  Test C# executable:             : popup . ShowDialog ( ) ; 
  Handle C# executable:           : popup . ShowDialog ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : void csFileListFromRepo ( string names ) { 
  handle begin scope              : void csFileListFromRepo ( string names ) { 
--- stack size = 4 ---
  Test end scope                  : void csFileListFromRepo ( string names ) { 
  Test preproc statement:         : void csFileListFromRepo ( string names ) { 
  function def   : void csFileListFromRepo ( string names ) { 
  Test namespace definition:      : void csFileListFromRepo ( string names ) { 
  Test class definition:          : void csFileListFromRepo ( string names ) { 
  Test struct definition:         : void csFileListFromRepo ( string names ) { 
  Test C# function definition:    : void csFileListFromRepo ( string names ) { 
  Handle C# function definition:  : void csFileListFromRepo ( string names ) { 
  Test begin scope                : string [ ] fnames = names . Split ( ' ' ) ; 
  Test end scope                  : string [ ] fnames = names . Split ( ' ' ) ; 
  executable     : string [ ] fnames = names . Split ( ' ' ) ; 
  Test preproc statement:         : string [ ] fnames = names . Split ( ' ' ) ; 
  Test namespace definition:      : string [ ] fnames = names . Split ( ' ' ) ; 
  Test class definition:          : string [ ] fnames = names . Split ( ' ' ) ; 
  Test struct definition:         : string [ ] fnames = names . Split ( ' ' ) ; 
  Test C# function definition:    : string [ ] fnames = names . Split ( ' ' ) ; 
  Test control definition:        : string [ ] fnames = names . Split ( ' ' ) ; 
  Test C# declaration:            : string [ ] fnames = names . Split ( ' ' ) ; 
  Test C# executable:             : string [ ] fnames = names . Split ( ' ' ) ; 
  Handle C# executable:           : string [ ] fnames = names . Split ( ' ' ) ; 
  Test begin scope                : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  executable     : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test end scope                  : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test preproc statement:         : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test namespace definition:      : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test class definition:          : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test struct definition:         : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test C# function definition:    : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test control definition:        : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test C# declaration:            : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test C# executable:             : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Handle C# executable:           : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test begin scope                : foreach ( string file in fnames ) { 
  handle begin scope              : foreach ( string file in fnames ) { 
--- stack size = 5 ---
  Test end scope                  : foreach ( string file in fnames ) { 
  Test preproc statement:         : foreach ( string file in fnames ) { 
  control def    : foreach ( string file in fnames ) { 
  Test namespace definition:      : foreach ( string file in fnames ) { 
  Test class definition:          : foreach ( string file in fnames ) { 
  Test struct definition:         : foreach ( string file in fnames ) { 
  Test C# function definition:    : foreach ( string file in fnames ) { 
  Test control definition:        : foreach ( string file in fnames ) { 
  Handle control definition:      : foreach ( string file in fnames ) { 
  Test begin scope                : Action act = ( ) = > { 
  handle begin scope              : Action act = ( ) = > { 
--- stack size = 6 ---
  Test end scope                  : Action act = ( ) = > { 
  Test preproc statement:         : Action act = ( ) = > { 
  Test namespace definition:      : Action act = ( ) = > { 
  Test class definition:          : Action act = ( ) = > { 
  Test struct definition:         : Action act = ( ) = > { 
  default:       : Action act = ( ) = > { 
  Test C# function definition:    : Action act = ( ) = > { 
  Test control definition:        : Action act = ( ) = > { 
  Test C# declaration:            : Action act = ( ) = > { 
  Test C# executable:             : Action act = ( ) = > { 
  Test default:                   : Action act = ( ) = > { 
  Handle default:                 : Action act = ( ) = > { 
  executable     : AddInRepoCsList ( file ) ; 
  Test begin scope                : AddInRepoCsList ( file ) ; 
--- stack size = 5 ---
  Test end scope                  : AddInRepoCsList ( file ) ; 
  Test preproc statement:         : AddInRepoCsList ( file ) ; 
  Test namespace definition:      : AddInRepoCsList ( file ) ; 
  Test class definition:          : AddInRepoCsList ( file ) ; 
  Test struct definition:         : AddInRepoCsList ( file ) ; 
  Test C# function definition:    : AddInRepoCsList ( file ) ; 
  Test control definition:        : AddInRepoCsList ( file ) ; 
  Test C# declaration:            : AddInRepoCsList ( file ) ; 
  Test C# executable:             : AddInRepoCsList ( file ) ; 
  Handle C# executable:           : AddInRepoCsList ( file ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : ; 
  Test begin scope                : string [ ] args = new string [ ] { 
  handle begin scope              : string [ ] args = new string [ ] { 
--- stack size = 6 ---
  Test end scope                  : string [ ] args = new string [ ] { 
  Test preproc statement:         : string [ ] args = new string [ ] { 
  Test namespace definition:      : string [ ] args = new string [ ] { 
  Test class definition:          : string [ ] args = new string [ ] { 
  Test struct definition:         : string [ ] args = new string [ ] { 
  default:       : string [ ] args = new string [ ] { 
  Test C# function definition:    : string [ ] args = new string [ ] { 
--- stack size = 5 ---
  Test control definition:        : string [ ] args = new string [ ] { 
  Test C# declaration:            : string [ ] args = new string [ ] { 
  Test C# executable:             : string [ ] args = new string [ ] { 
  Test default:                   : string [ ] args = new string [ ] { 
  Handle default:                 : string [ ] args = new string [ ] { 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : ; 
  Test begin scope                : Dispatcher . Invoke ( act , args ) ; 
  executable     : Dispatcher . Invoke ( act , args ) ; 
  Test end scope                  : Dispatcher . Invoke ( act , args ) ; 
--- stack size = 4 ---
  Test preproc statement:         : Dispatcher . Invoke ( act , args ) ; 
--- stack size = 3 ---
  Test namespace definition:      : Dispatcher . Invoke ( act , args ) ; 
  Test class definition:          : Dispatcher . Invoke ( act , args ) ; 
  Test struct definition:         : Dispatcher . Invoke ( act , args ) ; 
  Test C# function definition:    : Dispatcher . Invoke ( act , args ) ; 
  Test control definition:        : Dispatcher . Invoke ( act , args ) ; 
  Test C# declaration:            : Dispatcher . Invoke ( act , args ) ; 
  Test C# executable:             : Dispatcher . Invoke ( act , args ) ; 
  Handle C# executable:           : Dispatcher . Invoke ( act , args ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : void xmlFileListFromRepo ( string names ) { 
  handle begin scope              : void xmlFileListFromRepo ( string names ) { 
--- stack size = 4 ---
  Test end scope                  : void xmlFileListFromRepo ( string names ) { 
  Test preproc statement:         : void xmlFileListFromRepo ( string names ) { 
  function def   : void xmlFileListFromRepo ( string names ) { 
  Test namespace definition:      : void xmlFileListFromRepo ( string names ) { 
  Test class definition:          : void xmlFileListFromRepo ( string names ) { 
  Test struct definition:         : void xmlFileListFromRepo ( string names ) { 
  Test C# function definition:    : void xmlFileListFromRepo ( string names ) { 
  Handle C# function definition:  : void xmlFileListFromRepo ( string names ) { 
  Test begin scope                : string [ ] fnames = names . Split ( ' ' ) ; 
  Test end scope                  : string [ ] fnames = names . Split ( ' ' ) ; 
  executable     : string [ ] fnames = names . Split ( ' ' ) ; 
  Test preproc statement:         : string [ ] fnames = names . Split ( ' ' ) ; 
  Test namespace definition:      : string [ ] fnames = names . Split ( ' ' ) ; 
  Test class definition:          : string [ ] fnames = names . Split ( ' ' ) ; 
  Test struct definition:         : string [ ] fnames = names . Split ( ' ' ) ; 
  Test C# function definition:    : string [ ] fnames = names . Split ( ' ' ) ; 
  Test control definition:        : string [ ] fnames = names . Split ( ' ' ) ; 
  Test C# declaration:            : string [ ] fnames = names . Split ( ' ' ) ; 
  Test C# executable:             : string [ ] fnames = names . Split ( ' ' ) ; 
  Handle C# executable:           : string [ ] fnames = names . Split ( ' ' ) ; 
  Test begin scope                : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  executable     : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test end scope                  : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test preproc statement:         : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test namespace definition:      : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test class definition:          : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test struct definition:         : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test C# function definition:    : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test control definition:        : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test C# declaration:            : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test C# executable:             : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Handle C# executable:           : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test begin scope                : foreach ( string file in fnames ) { 
  handle begin scope              : foreach ( string file in fnames ) { 
--- stack size = 5 ---
  Test end scope                  : foreach ( string file in fnames ) { 
  Test preproc statement:         : foreach ( string file in fnames ) { 
  Test namespace definition:      : foreach ( string file in fnames ) { 
  control def    : foreach ( string file in fnames ) { 
  Test class definition:          : foreach ( string file in fnames ) { 
  Test struct definition:         : foreach ( string file in fnames ) { 
  Test C# function definition:    : foreach ( string file in fnames ) { 
  Test control definition:        : foreach ( string file in fnames ) { 
  Handle control definition:      : foreach ( string file in fnames ) { 
  Test begin scope                : Action act = ( ) = > { 
  handle begin scope              : Action act = ( ) = > { 
--- stack size = 6 ---
  Test end scope                  : Action act = ( ) = > { 
  Test preproc statement:         : Action act = ( ) = > { 
  Test namespace definition:      : Action act = ( ) = > { 
  Test class definition:          : Action act = ( ) = > { 
  Test struct definition:         : Action act = ( ) = > { 
  Test C# function definition:    : Action act = ( ) = > { 
  Test control definition:        : Action act = ( ) = > { 
  Test C# declaration:            : Action act = ( ) = > { 
  Test C# executable:             : Action act = ( ) = > { 
  Test default:                   : Action act = ( ) = > { 
  Handle default:                 : Action act = ( ) = > { 
  Test begin scope                : AddInRepoXmlList ( file ) ; 
  Test end scope                  : AddInRepoXmlList ( file ) ; 
  default:       : Action act = ( ) = > { 
  Test preproc statement:         : AddInRepoXmlList ( file ) ; 
  executable     : AddInRepoXmlList ( file ) ; 
  Test namespace definition:      : AddInRepoXmlList ( file ) ; 
--- stack size = 5 ---
  Test class definition:          : AddInRepoXmlList ( file ) ; 
  Test struct definition:         : AddInRepoXmlList ( file ) ; 
  Test C# function definition:    : AddInRepoXmlList ( file ) ; 
  Test control definition:        : AddInRepoXmlList ( file ) ; 
  Test C# declaration:            : AddInRepoXmlList ( file ) ; 
  Test C# executable:             : AddInRepoXmlList ( file ) ; 
  Handle C# executable:           : AddInRepoXmlList ( file ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : ; 
  Test begin scope                : string [ ] args = new string [ ] { 
  handle begin scope              : string [ ] args = new string [ ] { 
--- stack size = 6 ---
  Test end scope                  : string [ ] args = new string [ ] { 
  Test preproc statement:         : string [ ] args = new string [ ] { 
  Test namespace definition:      : string [ ] args = new string [ ] { 
  Test class definition:          : string [ ] args = new string [ ] { 
  Test struct definition:         : string [ ] args = new string [ ] { 
  Test C# function definition:    : string [ ] args = new string [ ] { 
  default:       : string [ ] args = new string [ ] { 
  Test control definition:        : string [ ] args = new string [ ] { 
--- stack size = 5 ---
  Test C# declaration:            : string [ ] args = new string [ ] { 
  Test C# executable:             : string [ ] args = new string [ ] { 
  Test default:                   : string [ ] args = new string [ ] { 
  Handle default:                 : string [ ] args = new string [ ] { 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : ; 
  Test begin scope                : Dispatcher . Invoke ( act , args ) ; 
  Test end scope                  : Dispatcher . Invoke ( act , args ) ; 
  Test preproc statement:         : Dispatcher . Invoke ( act , args ) ; 
  Test namespace definition:      : Dispatcher . Invoke ( act , args ) ; 
  executable     : Dispatcher . Invoke ( act , args ) ; 
  Test class definition:          : Dispatcher . Invoke ( act , args ) ; 
--- stack size = 4 ---
  Test struct definition:         : Dispatcher . Invoke ( act , args ) ; 
--- stack size = 3 ---
  Test C# function definition:    : Dispatcher . Invoke ( act , args ) ; 
  Test control definition:        : Dispatcher . Invoke ( act , args ) ; 
  Test C# declaration:            : Dispatcher . Invoke ( act , args ) ; 
  Test C# executable:             : Dispatcher . Invoke ( act , args ) ; 
  Handle C# executable:           : Dispatcher . Invoke ( act , args ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : void AddInNotificationList ( string file ) { 
  handle begin scope              : void AddInNotificationList ( string file ) { 
--- stack size = 4 ---
  Test end scope                  : void AddInNotificationList ( string file ) { 
  Test preproc statement:         : void AddInNotificationList ( string file ) { 
  Test namespace definition:      : void AddInNotificationList ( string file ) { 
  function def   : void AddInNotificationList ( string file ) { 
  Test class definition:          : void AddInNotificationList ( string file ) { 
  Test struct definition:         : void AddInNotificationList ( string file ) { 
  Test C# function definition:    : void AddInNotificationList ( string file ) { 
  Handle C# function definition:  : void AddInNotificationList ( string file ) { 
  Test begin scope                : notification . Items . Add ( file ) ; 
  Test end scope                  : notification . Items . Add ( file ) ; 
  executable     : notification . Items . Add ( file ) ; 
  Test preproc statement:         : notification . Items . Add ( file ) ; 
--- stack size = 3 ---
  Test namespace definition:      : notification . Items . Add ( file ) ; 
  Test class definition:          : notification . Items . Add ( file ) ; 
  Test struct definition:         : notification . Items . Add ( file ) ; 
  Test C# function definition:    : notification . Items . Add ( file ) ; 
  Test control definition:        : notification . Items . Add ( file ) ; 
  Test C# declaration:            : notification . Items . Add ( file ) ; 
  Test C# executable:             : notification . Items . Add ( file ) ; 
  Handle C# executable:           : notification . Items . Add ( file ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : void AddInRepoCsList ( string file ) { 
  handle begin scope              : void AddInRepoCsList ( string file ) { 
--- stack size = 4 ---
  Test end scope                  : void AddInRepoCsList ( string file ) { 
  Test preproc statement:         : void AddInRepoCsList ( string file ) { 
  Test namespace definition:      : void AddInRepoCsList ( string file ) { 
  Test class definition:          : void AddInRepoCsList ( string file ) { 
  function def   : void AddInRepoCsList ( string file ) { 
  Test struct definition:         : void AddInRepoCsList ( string file ) { 
  Test C# function definition:    : void AddInRepoCsList ( string file ) { 
  Handle C# function definition:  : void AddInRepoCsList ( string file ) { 
  Test begin scope                : 
    if ( ! ( repo . Items . Contains ( file ) ) ) repo . Items . Insert ( 0 , file ) ; 
  Test end scope                  : 
    if ( ! ( repo . Items . Contains ( file ) ) ) repo . Items . Insert ( 0 , file ) ; 
  Test preproc statement:         : 
    if ( ! ( repo . Items . Contains ( file ) ) ) repo . Items . Insert ( 0 , file ) ; 
  Test namespace definition:      : 
    if ( ! ( repo . Items . Contains ( file ) ) ) repo . Items . Insert ( 0 , file ) ; 
  Test class definition:          : 
    if ( ! ( repo . Items . Contains ( file ) ) ) repo . Items . Insert ( 0 , file ) ; 
  Test struct definition:         : 
    if ( ! ( repo . Items . Contains ( file ) ) ) repo . Items . Insert ( 0 , file ) ; 
  Test C# function definition:    : 
    if ( ! ( repo . Items . Contains ( file ) ) ) repo . Items . Insert ( 0 , file ) ; 
  Test control definition:        : 
    if ( ! ( repo . Items . Contains ( file ) ) ) repo . Items . Insert ( 0 , file ) ; 
  Test C# declaration:            : 
    if ( ! ( repo . Items . Contains ( file ) ) ) repo . Items . Insert ( 0 , file ) ; 
  Test C# executable:             : 
    if ( ! ( repo . Items . Contains ( file ) ) ) repo . Items . Insert ( 0 , file ) ; 
  executable     : 
    if ( ! ( repo . Items . Contains ( file ) ) ) repo . Items . Insert ( 0 , file ) ; 
  Handle C# executable:           : 
    if ( ! ( repo . Items . Contains ( file ) ) ) repo . Items . Insert ( 0 , file ) ; 
--- stack size = 3 ---
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : void AddInRepoXmlList ( string file ) { 
  handle begin scope              : void AddInRepoXmlList ( string file ) { 
--- stack size = 4 ---
  Test end scope                  : void AddInRepoXmlList ( string file ) { 
  Test preproc statement:         : void AddInRepoXmlList ( string file ) { 
  Test namespace definition:      : void AddInRepoXmlList ( string file ) { 
  Test class definition:          : void AddInRepoXmlList ( string file ) { 
  Test struct definition:         : void AddInRepoXmlList ( string file ) { 
  Test C# function definition:    : void AddInRepoXmlList ( string file ) { 
  Handle C# function definition:  : void AddInRepoXmlList ( string file ) { 
  function def   : void AddInRepoXmlList ( string file ) { 
  Test begin scope                : 
    if ( ! ( repoXml . Items . Contains ( file ) ) ) repoXml . Items . Insert ( 0 , file ) ; 
  Test end scope                  : 
    if ( ! ( repoXml . Items . Contains ( file ) ) ) repoXml . Items . Insert ( 0 , file ) ; 
  Test preproc statement:         : 
    if ( ! ( repoXml . Items . Contains ( file ) ) ) repoXml . Items . Insert ( 0 , file ) ; 
  Test namespace definition:      : 
    if ( ! ( repoXml . Items . Contains ( file ) ) ) repoXml . Items . Insert ( 0 , file ) ; 
  Test class definition:          : 
    if ( ! ( repoXml . Items . Contains ( file ) ) ) repoXml . Items . Insert ( 0 , file ) ; 
  Test struct definition:         : 
    if ( ! ( repoXml . Items . Contains ( file ) ) ) repoXml . Items . Insert ( 0 , file ) ; 
  Test C# function definition:    : 
    if ( ! ( repoXml . Items . Contains ( file ) ) ) repoXml . Items . Insert ( 0 , file ) ; 
  Test control definition:        : 
    if ( ! ( repoXml . Items . Contains ( file ) ) ) repoXml . Items . Insert ( 0 , file ) ; 
  Test C# declaration:            : 
    if ( ! ( repoXml . Items . Contains ( file ) ) ) repoXml . Items . Insert ( 0 , file ) ; 
  Test C# executable:             : 
    if ( ! ( repoXml . Items . Contains ( file ) ) ) repoXml . Items . Insert ( 0 , file ) ; 
  executable     : 
    if ( ! ( repoXml . Items . Contains ( file ) ) ) repoXml . Items . Insert ( 0 , file ) ; 
  Handle C# executable:           : 
    if ( ! ( repoXml . Items . Contains ( file ) ) ) repoXml . Items . Insert ( 0 , file ) ; 
--- stack size = 3 ---
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void Browse ( object sender , RoutedEventArgs e ) { 
  handle begin scope              : private void Browse ( object sender , RoutedEventArgs e ) { 
--- stack size = 4 ---
  Test end scope                  : private void Browse ( object sender , RoutedEventArgs e ) { 
  Test preproc statement:         : private void Browse ( object sender , RoutedEventArgs e ) { 
  Test namespace definition:      : private void Browse ( object sender , RoutedEventArgs e ) { 
  function def   : private void Browse ( object sender , RoutedEventArgs e ) { 
  Test class definition:          : private void Browse ( object sender , RoutedEventArgs e ) { 
  Test struct definition:         : private void Browse ( object sender , RoutedEventArgs e ) { 
  Test C# function definition:    : private void Browse ( object sender , RoutedEventArgs e ) { 
  Handle C# function definition:  : private void Browse ( object sender , RoutedEventArgs e ) { 
  Test begin scope                : var dialog_box = new Microsoft . Win32 . OpenFileDialog ( ) ; 
  Test end scope                  : var dialog_box = new Microsoft . Win32 . OpenFileDialog ( ) ; 
  data declar    : var dialog_box = new Microsoft . Win32 . OpenFileDialog ( ) ; 
  Test preproc statement:         : var dialog_box = new Microsoft . Win32 . OpenFileDialog ( ) ; 
  Test namespace definition:      : var dialog_box = new Microsoft . Win32 . OpenFileDialog ( ) ; 
  Test class definition:          : var dialog_box = new Microsoft . Win32 . OpenFileDialog ( ) ; 
  Test struct definition:         : var dialog_box = new Microsoft . Win32 . OpenFileDialog ( ) ; 
  executable     : dialog_box . Multiselect = true ; 
  Test C# function definition:    : var dialog_box = new Microsoft . Win32 . OpenFileDialog ( ) ; 
  Test control definition:        : var dialog_box = new Microsoft . Win32 . OpenFileDialog ( ) ; 
  Test C# declaration:            : var dialog_box = new Microsoft . Win32 . OpenFileDialog ( ) ; 
  executable     : dialog_box . DefaultExt = ".cs" ; 
  Handle C# declaration:          : var dialog_box = new Microsoft . Win32 . OpenFileDialog ( ) ; 
  Test begin scope                : dialog_box . Multiselect = true ; 
  Test end scope                  : dialog_box . Multiselect = true ; 
  Test preproc statement:         : dialog_box . Multiselect = true ; 
  executable     : dialog_box . Filter = "CS Files (*.cs) | *.cs" ; 
  Test namespace definition:      : dialog_box . Multiselect = true ; 
  Test class definition:          : dialog_box . Multiselect = true ; 
  Test struct definition:         : dialog_box . Multiselect = true ; 
  Test C# function definition:    : dialog_box . Multiselect = true ; 
  Test control definition:        : dialog_box . Multiselect = true ; 
  data declar    : var result = dialog_box . ShowDialog ( ) ; 
  Test C# declaration:            : dialog_box . Multiselect = true ; 
  Test C# executable:             : dialog_box . Multiselect = true ; 
  Handle C# executable:           : dialog_box . Multiselect = true ; 
  Test begin scope                : dialog_box . DefaultExt = ".cs" ; 
  Test end scope                  : dialog_box . DefaultExt = ".cs" ; 
  Test preproc statement:         : dialog_box . DefaultExt = ".cs" ; 
  Test namespace definition:      : dialog_box . DefaultExt = ".cs" ; 
  Test class definition:          : dialog_box . DefaultExt = ".cs" ; 
  Test struct definition:         : dialog_box . DefaultExt = ".cs" ; 
  data declar    : 
    string str = System . IO . Path . GetFullPath ( @ RepoEnvironment . fileStorage ) ; 
  Test C# function definition:    : dialog_box . DefaultExt = ".cs" ; 
  Test control definition:        : dialog_box . DefaultExt = ".cs" ; 
  Test C# declaration:            : dialog_box . DefaultExt = ".cs" ; 
  Test C# executable:             : dialog_box . DefaultExt = ".cs" ; 
  Handle C# executable:           : dialog_box . DefaultExt = ".cs" ; 
  Test begin scope                : dialog_box . Filter = "CS Files (*.cs) | *.cs" ; 
  Test end scope                  : dialog_box . Filter = "CS Files (*.cs) | *.cs" ; 
  Test preproc statement:         : dialog_box . Filter = "CS Files (*.cs) | *.cs" ; 
  Test namespace definition:      : dialog_box . Filter = "CS Files (*.cs) | *.cs" ; 
  Test class definition:          : dialog_box . Filter = "CS Files (*.cs) | *.cs" ; 
  Test struct definition:         : dialog_box . Filter = "CS Files (*.cs) | *.cs" ; 
  Test C# function definition:    : dialog_box . Filter = "CS Files (*.cs) | *.cs" ; 
  Test control definition:        : dialog_box . Filter = "CS Files (*.cs) | *.cs" ; 
  Test C# declaration:            : dialog_box . Filter = "CS Files (*.cs) | *.cs" ; 
  Test C# executable:             : dialog_box . Filter = "CS Files (*.cs) | *.cs" ; 
  Handle C# executable:           : dialog_box . Filter = "CS Files (*.cs) | *.cs" ; 
  Test begin scope                : var result = dialog_box . ShowDialog ( ) ; 
  Test end scope                  : var result = dialog_box . ShowDialog ( ) ; 
  Test preproc statement:         : var result = dialog_box . ShowDialog ( ) ; 
  Test namespace definition:      : var result = dialog_box . ShowDialog ( ) ; 
  Test class definition:          : var result = dialog_box . ShowDialog ( ) ; 
  Test struct definition:         : var result = dialog_box . ShowDialog ( ) ; 
  Test C# function definition:    : var result = dialog_box . ShowDialog ( ) ; 
  Test control definition:        : var result = dialog_box . ShowDialog ( ) ; 
  Test C# declaration:            : var result = dialog_box . ShowDialog ( ) ; 
  Handle C# declaration:          : var result = dialog_box . ShowDialog ( ) ; 
  Test begin scope                : 
    string str = System . IO . Path . GetFullPath ( @ RepoEnvironment . fileStorage ) ; 
  Test end scope                  : 
    string str = System . IO . Path . GetFullPath ( @ RepoEnvironment . fileStorage ) ; 
  Test preproc statement:         : 
    string str = System . IO . Path . GetFullPath ( @ RepoEnvironment . fileStorage ) ; 
  Test namespace definition:      : 
    string str = System . IO . Path . GetFullPath ( @ RepoEnvironment . fileStorage ) ; 
  Test class definition:          : 
    string str = System . IO . Path . GetFullPath ( @ RepoEnvironment . fileStorage ) ; 
  Test struct definition:         : 
    string str = System . IO . Path . GetFullPath ( @ RepoEnvironment . fileStorage ) ; 
  Test C# function definition:    : 
    string str = System . IO . Path . GetFullPath ( @ RepoEnvironment . fileStorage ) ; 
  Test control definition:        : 
    string str = System . IO . Path . GetFullPath ( @ RepoEnvironment . fileStorage ) ; 
  Test C# declaration:            : 
    string str = System . IO . Path . GetFullPath ( @ RepoEnvironment . fileStorage ) ; 
  Handle C# declaration:          : 
    string str = System . IO . Path . GetFullPath ( @ RepoEnvironment . fileStorage ) ; 
  Test begin scope                : if ( result == true ) { 
  handle begin scope              : if ( result == true ) { 
--- stack size = 5 ---
  Test end scope                  : if ( result == true ) { 
  Test preproc statement:         : if ( result == true ) { 
  Test namespace definition:      : if ( result == true ) { 
  control def    : if ( result == true ) { 
  Test class definition:          : if ( result == true ) { 
  Test struct definition:         : if ( result == true ) { 
  Test C# function definition:    : if ( result == true ) { 
  Test control definition:        : if ( result == true ) { 
  Handle control definition:      : if ( result == true ) { 
  Test begin scope                : string [ ] filelist = dialog_box . FileNames ; 
  executable     : string [ ] filelist = dialog_box . FileNames ; 
  Test end scope                  : string [ ] filelist = dialog_box . FileNames ; 
  Test preproc statement:         : string [ ] filelist = dialog_box . FileNames ; 
  Test namespace definition:      : string [ ] filelist = dialog_box . FileNames ; 
  Test class definition:          : string [ ] filelist = dialog_box . FileNames ; 
  Test struct definition:         : string [ ] filelist = dialog_box . FileNames ; 
  Test C# function definition:    : string [ ] filelist = dialog_box . FileNames ; 
  Test control definition:        : string [ ] filelist = dialog_box . FileNames ; 
  Test C# declaration:            : string [ ] filelist = dialog_box . FileNames ; 
  Test C# executable:             : string [ ] filelist = dialog_box . FileNames ; 
  Handle C# executable:           : string [ ] filelist = dialog_box . FileNames ; 
  data declar    : string fdirectory = System . IO . Path . GetDirectoryName ( filelist [ 0 ] ) ; 
  Test begin scope                : string fdirectory = System . IO . Path . GetDirectoryName ( filelist [ 0 ] ) ; 
  Test end scope                  : string fdirectory = System . IO . Path . GetDirectoryName ( filelist [ 0 ] ) ; 
  Test preproc statement:         : string fdirectory = System . IO . Path . GetDirectoryName ( filelist [ 0 ] ) ; 
  executable     : Console . WriteLine ( "\n    Client sending files to the repository" ) ; 
  Test namespace definition:      : string fdirectory = System . IO . Path . GetDirectoryName ( filelist [ 0 ] ) ; 
  Test class definition:          : string fdirectory = System . IO . Path . GetDirectoryName ( filelist [ 0 ] ) ; 
  Test struct definition:         : string fdirectory = System . IO . Path . GetDirectoryName ( filelist [ 0 ] ) ; 
  Test C# function definition:    : string fdirectory = System . IO . Path . GetDirectoryName ( filelist [ 0 ] ) ; 
  executable     : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test control definition:        : string fdirectory = System . IO . Path . GetDirectoryName ( filelist [ 0 ] ) ; 
  Test C# declaration:            : string fdirectory = System . IO . Path . GetDirectoryName ( filelist [ 0 ] ) ; 
  Handle C# declaration:          : string fdirectory = System . IO . Path . GetDirectoryName ( filelist [ 0 ] ) ; 
  Test begin scope                : Console . WriteLine ( "\n    Client sending files to the repository" ) ; 
  Test end scope                  : Console . WriteLine ( "\n    Client sending files to the repository" ) ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test preproc statement:         : Console . WriteLine ( "\n    Client sending files to the repository" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n    Client sending files to the repository" ) ; 
  Test class definition:          : Console . WriteLine ( "\n    Client sending files to the repository" ) ; 
  executable     : sndMsg . command = "show" ; 
  Test struct definition:         : Console . WriteLine ( "\n    Client sending files to the repository" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n    Client sending files to the repository" ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : Console . WriteLine ( "\n    Client sending files to the repository" ) ; 
  Test C# declaration:            : Console . WriteLine ( "\n    Client sending files to the repository" ) ; 
  Test C# executable:             : Console . WriteLine ( "\n    Client sending files to the repository" ) ; 
  executable     : sndMsg . to = ; 
  Handle C# executable:           : Console . WriteLine ( "\n    Client sending files to the repository" ) ; 
  Test begin scope                : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test end scope                  : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : sndMsg . from = ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test class definition:          : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : sndMsg . body = "8074" ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# function definition:    : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : sndMsg . port = 8074 ; 
  Test control definition:        : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# declaration:            : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test begin scope                : sndMsg . command = "show" ; 
  Test end scope                  : sndMsg . command = "show" ; 
  Test preproc statement:         : sndMsg . command = "show" ; 
  Test namespace definition:      : sndMsg . command = "show" ; 
  Test class definition:          : sndMsg . command = "show" ; 
  Test struct definition:         : sndMsg . command = "show" ; 
  Test C# function definition:    : sndMsg . command = "show" ; 
  Test control definition:        : sndMsg . command = "show" ; 
  Test C# declaration:            : sndMsg . command = "show" ; 
  Test C# executable:             : sndMsg . command = "show" ; 
  Handle C# executable:           : sndMsg . command = "show" ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = ; 
  Test end scope                  : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . to = ; 
  Test class definition:          : sndMsg . to = ; 
  Test struct definition:         : sndMsg . to = ; 
  Test C# function definition:    : sndMsg . to = ; 
  Test control definition:        : sndMsg . to = ; 
  Test C# declaration:            : sndMsg . to = ; 
  Test C# executable:             : sndMsg . to = ; 
  Handle C# executable:           : sndMsg . to = ; 
  Test begin scope                : sndMsg . from = ; 
  Test end scope                  : sndMsg . from = ; 
  Test preproc statement:         : sndMsg . from = ; 
  Test namespace definition:      : sndMsg . from = ; 
  Test class definition:          : sndMsg . from = ; 
  Test struct definition:         : sndMsg . from = ; 
  Test C# function definition:    : sndMsg . from = ; 
  Test control definition:        : sndMsg . from = ; 
  Test C# declaration:            : sndMsg . from = ; 
  Test C# executable:             : sndMsg . from = ; 
  Handle C# executable:           : sndMsg . from = ; 
  Test begin scope                : sndMsg . body = "8074" ; 
  Test end scope                  : sndMsg . body = "8074" ; 
  Test preproc statement:         : sndMsg . body = "8074" ; 
  Test namespace definition:      : sndMsg . body = "8074" ; 
  Test class definition:          : sndMsg . body = "8074" ; 
  Test struct definition:         : sndMsg . body = "8074" ; 
  Test C# function definition:    : sndMsg . body = "8074" ; 
  Test control definition:        : sndMsg . body = "8074" ; 
  Test C# declaration:            : sndMsg . body = "8074" ; 
  Test C# executable:             : sndMsg . body = "8074" ; 
  Handle C# executable:           : sndMsg . body = "8074" ; 
  Test begin scope                : sndMsg . port = 8074 ; 
  Test end scope                  : sndMsg . port = 8074 ; 
  Test preproc statement:         : sndMsg . port = 8074 ; 
  Test namespace definition:      : sndMsg . port = 8074 ; 
  Test class definition:          : sndMsg . port = 8074 ; 
  Test struct definition:         : sndMsg . port = 8074 ; 
  Test C# function definition:    : sndMsg . port = 8074 ; 
  Test control definition:        : sndMsg . port = 8074 ; 
  Test C# declaration:            : sndMsg . port = 8074 ; 
  Test C# executable:             : sndMsg . port = 8074 ; 
  Handle C# executable:           : sndMsg . port = 8074 ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : foreach ( var file in filelist ) { 
  handle begin scope              : foreach ( var file in filelist ) { 
--- stack size = 6 ---
  Test end scope                  : foreach ( var file in filelist ) { 
  Test preproc statement:         : foreach ( var file in filelist ) { 
  control def    : foreach ( var file in filelist ) { 
  Test namespace definition:      : foreach ( var file in filelist ) { 
  Test class definition:          : foreach ( var file in filelist ) { 
  Test struct definition:         : foreach ( var file in filelist ) { 
  Test C# function definition:    : foreach ( var file in filelist ) { 
  Test control definition:        : foreach ( var file in filelist ) { 
  data declar    : string fileSpec = file ; 
  Handle control definition:      : foreach ( var file in filelist ) { 
  Test begin scope                : string fileSpec = file ; 
  Test end scope                  : string fileSpec = file ; 
  Test preproc statement:         : string fileSpec = file ; 
  Test namespace definition:      : string fileSpec = file ; 
  Test class definition:          : string fileSpec = file ; 
  Test struct definition:         : string fileSpec = file ; 
  Test C# function definition:    : string fileSpec = file ; 
  Test control definition:        : string fileSpec = file ; 
  Test C# declaration:            : string fileSpec = file ; 
  Handle C# declaration:          : string fileSpec = file ; 
  Test begin scope                : string fileName = System . IO . Path . GetFileName ( fileSpec ) ; 
  Test end scope                  : string fileName = System . IO . Path . GetFileName ( fileSpec ) ; 
  Test preproc statement:         : string fileName = System . IO . Path . GetFileName ( fileSpec ) ; 
  Test namespace definition:      : string fileName = System . IO . Path . GetFileName ( fileSpec ) ; 
  Test class definition:          : string fileName = System . IO . Path . GetFileName ( fileSpec ) ; 
  Test struct definition:         : string fileName = System . IO . Path . GetFileName ( fileSpec ) ; 
  Test C# function definition:    : string fileName = System . IO . Path . GetFileName ( fileSpec ) ; 
  Test control definition:        : string fileName = System . IO . Path . GetFileName ( fileSpec ) ; 
  Test C# declaration:            : string fileName = System . IO . Path . GetFileName ( fileSpec ) ; 
  Handle C# declaration:          : string fileName = System . IO . Path . GetFileName ( fileSpec ) ; 
  data declar    : string fileName = System . IO . Path . GetFileName ( fileSpec ) ; 
  Test begin scope                : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  Test end scope                  : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  Test preproc statement:         : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  Test namespace definition:      : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  Test class definition:          : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  Test struct definition:         : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  Test C# function definition:    : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  executable     : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  Test control definition:        : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  Test C# declaration:            : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  Test C# executable:             : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  Handle C# executable:           : 
    Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , RepoEnvironment . fileStorage ) ; 
  Test begin scope                : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test end scope                  : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test preproc statement:         : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test namespace definition:      : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test class definition:          : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  executable     : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test struct definition:         : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test C# function definition:    : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test control definition:        : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test C# declaration:            : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test C# executable:             : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Handle C# executable:           : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test begin scope                : bool transferSuccess = comm . postFile ( fileName , "c2r" , fdirectory ) ; 
  Test end scope                  : bool transferSuccess = comm . postFile ( fileName , "c2r" , fdirectory ) ; 
  Test preproc statement:         : bool transferSuccess = comm . postFile ( fileName , "c2r" , fdirectory ) ; 
  Test namespace definition:      : bool transferSuccess = comm . postFile ( fileName , "c2r" , fdirectory ) ; 
  data declar    : bool transferSuccess = comm . postFile ( fileName , "c2r" , fdirectory ) ; 
  Test class definition:          : bool transferSuccess = comm . postFile ( fileName , "c2r" , fdirectory ) ; 
  Test struct definition:         : bool transferSuccess = comm . postFile ( fileName , "c2r" , fdirectory ) ; 
  Test C# function definition:    : bool transferSuccess = comm . postFile ( fileName , "c2r" , fdirectory ) ; 
  Test control definition:        : bool transferSuccess = comm . postFile ( fileName , "c2r" , fdirectory ) ; 
  Test C# declaration:            : bool transferSuccess = comm . postFile ( fileName , "c2r" , fdirectory ) ; 
  Handle C# declaration:          : bool transferSuccess = comm . postFile ( fileName , "c2r" , fdirectory ) ; 
  Test begin scope                : Console . WriteLine ( "\n" + fdirectory + "\n " + "--------" ) ; 
  executable     : Console . WriteLine ( "\n" + fdirectory + "\n " + "--------" ) ; 
  Test end scope                  : Console . WriteLine ( "\n" + fdirectory + "\n " + "--------" ) ; 
  Test preproc statement:         : Console . WriteLine ( "\n" + fdirectory + "\n " + "--------" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n" + fdirectory + "\n " + "--------" ) ; 
  Test class definition:          : Console . WriteLine ( "\n" + fdirectory + "\n " + "--------" ) ; 
  Test struct definition:         : Console . WriteLine ( "\n" + fdirectory + "\n " + "--------" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n" + fdirectory + "\n " + "--------" ) ; 
  Test control definition:        : Console . WriteLine ( "\n" + fdirectory + "\n " + "--------" ) ; 
  Test C# declaration:            : Console . WriteLine ( "\n" + fdirectory + "\n " + "--------" ) ; 
  Test C# executable:             : Console . WriteLine ( "\n" + fdirectory + "\n " + "--------" ) ; 
  Handle C# executable:           : Console . WriteLine ( "\n" + fdirectory + "\n " + "--------" ) ; 
  executable     : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test begin scope                : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test end scope                  : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test preproc statement:         : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test namespace definition:      : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test class definition:          : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test struct definition:         : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test C# function definition:    : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test control definition:        : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  executable     : Thread . Sleep ( 2000 ) ; 
  Test C# declaration:            : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
--- stack size = 5 ---
  Test C# executable:             : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Handle C# executable:           : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test begin scope                : Thread . Sleep ( 2000 ) ; 
  Test end scope                  : Thread . Sleep ( 2000 ) ; 
  Test preproc statement:         : Thread . Sleep ( 2000 ) ; 
  Test namespace definition:      : Thread . Sleep ( 2000 ) ; 
  Test class definition:          : Thread . Sleep ( 2000 ) ; 
  Test struct definition:         : Thread . Sleep ( 2000 ) ; 
  Test C# function definition:    : Thread . Sleep ( 2000 ) ; 
  Test control definition:        : Thread . Sleep ( 2000 ) ; 
  executable     : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test C# declaration:            : Thread . Sleep ( 2000 ) ; 
  Test C# executable:             : Thread . Sleep ( 2000 ) ; 
  Handle C# executable:           : Thread . Sleep ( 2000 ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test end scope                  : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test preproc statement:         : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test class definition:          : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  executable     : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test struct definition:         : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test control definition:        : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test C# declaration:            : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  function declar: refreshCsList ( ) ; 
  Test C# executable:             : Console . WriteLine ( "\n                     File transfer completed" ) ; 
--- stack size = 4 ---
  Handle C# executable:           : Console . WriteLine ( "\n                     File transfer completed" ) ; 
--- stack size = 3 ---
  Test begin scope                : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test end scope                  : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test class definition:          : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# function definition:    : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test control definition:        : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# declaration:            : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test begin scope                : refreshCsList ( ) ; 
  Test end scope                  : refreshCsList ( ) ; 
  Test preproc statement:         : refreshCsList ( ) ; 
  Test namespace definition:      : refreshCsList ( ) ; 
  Test class definition:          : refreshCsList ( ) ; 
  Test struct definition:         : refreshCsList ( ) ; 
  Test C# function definition:    : refreshCsList ( ) ; 
  Test control definition:        : refreshCsList ( ) ; 
  Test C# declaration:            : refreshCsList ( ) ; 
  Handle C# declaration:          : refreshCsList ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void refreshCsList ( ) { 
  handle begin scope              : private void refreshCsList ( ) { 
--- stack size = 4 ---
  Test end scope                  : private void refreshCsList ( ) { 
  Test preproc statement:         : private void refreshCsList ( ) { 
  Test namespace definition:      : private void refreshCsList ( ) { 
  function def   : private void refreshCsList ( ) { 
  Test class definition:          : private void refreshCsList ( ) { 
  Test struct definition:         : private void refreshCsList ( ) { 
  Test C# function definition:    : private void refreshCsList ( ) { 
  Handle C# function definition:  : private void refreshCsList ( ) { 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . command = "csfilenamesreq" ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . command = "csfilenamesreq" ; 
  Test end scope                  : sndMsg . command = "csfilenamesreq" ; 
  Test preproc statement:         : sndMsg . command = "csfilenamesreq" ; 
  Test namespace definition:      : sndMsg . command = "csfilenamesreq" ; 
  Test class definition:          : sndMsg . command = "csfilenamesreq" ; 
  executable     : sndMsg . to = ; 
  Test struct definition:         : sndMsg . command = "csfilenamesreq" ; 
  Test C# function definition:    : sndMsg . command = "csfilenamesreq" ; 
  Test control definition:        : sndMsg . command = "csfilenamesreq" ; 
  Test C# declaration:            : sndMsg . command = "csfilenamesreq" ; 
  Test C# executable:             : sndMsg . command = "csfilenamesreq" ; 
  executable     : sndMsg . from = ; 
  Handle C# executable:           : sndMsg . command = "csfilenamesreq" ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : sndMsg . body = "csfilenamesreq" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : sndMsg . port = 8074 ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = ; 
  Test end scope                  : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . to = ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : sndMsg . to = ; 
--- stack size = 3 ---
  Test class definition:          : sndMsg . to = ; 
  Test struct definition:         : sndMsg . to = ; 
  Test C# function definition:    : sndMsg . to = ; 
  Test control definition:        : sndMsg . to = ; 
  Test C# declaration:            : sndMsg . to = ; 
  Test C# executable:             : sndMsg . to = ; 
  Handle C# executable:           : sndMsg . to = ; 
  Test begin scope                : sndMsg . from = ; 
  Test end scope                  : sndMsg . from = ; 
  Test preproc statement:         : sndMsg . from = ; 
  Test namespace definition:      : sndMsg . from = ; 
  Test class definition:          : sndMsg . from = ; 
  Test struct definition:         : sndMsg . from = ; 
  Test C# function definition:    : sndMsg . from = ; 
  Test control definition:        : sndMsg . from = ; 
  Test C# declaration:            : sndMsg . from = ; 
  Test C# executable:             : sndMsg . from = ; 
  Handle C# executable:           : sndMsg . from = ; 
  Test begin scope                : sndMsg . body = "csfilenamesreq" ; 
  Test end scope                  : sndMsg . body = "csfilenamesreq" ; 
  Test preproc statement:         : sndMsg . body = "csfilenamesreq" ; 
  Test namespace definition:      : sndMsg . body = "csfilenamesreq" ; 
  Test class definition:          : sndMsg . body = "csfilenamesreq" ; 
  Test struct definition:         : sndMsg . body = "csfilenamesreq" ; 
  Test C# function definition:    : sndMsg . body = "csfilenamesreq" ; 
  Test control definition:        : sndMsg . body = "csfilenamesreq" ; 
  Test C# declaration:            : sndMsg . body = "csfilenamesreq" ; 
  Test C# executable:             : sndMsg . body = "csfilenamesreq" ; 
  Handle C# executable:           : sndMsg . body = "csfilenamesreq" ; 
  Test begin scope                : sndMsg . port = 8074 ; 
  Test end scope                  : sndMsg . port = 8074 ; 
  Test preproc statement:         : sndMsg . port = 8074 ; 
  Test namespace definition:      : sndMsg . port = 8074 ; 
  Test class definition:          : sndMsg . port = 8074 ; 
  Test struct definition:         : sndMsg . port = 8074 ; 
  Test C# function definition:    : sndMsg . port = 8074 ; 
  Test control definition:        : sndMsg . port = 8074 ; 
  Test C# declaration:            : sndMsg . port = 8074 ; 
  Test C# executable:             : sndMsg . port = 8074 ; 
  Handle C# executable:           : sndMsg . port = 8074 ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void refreshXmlList ( ) { 
  handle begin scope              : private void refreshXmlList ( ) { 
--- stack size = 4 ---
  Test end scope                  : private void refreshXmlList ( ) { 
  Test preproc statement:         : private void refreshXmlList ( ) { 
  function def   : private void refreshXmlList ( ) { 
  Test namespace definition:      : private void refreshXmlList ( ) { 
  Test class definition:          : private void refreshXmlList ( ) { 
  Test struct definition:         : private void refreshXmlList ( ) { 
  Test C# function definition:    : private void refreshXmlList ( ) { 
  Handle C# function definition:  : private void refreshXmlList ( ) { 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . command = "xmlfilenamesreq" ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . to = ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test begin scope                : sndMsg . command = "xmlfilenamesreq" ; 
  Test end scope                  : sndMsg . command = "xmlfilenamesreq" ; 
  executable     : sndMsg . from = ; 
  Test preproc statement:         : sndMsg . command = "xmlfilenamesreq" ; 
  Test namespace definition:      : sndMsg . command = "xmlfilenamesreq" ; 
  Test class definition:          : sndMsg . command = "xmlfilenamesreq" ; 
  Test struct definition:         : sndMsg . command = "xmlfilenamesreq" ; 
  executable     : sndMsg . body = "xmlfilenamesreq" ; 
  Test C# function definition:    : sndMsg . command = "xmlfilenamesreq" ; 
  Test control definition:        : sndMsg . command = "xmlfilenamesreq" ; 
  Test C# declaration:            : sndMsg . command = "xmlfilenamesreq" ; 
  Test C# executable:             : sndMsg . command = "xmlfilenamesreq" ; 
  executable     : sndMsg . port = 8074 ; 
  Handle C# executable:           : sndMsg . command = "xmlfilenamesreq" ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
--- stack size = 3 ---
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = ; 
  Test end scope                  : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . to = ; 
  Test class definition:          : sndMsg . to = ; 
  Test struct definition:         : sndMsg . to = ; 
  Test C# function definition:    : sndMsg . to = ; 
  Test control definition:        : sndMsg . to = ; 
  Test C# declaration:            : sndMsg . to = ; 
  Test C# executable:             : sndMsg . to = ; 
  Handle C# executable:           : sndMsg . to = ; 
  Test begin scope                : sndMsg . from = ; 
  Test end scope                  : sndMsg . from = ; 
  Test preproc statement:         : sndMsg . from = ; 
  Test namespace definition:      : sndMsg . from = ; 
  Test class definition:          : sndMsg . from = ; 
  Test struct definition:         : sndMsg . from = ; 
  Test C# function definition:    : sndMsg . from = ; 
  Test control definition:        : sndMsg . from = ; 
  Test C# declaration:            : sndMsg . from = ; 
  Test C# executable:             : sndMsg . from = ; 
  Handle C# executable:           : sndMsg . from = ; 
  Test begin scope                : sndMsg . body = "xmlfilenamesreq" ; 
  Test end scope                  : sndMsg . body = "xmlfilenamesreq" ; 
  Test preproc statement:         : sndMsg . body = "xmlfilenamesreq" ; 
  Test namespace definition:      : sndMsg . body = "xmlfilenamesreq" ; 
  Test class definition:          : sndMsg . body = "xmlfilenamesreq" ; 
  Test struct definition:         : sndMsg . body = "xmlfilenamesreq" ; 
  Test C# function definition:    : sndMsg . body = "xmlfilenamesreq" ; 
  Test control definition:        : sndMsg . body = "xmlfilenamesreq" ; 
  Test C# declaration:            : sndMsg . body = "xmlfilenamesreq" ; 
  Test C# executable:             : sndMsg . body = "xmlfilenamesreq" ; 
  Handle C# executable:           : sndMsg . body = "xmlfilenamesreq" ; 
  Test begin scope                : sndMsg . port = 8074 ; 
  Test end scope                  : sndMsg . port = 8074 ; 
  Test preproc statement:         : sndMsg . port = 8074 ; 
  Test namespace definition:      : sndMsg . port = 8074 ; 
  Test class definition:          : sndMsg . port = 8074 ; 
  Test struct definition:         : sndMsg . port = 8074 ; 
  Test C# function definition:    : sndMsg . port = 8074 ; 
  Test control definition:        : sndMsg . port = 8074 ; 
  Test C# declaration:            : sndMsg . port = 8074 ; 
  Test C# executable:             : sndMsg . port = 8074 ; 
  Handle C# executable:           : sndMsg . port = 8074 ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void Createtest ( object sender , RoutedEventArgs e ) { 
  handle begin scope              : private void Createtest ( object sender , RoutedEventArgs e ) { 
--- stack size = 4 ---
  Test end scope                  : private void Createtest ( object sender , RoutedEventArgs e ) { 
  Test preproc statement:         : private void Createtest ( object sender , RoutedEventArgs e ) { 
  Test namespace definition:      : private void Createtest ( object sender , RoutedEventArgs e ) { 
  Test class definition:          : private void Createtest ( object sender , RoutedEventArgs e ) { 
  function def   : private void Createtest ( object sender , RoutedEventArgs e ) { 
  Test struct definition:         : private void Createtest ( object sender , RoutedEventArgs e ) { 
  Test C# function definition:    : private void Createtest ( object sender , RoutedEventArgs e ) { 
  data declar    : String filenames = "" ; 
  Handle C# function definition:  : private void Createtest ( object sender , RoutedEventArgs e ) { 
  Test begin scope                : String filenames = "" ; 
  Test end scope                  : String filenames = "" ; 
  Test preproc statement:         : String filenames = "" ; 
  Test namespace definition:      : String filenames = "" ; 
  Test class definition:          : String filenames = "" ; 
  Test struct definition:         : String filenames = "" ; 
  Test C# function definition:    : String filenames = "" ; 
  Test control definition:        : String filenames = "" ; 
  Test C# declaration:            : String filenames = "" ; 
  Handle C# declaration:          : String filenames = "" ; 
  Test begin scope                : if ( repo . SelectedItems . Count != 0 ) { 
  handle begin scope              : if ( repo . SelectedItems . Count != 0 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( repo . SelectedItems . Count != 0 ) { 
  Test preproc statement:         : if ( repo . SelectedItems . Count != 0 ) { 
  Test namespace definition:      : if ( repo . SelectedItems . Count != 0 ) { 
  control def    : if ( repo . SelectedItems . Count != 0 ) { 
  Test class definition:          : if ( repo . SelectedItems . Count != 0 ) { 
  Test struct definition:         : if ( repo . SelectedItems . Count != 0 ) { 
  Test C# function definition:    : if ( repo . SelectedItems . Count != 0 ) { 
  Test control definition:        : if ( repo . SelectedItems . Count != 0 ) { 
  Handle control definition:      : if ( repo . SelectedItems . Count != 0 ) { 
  Test begin scope                : bool check = false ; 
  Test end scope                  : bool check = false ; 
  data declar    : bool check = false ; 
  Test preproc statement:         : bool check = false ; 
  Test namespace definition:      : bool check = false ; 
  Test class definition:          : bool check = false ; 
  Test struct definition:         : bool check = false ; 
  Test C# function definition:    : bool check = false ; 
  Test control definition:        : bool check = false ; 
  Test C# declaration:            : bool check = false ; 
  Handle C# declaration:          : bool check = false ; 
  Test begin scope                : foreach ( var str in repo . SelectedItems ) { 
  handle begin scope              : foreach ( var str in repo . SelectedItems ) { 
--- stack size = 6 ---
  Test end scope                  : foreach ( var str in repo . SelectedItems ) { 
  Test preproc statement:         : foreach ( var str in repo . SelectedItems ) { 
  Test namespace definition:      : foreach ( var str in repo . SelectedItems ) { 
  Test class definition:          : foreach ( var str in repo . SelectedItems ) { 
  Test struct definition:         : foreach ( var str in repo . SelectedItems ) { 
  Test C# function definition:    : foreach ( var str in repo . SelectedItems ) { 
  Test control definition:        : foreach ( var str in repo . SelectedItems ) { 
  Handle control definition:      : foreach ( var str in repo . SelectedItems ) { 
  control def    : foreach ( var str in repo . SelectedItems ) { 
  Test begin scope                : if ( str . ToString ( ) . StartsWith ( "testdriver" ) ) { 
  handle begin scope              : if ( str . ToString ( ) . StartsWith ( "testdriver" ) ) { 
--- stack size = 7 ---
  Test end scope                  : if ( str . ToString ( ) . StartsWith ( "testdriver" ) ) { 
  Test preproc statement:         : if ( str . ToString ( ) . StartsWith ( "testdriver" ) ) { 
  Test namespace definition:      : if ( str . ToString ( ) . StartsWith ( "testdriver" ) ) { 
  Test class definition:          : if ( str . ToString ( ) . StartsWith ( "testdriver" ) ) { 
  Test struct definition:         : if ( str . ToString ( ) . StartsWith ( "testdriver" ) ) { 
  control def    : if ( str . ToString ( ) . StartsWith ( "testdriver" ) ) { 
  Test C# function definition:    : if ( str . ToString ( ) . StartsWith ( "testdriver" ) ) { 
  executable     : check = true ; 
  Test control definition:        : if ( str . ToString ( ) . StartsWith ( "testdriver" ) ) { 
--- stack size = 6 ---
  Handle control definition:      : if ( str . ToString ( ) . StartsWith ( "testdriver" ) ) { 
--- stack size = 5 ---
  Test begin scope                : check = true ; 
  Test end scope                  : check = true ; 
  Test preproc statement:         : check = true ; 
  Test namespace definition:      : check = true ; 
  Test class definition:          : check = true ; 
  Test struct definition:         : check = true ; 
  Test C# function definition:    : check = true ; 
  Test control definition:        : check = true ; 
  Test C# declaration:            : check = true ; 
  Test C# executable:             : check = true ; 
  Handle C# executable:           : check = true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : if ( check ) { 
  handle begin scope              : if ( check ) { 
--- stack size = 6 ---
  Test end scope                  : if ( check ) { 
  Test preproc statement:         : if ( check ) { 
  Test namespace definition:      : if ( check ) { 
  Test class definition:          : if ( check ) { 
  Test struct definition:         : if ( check ) { 
  Test C# function definition:    : if ( check ) { 
  control def    : if ( check ) { 
  Test control definition:        : if ( check ) { 
  Handle control definition:      : if ( check ) { 
  Test begin scope                : foreach ( var str in repo . SelectedItems ) { 
  handle begin scope              : foreach ( var str in repo . SelectedItems ) { 
--- stack size = 7 ---
  Test end scope                  : foreach ( var str in repo . SelectedItems ) { 
  Test preproc statement:         : foreach ( var str in repo . SelectedItems ) { 
  Test namespace definition:      : foreach ( var str in repo . SelectedItems ) { 
  Test class definition:          : foreach ( var str in repo . SelectedItems ) { 
  control def    : foreach ( var str in repo . SelectedItems ) { 
  Test struct definition:         : foreach ( var str in repo . SelectedItems ) { 
  Test C# function definition:    : foreach ( var str in repo . SelectedItems ) { 
  Test control definition:        : foreach ( var str in repo . SelectedItems ) { 
  Handle control definition:      : foreach ( var str in repo . SelectedItems ) { 
  Test begin scope                : filenames = filenames + str . ToString ( ) + " " ; 
  Test end scope                  : filenames = filenames + str . ToString ( ) + " " ; 
  Test preproc statement:         : filenames = filenames + str . ToString ( ) + " " ; 
  Test namespace definition:      : filenames = filenames + str . ToString ( ) + " " ; 
  Test class definition:          : filenames = filenames + str . ToString ( ) + " " ; 
  Test struct definition:         : filenames = filenames + str . ToString ( ) + " " ; 
  Test C# function definition:    : filenames = filenames + str . ToString ( ) + " " ; 
  Test control definition:        : filenames = filenames + str . ToString ( ) + " " ; 
  function declar: filenames = filenames + str . ToString ( ) + " " ; 
  Test C# declaration:            : filenames = filenames + str . ToString ( ) + " " ; 
--- stack size = 6 ---
  Handle C# declaration:          : filenames = filenames + str . ToString ( ) + " " ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : tcfilenames . Add ( filenames ) ; 
  Test end scope                  : tcfilenames . Add ( filenames ) ; 
  Test preproc statement:         : tcfilenames . Add ( filenames ) ; 
  Test namespace definition:      : tcfilenames . Add ( filenames ) ; 
  Test class definition:          : tcfilenames . Add ( filenames ) ; 
  Test struct definition:         : tcfilenames . Add ( filenames ) ; 
  Test C# function definition:    : tcfilenames . Add ( filenames ) ; 
  Test control definition:        : tcfilenames . Add ( filenames ) ; 
  Test C# declaration:            : tcfilenames . Add ( filenames ) ; 
  executable     : tcfilenames . Add ( filenames ) ; 
  Test C# executable:             : tcfilenames . Add ( filenames ) ; 
  Handle C# executable:           : tcfilenames . Add ( filenames ) ; 
  Test begin scope                : testno = testno + 1 ; 
  Test end scope                  : testno = testno + 1 ; 
  Test preproc statement:         : testno = testno + 1 ; 
  Test namespace definition:      : testno = testno + 1 ; 
  executable     : testno = testno + 1 ; 
  Test class definition:          : testno = testno + 1 ; 
  Test struct definition:         : testno = testno + 1 ; 
  Test C# function definition:    : testno = testno + 1 ; 
  Test control definition:        : testno = testno + 1 ; 
  Test C# declaration:            : testno = testno + 1 ; 
  Test C# executable:             : testno = testno + 1 ; 
  Handle C# executable:           : testno = testno + 1 ; 
  Test begin scope                : test . Items . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Test end scope                  : test . Items . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Test preproc statement:         : test . Items . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Test namespace definition:      : test . Items . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Test class definition:          : test . Items . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Test struct definition:         : test . Items . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Test C# function definition:    : test . Items . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Test control definition:        : test . Items . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Test C# declaration:            : test . Items . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Test C# executable:             : test . Items . Add ( "TestCase" + testno . ToString ( ) ) ; 
  executable     : test . Items . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Handle C# executable:           : test . Items . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Test begin scope                : testlist . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Test end scope                  : testlist . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Test preproc statement:         : testlist . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Test namespace definition:      : testlist . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Test class definition:          : testlist . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Test struct definition:         : testlist . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Test C# function definition:    : testlist . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Test control definition:        : testlist . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Test C# declaration:            : testlist . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Test C# executable:             : testlist . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Handle C# executable:           : testlist . Add ( "TestCase" + testno . ToString ( ) ) ; 
  executable     : testlist . Add ( "TestCase" + testno . ToString ( ) ) ; 
  Test begin scope                : } 
--- stack size = 5 ---
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 6 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : MessageBox . Show ( "Please select atleast one test driver for a test!" ) ; 
  Test end scope                  : MessageBox . Show ( "Please select atleast one test driver for a test!" ) ; 
  Test preproc statement:         : MessageBox . Show ( "Please select atleast one test driver for a test!" ) ; 
  Test namespace definition:      : MessageBox . Show ( "Please select atleast one test driver for a test!" ) ; 
  Test class definition:          : MessageBox . Show ( "Please select atleast one test driver for a test!" ) ; 
  executable     : MessageBox . Show ( "Please select atleast one test driver for a test!" ) ; 
  Test struct definition:         : MessageBox . Show ( "Please select atleast one test driver for a test!" ) ; 
--- stack size = 5 ---
  Test C# function definition:    : MessageBox . Show ( "Please select atleast one test driver for a test!" ) ; 
--- stack size = 4 ---
  Test control definition:        : MessageBox . Show ( "Please select atleast one test driver for a test!" ) ; 
  Test C# declaration:            : MessageBox . Show ( "Please select atleast one test driver for a test!" ) ; 
  Test C# executable:             : MessageBox . Show ( "Please select atleast one test driver for a test!" ) ; 
  Handle C# executable:           : MessageBox . Show ( "Please select atleast one test driver for a test!" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  control def    : else { 
  Test preproc statement:         : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : MessageBox . Show ( "Please select files for creating test request" ) ; 
  Test end scope                  : MessageBox . Show ( "Please select files for creating test request" ) ; 
  Test preproc statement:         : MessageBox . Show ( "Please select files for creating test request" ) ; 
  executable     : MessageBox . Show ( "Please select files for creating test request" ) ; 
  Test namespace definition:      : MessageBox . Show ( "Please select files for creating test request" ) ; 
--- stack size = 4 ---
  Test class definition:          : MessageBox . Show ( "Please select files for creating test request" ) ; 
--- stack size = 3 ---
  Test struct definition:         : MessageBox . Show ( "Please select files for creating test request" ) ; 
  Test C# function definition:    : MessageBox . Show ( "Please select files for creating test request" ) ; 
  Test control definition:        : MessageBox . Show ( "Please select files for creating test request" ) ; 
  Test C# declaration:            : MessageBox . Show ( "Please select files for creating test request" ) ; 
  Test C# executable:             : MessageBox . Show ( "Please select files for creating test request" ) ; 
  Handle C# executable:           : MessageBox . Show ( "Please select files for creating test request" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void Createrequest ( object sender , RoutedEventArgs e ) { 
  handle begin scope              : private void Createrequest ( object sender , RoutedEventArgs e ) { 
--- stack size = 4 ---
  Test end scope                  : private void Createrequest ( object sender , RoutedEventArgs e ) { 
  Test preproc statement:         : private void Createrequest ( object sender , RoutedEventArgs e ) { 
  Test namespace definition:      : private void Createrequest ( object sender , RoutedEventArgs e ) { 
  function def   : private void Createrequest ( object sender , RoutedEventArgs e ) { 
  Test class definition:          : private void Createrequest ( object sender , RoutedEventArgs e ) { 
  Test struct definition:         : private void Createrequest ( object sender , RoutedEventArgs e ) { 
  Test C# function definition:    : private void Createrequest ( object sender , RoutedEventArgs e ) { 
  data declar    : TestRequest tr = new TestRequest ( ) ; 
  Handle C# function definition:  : private void Createrequest ( object sender , RoutedEventArgs e ) { 
  Test begin scope                : TestRequest tr = new TestRequest ( ) ; 
  Test end scope                  : TestRequest tr = new TestRequest ( ) ; 
  executable     : string [ ] fname ; 
  Test preproc statement:         : TestRequest tr = new TestRequest ( ) ; 
  Test namespace definition:      : TestRequest tr = new TestRequest ( ) ; 
  Test class definition:          : TestRequest tr = new TestRequest ( ) ; 
  Test struct definition:         : TestRequest tr = new TestRequest ( ) ; 
  Test C# function definition:    : TestRequest tr = new TestRequest ( ) ; 
  Test control definition:        : TestRequest tr = new TestRequest ( ) ; 
  Test C# declaration:            : TestRequest tr = new TestRequest ( ) ; 
  Handle C# declaration:          : TestRequest tr = new TestRequest ( ) ; 
  Test begin scope                : string [ ] fname ; 
  Test end scope                  : string [ ] fname ; 
  Test preproc statement:         : string [ ] fname ; 
  Test namespace definition:      : string [ ] fname ; 
  Test class definition:          : string [ ] fname ; 
  Test struct definition:         : string [ ] fname ; 
  Test C# function definition:    : string [ ] fname ; 
  Test control definition:        : string [ ] fname ; 
  Test C# declaration:            : string [ ] fname ; 
  Test C# executable:             : string [ ] fname ; 
  Handle C# executable:           : string [ ] fname ; 
  Test begin scope                : if ( test . Items . Count != 0 ) { 
  handle begin scope              : if ( test . Items . Count != 0 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( test . Items . Count != 0 ) { 
  Test preproc statement:         : if ( test . Items . Count != 0 ) { 
  Test namespace definition:      : if ( test . Items . Count != 0 ) { 
  control def    : if ( test . Items . Count != 0 ) { 
  Test class definition:          : if ( test . Items . Count != 0 ) { 
  Test struct definition:         : if ( test . Items . Count != 0 ) { 
  Test C# function definition:    : if ( test . Items . Count != 0 ) { 
  Test control definition:        : if ( test . Items . Count != 0 ) { 
  Handle control definition:      : if ( test . Items . Count != 0 ) { 
  Test begin scope                : for ( int i = 1 ; i < = test . Items . Count ; i ++ ) { 
  handle begin scope              : for ( int i = 1 ; i < = test . Items . Count ; i ++ ) { 
--- stack size = 6 ---
  Test end scope                  : for ( int i = 1 ; i < = test . Items . Count ; i ++ ) { 
  Test preproc statement:         : for ( int i = 1 ; i < = test . Items . Count ; i ++ ) { 
  Test namespace definition:      : for ( int i = 1 ; i < = test . Items . Count ; i ++ ) { 
  Test class definition:          : for ( int i = 1 ; i < = test . Items . Count ; i ++ ) { 
  control def    : for ( int i = 1 ; i < = test . Items . Count ; i ++ ) { 
  Test struct definition:         : for ( int i = 1 ; i < = test . Items . Count ; i ++ ) { 
  Test C# function definition:    : for ( int i = 1 ; i < = test . Items . Count ; i ++ ) { 
  Test control definition:        : for ( int i = 1 ; i < = test . Items . Count ; i ++ ) { 
  Handle control definition:      : for ( int i = 1 ; i < = test . Items . Count ; i ++ ) { 
  Test begin scope                : TestElement te = new TestElement ( ) ; 
  function declar: TestElement te = new TestElement ( ) ; 
  Test end scope                  : TestElement te = new TestElement ( ) ; 
  Test preproc statement:         : TestElement te = new TestElement ( ) ; 
  Test namespace definition:      : TestElement te = new TestElement ( ) ; 
  Test class definition:          : TestElement te = new TestElement ( ) ; 
  Test struct definition:         : TestElement te = new TestElement ( ) ; 
  Test C# function definition:    : TestElement te = new TestElement ( ) ; 
  executable     : te . testName = testlist [ tccnt ] ; 
  Test control definition:        : TestElement te = new TestElement ( ) ; 
  Test C# declaration:            : TestElement te = new TestElement ( ) ; 
  Handle C# declaration:          : TestElement te = new TestElement ( ) ; 
  Test begin scope                : te . testName = testlist [ tccnt ] ; 
  Test end scope                  : te . testName = testlist [ tccnt ] ; 
  Test preproc statement:         : te . testName = testlist [ tccnt ] ; 
  Test namespace definition:      : te . testName = testlist [ tccnt ] ; 
  Test class definition:          : te . testName = testlist [ tccnt ] ; 
  Test struct definition:         : te . testName = testlist [ tccnt ] ; 
  Test C# function definition:    : te . testName = testlist [ tccnt ] ; 
  Test control definition:        : te . testName = testlist [ tccnt ] ; 
  Test C# declaration:            : te . testName = testlist [ tccnt ] ; 
  executable     : fname = tcfilenames [ tccnt ] . Split ( new char [ 0 ] ) ; 
  Test C# executable:             : te . testName = testlist [ tccnt ] ; 
  Handle C# executable:           : te . testName = testlist [ tccnt ] ; 
  Test begin scope                : fname = tcfilenames [ tccnt ] . Split ( new char [ 0 ] ) ; 
  Test end scope                  : fname = tcfilenames [ tccnt ] . Split ( new char [ 0 ] ) ; 
  Test preproc statement:         : fname = tcfilenames [ tccnt ] . Split ( new char [ 0 ] ) ; 
  Test namespace definition:      : fname = tcfilenames [ tccnt ] . Split ( new char [ 0 ] ) ; 
  Test class definition:          : fname = tcfilenames [ tccnt ] . Split ( new char [ 0 ] ) ; 
  Test struct definition:         : fname = tcfilenames [ tccnt ] . Split ( new char [ 0 ] ) ; 
  Test C# function definition:    : fname = tcfilenames [ tccnt ] . Split ( new char [ 0 ] ) ; 
  Test control definition:        : fname = tcfilenames [ tccnt ] . Split ( new char [ 0 ] ) ; 
  Test C# declaration:            : fname = tcfilenames [ tccnt ] . Split ( new char [ 0 ] ) ; 
  Test C# executable:             : fname = tcfilenames [ tccnt ] . Split ( new char [ 0 ] ) ; 
  Handle C# executable:           : fname = tcfilenames [ tccnt ] . Split ( new char [ 0 ] ) ; 
  Test begin scope                : for ( int j = 0 ; j < fname . Length ; j ++ ) { 
  handle begin scope              : for ( int j = 0 ; j < fname . Length ; j ++ ) { 
--- stack size = 7 ---
  Test end scope                  : for ( int j = 0 ; j < fname . Length ; j ++ ) { 
  Test preproc statement:         : for ( int j = 0 ; j < fname . Length ; j ++ ) { 
  Test namespace definition:      : for ( int j = 0 ; j < fname . Length ; j ++ ) { 
  Test class definition:          : for ( int j = 0 ; j < fname . Length ; j ++ ) { 
  control def    : for ( int j = 0 ; j < fname . Length ; j ++ ) { 
  Test struct definition:         : for ( int j = 0 ; j < fname . Length ; j ++ ) { 
  Test C# function definition:    : for ( int j = 0 ; j < fname . Length ; j ++ ) { 
  Test control definition:        : for ( int j = 0 ; j < fname . Length ; j ++ ) { 
  Handle control definition:      : for ( int j = 0 ; j < fname . Length ; j ++ ) { 
  Test begin scope                : if ( fname [ j ] . ToString ( ) . StartsWith ( "testdriver" ) ) { 
  handle begin scope              : if ( fname [ j ] . ToString ( ) . StartsWith ( "testdriver" ) ) { 
--- stack size = 8 ---
  Test end scope                  : if ( fname [ j ] . ToString ( ) . StartsWith ( "testdriver" ) ) { 
  Test preproc statement:         : if ( fname [ j ] . ToString ( ) . StartsWith ( "testdriver" ) ) { 
  Test namespace definition:      : if ( fname [ j ] . ToString ( ) . StartsWith ( "testdriver" ) ) { 
  Test class definition:          : if ( fname [ j ] . ToString ( ) . StartsWith ( "testdriver" ) ) { 
  control def    : if ( fname [ j ] . ToString ( ) . StartsWith ( "testdriver" ) ) { 
  Test struct definition:         : if ( fname [ j ] . ToString ( ) . StartsWith ( "testdriver" ) ) { 
  Test C# function definition:    : if ( fname [ j ] . ToString ( ) . StartsWith ( "testdriver" ) ) { 
  Test control definition:        : if ( fname [ j ] . ToString ( ) . StartsWith ( "testdriver" ) ) { 
  Handle control definition:      : if ( fname [ j ] . ToString ( ) . StartsWith ( "testdriver" ) ) { 
  Test begin scope                : te . addDriver ( fname [ j ] ) ; 
  Test end scope                  : te . addDriver ( fname [ j ] ) ; 
  function declar: te . addDriver ( fname [ j ] ) ; 
  Test preproc statement:         : te . addDriver ( fname [ j ] ) ; 
--- stack size = 7 ---
  Test namespace definition:      : te . addDriver ( fname [ j ] ) ; 
  Test class definition:          : te . addDriver ( fname [ j ] ) ; 
  Test struct definition:         : te . addDriver ( fname [ j ] ) ; 
  Test C# function definition:    : te . addDriver ( fname [ j ] ) ; 
  Test control definition:        : te . addDriver ( fname [ j ] ) ; 
  Test C# declaration:            : te . addDriver ( fname [ j ] ) ; 
  Handle C# declaration:          : te . addDriver ( fname [ j ] ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 8 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : te . addCode ( fname [ j ] ) ; 
  Test end scope                  : te . addCode ( fname [ j ] ) ; 
  Test preproc statement:         : te . addCode ( fname [ j ] ) ; 
  Test namespace definition:      : te . addCode ( fname [ j ] ) ; 
  Test class definition:          : te . addCode ( fname [ j ] ) ; 
  Test struct definition:         : te . addCode ( fname [ j ] ) ; 
  function declar: te . addCode ( fname [ j ] ) ; 
  Test C# function definition:    : te . addCode ( fname [ j ] ) ; 
--- stack size = 7 ---
  Test control definition:        : te . addCode ( fname [ j ] ) ; 
--- stack size = 6 ---
  Test C# declaration:            : te . addCode ( fname [ j ] ) ; 
  Handle C# declaration:          : te . addCode ( fname [ j ] ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  executable     : tr . author = "Dinesh" ; 
  Handle end scope                : } 
  Test begin scope                : tr . author = "Dinesh" ; 
  Test end scope                  : tr . author = "Dinesh" ; 
  Test preproc statement:         : tr . author = "Dinesh" ; 
  Test namespace definition:      : tr . author = "Dinesh" ; 
  Test class definition:          : tr . author = "Dinesh" ; 
  Test struct definition:         : tr . author = "Dinesh" ; 
  Test C# function definition:    : tr . author = "Dinesh" ; 
  Test control definition:        : tr . author = "Dinesh" ; 
  executable     : tr . tests . Add ( te ) ; 
  Test C# declaration:            : tr . author = "Dinesh" ; 
  Test C# executable:             : tr . author = "Dinesh" ; 
  Handle C# executable:           : tr . author = "Dinesh" ; 
  Test begin scope                : tr . tests . Add ( te ) ; 
  Test end scope                  : tr . tests . Add ( te ) ; 
  Test preproc statement:         : tr . tests . Add ( te ) ; 
  Test namespace definition:      : tr . tests . Add ( te ) ; 
  Test class definition:          : tr . tests . Add ( te ) ; 
  function declar: string xml = tr . ToXml ( ) ; 
  Test struct definition:         : tr . tests . Add ( te ) ; 
  Test C# function definition:    : tr . tests . Add ( te ) ; 
  Test control definition:        : tr . tests . Add ( te ) ; 
  Test C# declaration:            : tr . tests . Add ( te ) ; 
  Test C# executable:             : tr . tests . Add ( te ) ; 
  Handle C# executable:           : tr . tests . Add ( te ) ; 
  Test begin scope                : string xml = tr . ToXml ( ) ; 
  Test end scope                  : string xml = tr . ToXml ( ) ; 
  Test preproc statement:         : string xml = tr . ToXml ( ) ; 
  Test namespace definition:      : string xml = tr . ToXml ( ) ; 
  Test class definition:          : string xml = tr . ToXml ( ) ; 
  Test struct definition:         : string xml = tr . ToXml ( ) ; 
  Test C# function definition:    : string xml = tr . ToXml ( ) ; 
  Test control definition:        : string xml = tr . ToXml ( ) ; 
  Test C# declaration:            : string xml = tr . ToXml ( ) ; 
  Handle C# declaration:          : string xml = tr . ToXml ( ) ; 
  Test begin scope                : 
    string filename = "TestRequest_" + xmlcnt + "_" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".xml" ; 
  data declar    : 
    string filename = "TestRequest_" + xmlcnt + "_" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".xml" ; 
  Test end scope                  : 
    string filename = "TestRequest_" + xmlcnt + "_" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".xml" ; 
  Test preproc statement:         : 
    string filename = "TestRequest_" + xmlcnt + "_" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".xml" ; 
  Test namespace definition:      : 
    string filename = "TestRequest_" + xmlcnt + "_" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".xml" ; 
  executable     : sendTestRequestToRepo ( filename + "," + xml ) ; 
  Test class definition:          : 
    string filename = "TestRequest_" + xmlcnt + "_" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".xml" ; 
  Test struct definition:         : 
    string filename = "TestRequest_" + xmlcnt + "_" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".xml" ; 
  Test C# function definition:    : 
    string filename = "TestRequest_" + xmlcnt + "_" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".xml" ; 
  executable     : request . Items . Add ( filename ) ; 
  Test control definition:        : 
    string filename = "TestRequest_" + xmlcnt + "_" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".xml" ; 
  Test C# declaration:            : 
    string filename = "TestRequest_" + xmlcnt + "_" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".xml" ; 
  Handle C# declaration:          : 
    string filename = "TestRequest_" + xmlcnt + "_" + DateTime . Now . ToString ( "MMddyyyyHHmmssfff" ) + ".xml" ; 
  Test begin scope                : sendTestRequestToRepo ( filename + "," + xml ) ; 
  Test end scope                  : sendTestRequestToRepo ( filename + "," + xml ) ; 
  Test preproc statement:         : sendTestRequestToRepo ( filename + "," + xml ) ; 
  Test namespace definition:      : sendTestRequestToRepo ( filename + "," + xml ) ; 
  Test class definition:          : sendTestRequestToRepo ( filename + "," + xml ) ; 
  Test struct definition:         : sendTestRequestToRepo ( filename + "," + xml ) ; 
  Test C# function definition:    : sendTestRequestToRepo ( filename + "," + xml ) ; 
  Test control definition:        : sendTestRequestToRepo ( filename + "," + xml ) ; 
  function declar: test . Items . Clear ( ) ; 
  Test C# declaration:            : sendTestRequestToRepo ( filename + "," + xml ) ; 
  Test C# executable:             : sendTestRequestToRepo ( filename + "," + xml ) ; 
  Handle C# executable:           : sendTestRequestToRepo ( filename + "," + xml ) ; 
  Test begin scope                : request . Items . Add ( filename ) ; 
  Test end scope                  : request . Items . Add ( filename ) ; 
  Test preproc statement:         : request . Items . Add ( filename ) ; 
  executable     : tccnt = tccnt + 1 ; 
  Test namespace definition:      : request . Items . Add ( filename ) ; 
  Test class definition:          : request . Items . Add ( filename ) ; 
--- stack size = 5 ---
  Test struct definition:         : request . Items . Add ( filename ) ; 
  Test C# function definition:    : request . Items . Add ( filename ) ; 
  Test control definition:        : request . Items . Add ( filename ) ; 
  Test C# declaration:            : request . Items . Add ( filename ) ; 
  Test C# executable:             : request . Items . Add ( filename ) ; 
  Handle C# executable:           : request . Items . Add ( filename ) ; 
  Test begin scope                : test . Items . Clear ( ) ; 
  executable     : xmlcnt = xmlcnt + 1 ; 
  Test end scope                  : test . Items . Clear ( ) ; 
  Test preproc statement:         : test . Items . Clear ( ) ; 
  Test namespace definition:      : test . Items . Clear ( ) ; 
  Test class definition:          : test . Items . Clear ( ) ; 
  Test struct definition:         : test . Items . Clear ( ) ; 
  Test C# function definition:    : test . Items . Clear ( ) ; 
  executable     : requestcount = requestcount + 1 ; 
  Test control definition:        : test . Items . Clear ( ) ; 
--- stack size = 4 ---
  Test C# declaration:            : test . Items . Clear ( ) ; 
  Handle C# declaration:          : test . Items . Clear ( ) ; 
  Test begin scope                : tccnt = tccnt + 1 ; 
  Test end scope                  : tccnt = tccnt + 1 ; 
  Test preproc statement:         : tccnt = tccnt + 1 ; 
  Test namespace definition:      : tccnt = tccnt + 1 ; 
  Test class definition:          : tccnt = tccnt + 1 ; 
  Test struct definition:         : tccnt = tccnt + 1 ; 
  Test C# function definition:    : tccnt = tccnt + 1 ; 
  Test control definition:        : tccnt = tccnt + 1 ; 
  Test C# declaration:            : tccnt = tccnt + 1 ; 
  Test C# executable:             : tccnt = tccnt + 1 ; 
  Handle C# executable:           : tccnt = tccnt + 1 ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : xmlcnt = xmlcnt + 1 ; 
  Test end scope                  : xmlcnt = xmlcnt + 1 ; 
  Test preproc statement:         : xmlcnt = xmlcnt + 1 ; 
  Test namespace definition:      : xmlcnt = xmlcnt + 1 ; 
  Test class definition:          : xmlcnt = xmlcnt + 1 ; 
  Test struct definition:         : xmlcnt = xmlcnt + 1 ; 
  Test C# function definition:    : xmlcnt = xmlcnt + 1 ; 
  Test control definition:        : xmlcnt = xmlcnt + 1 ; 
  Test C# declaration:            : xmlcnt = xmlcnt + 1 ; 
  Test C# executable:             : xmlcnt = xmlcnt + 1 ; 
  Handle C# executable:           : xmlcnt = xmlcnt + 1 ; 
  Test begin scope                : requestcount = requestcount + 1 ; 
  Test end scope                  : requestcount = requestcount + 1 ; 
  Test preproc statement:         : requestcount = requestcount + 1 ; 
  Test namespace definition:      : requestcount = requestcount + 1 ; 
  Test class definition:          : requestcount = requestcount + 1 ; 
  Test struct definition:         : requestcount = requestcount + 1 ; 
  Test C# function definition:    : requestcount = requestcount + 1 ; 
  Test control definition:        : requestcount = requestcount + 1 ; 
  Test C# declaration:            : requestcount = requestcount + 1 ; 
  Test C# executable:             : requestcount = requestcount + 1 ; 
  Handle C# executable:           : requestcount = requestcount + 1 ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : 
    MessageBox . Show ( String . Format ( "No tests available to create request.! Please create test!" ) ) ; 
  Test end scope                  : 
    MessageBox . Show ( String . Format ( "No tests available to create request.! Please create test!" ) ) ; 
  Test preproc statement:         : 
    MessageBox . Show ( String . Format ( "No tests available to create request.! Please create test!" ) ) ; 
  Test namespace definition:      : 
    MessageBox . Show ( String . Format ( "No tests available to create request.! Please create test!" ) ) ; 
  Test class definition:          : 
    MessageBox . Show ( String . Format ( "No tests available to create request.! Please create test!" ) ) ; 
  executable     : 
    MessageBox . Show ( String . Format ( "No tests available to create request.! Please create test!" ) ) ; 
  Test struct definition:         : 
    MessageBox . Show ( String . Format ( "No tests available to create request.! Please create test!" ) ) ; 
--- stack size = 4 ---
  Test C# function definition:    : 
    MessageBox . Show ( String . Format ( "No tests available to create request.! Please create test!" ) ) ; 
--- stack size = 3 ---
  Test control definition:        : 
    MessageBox . Show ( String . Format ( "No tests available to create request.! Please create test!" ) ) ; 
  Test C# declaration:            : 
    MessageBox . Show ( String . Format ( "No tests available to create request.! Please create test!" ) ) ; 
  Test C# executable:             : 
    MessageBox . Show ( String . Format ( "No tests available to create request.! Please create test!" ) ) ; 
  Handle C# executable:           : 
    MessageBox . Show ( String . Format ( "No tests available to create request.! Please create test!" ) ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void sendTestRequestToRepo ( string body ) { 
  handle begin scope              : private void sendTestRequestToRepo ( string body ) { 
--- stack size = 4 ---
  Test end scope                  : private void sendTestRequestToRepo ( string body ) { 
  Test preproc statement:         : private void sendTestRequestToRepo ( string body ) { 
  Test namespace definition:      : private void sendTestRequestToRepo ( string body ) { 
  function def   : private void sendTestRequestToRepo ( string body ) { 
  Test class definition:          : private void sendTestRequestToRepo ( string body ) { 
  Test struct definition:         : private void sendTestRequestToRepo ( string body ) { 
  Test C# function definition:    : private void sendTestRequestToRepo ( string body ) { 
  Handle C# function definition:  : private void sendTestRequestToRepo ( string body ) { 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . command = "xmlstring" ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . to = ; 
  Test begin scope                : sndMsg . command = "xmlstring" ; 
  Test end scope                  : sndMsg . command = "xmlstring" ; 
  Test preproc statement:         : sndMsg . command = "xmlstring" ; 
  executable     : sndMsg . from = ; 
  Test namespace definition:      : sndMsg . command = "xmlstring" ; 
  Test class definition:          : sndMsg . command = "xmlstring" ; 
  Test struct definition:         : sndMsg . command = "xmlstring" ; 
  Test C# function definition:    : sndMsg . command = "xmlstring" ; 
  Test control definition:        : sndMsg . command = "xmlstring" ; 
  executable     : sndMsg . body = body ; 
  Test C# declaration:            : sndMsg . command = "xmlstring" ; 
  Test C# executable:             : sndMsg . command = "xmlstring" ; 
  Handle C# executable:           : sndMsg . command = "xmlstring" ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : sndMsg . port = 8074 ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
--- stack size = 3 ---
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = ; 
  Test end scope                  : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . to = ; 
  Test class definition:          : sndMsg . to = ; 
  Test struct definition:         : sndMsg . to = ; 
  Test C# function definition:    : sndMsg . to = ; 
  Test control definition:        : sndMsg . to = ; 
  Test C# declaration:            : sndMsg . to = ; 
  Test C# executable:             : sndMsg . to = ; 
  Handle C# executable:           : sndMsg . to = ; 
  Test begin scope                : sndMsg . from = ; 
  Test end scope                  : sndMsg . from = ; 
  Test preproc statement:         : sndMsg . from = ; 
  Test namespace definition:      : sndMsg . from = ; 
  Test class definition:          : sndMsg . from = ; 
  Test struct definition:         : sndMsg . from = ; 
  Test C# function definition:    : sndMsg . from = ; 
  Test control definition:        : sndMsg . from = ; 
  Test C# declaration:            : sndMsg . from = ; 
  Test C# executable:             : sndMsg . from = ; 
  Handle C# executable:           : sndMsg . from = ; 
  Test begin scope                : sndMsg . body = body ; 
  Test end scope                  : sndMsg . body = body ; 
  Test preproc statement:         : sndMsg . body = body ; 
  Test namespace definition:      : sndMsg . body = body ; 
  Test class definition:          : sndMsg . body = body ; 
  Test struct definition:         : sndMsg . body = body ; 
  Test C# function definition:    : sndMsg . body = body ; 
  Test control definition:        : sndMsg . body = body ; 
  Test C# declaration:            : sndMsg . body = body ; 
  Test C# executable:             : sndMsg . body = body ; 
  Handle C# executable:           : sndMsg . body = body ; 
  Test begin scope                : sndMsg . port = 8074 ; 
  Test end scope                  : sndMsg . port = 8074 ; 
  Test preproc statement:         : sndMsg . port = 8074 ; 
  Test namespace definition:      : sndMsg . port = 8074 ; 
  Test class definition:          : sndMsg . port = 8074 ; 
  Test struct definition:         : sndMsg . port = 8074 ; 
  Test C# function definition:    : sndMsg . port = 8074 ; 
  Test control definition:        : sndMsg . port = 8074 ; 
  Test C# declaration:            : sndMsg . port = 8074 ; 
  Test C# executable:             : sndMsg . port = 8074 ; 
  Handle C# executable:           : sndMsg . port = 8074 ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void startRepoProcess ( ) { 
  handle begin scope              : private void startRepoProcess ( ) { 
--- stack size = 4 ---
  Test end scope                  : private void startRepoProcess ( ) { 
  Test preproc statement:         : private void startRepoProcess ( ) { 
  function def   : private void startRepoProcess ( ) { 
  Test namespace definition:      : private void startRepoProcess ( ) { 
  Test class definition:          : private void startRepoProcess ( ) { 
  Test struct definition:         : private void startRepoProcess ( ) { 
  Test C# function definition:    : private void startRepoProcess ( ) { 
  Handle C# function definition:  : private void startRepoProcess ( ) { 
  Test begin scope                : if ( repocheck == 0 ) { 
  handle begin scope              : if ( repocheck == 0 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( repocheck == 0 ) { 
  Test preproc statement:         : if ( repocheck == 0 ) { 
  Test namespace definition:      : if ( repocheck == 0 ) { 
  control def    : if ( repocheck == 0 ) { 
  Test class definition:          : if ( repocheck == 0 ) { 
  Test struct definition:         : if ( repocheck == 0 ) { 
  Test C# function definition:    : if ( repocheck == 0 ) { 
  Test control definition:        : if ( repocheck == 0 ) { 
  Handle control definition:      : if ( repocheck == 0 ) { 
  Test begin scope                : repThread = new Thread ( RepoThread ) ; 
  Test end scope                  : repThread = new Thread ( RepoThread ) ; 
  executable     : repThread = new Thread ( RepoThread ) ; 
  Test preproc statement:         : repThread = new Thread ( RepoThread ) ; 
  Test namespace definition:      : repThread = new Thread ( RepoThread ) ; 
  Test class definition:          : repThread = new Thread ( RepoThread ) ; 
  Test struct definition:         : repThread = new Thread ( RepoThread ) ; 
  Test C# function definition:    : repThread = new Thread ( RepoThread ) ; 
  Test control definition:        : repThread = new Thread ( RepoThread ) ; 
  function declar: repThread . Start ( ) ; 
  Test C# declaration:            : repThread = new Thread ( RepoThread ) ; 
--- stack size = 4 ---
  Test C# executable:             : repThread = new Thread ( RepoThread ) ; 
--- stack size = 3 ---
  Handle C# executable:           : repThread = new Thread ( RepoThread ) ; 
  Test begin scope                : repThread . Start ( ) ; 
  Test end scope                  : repThread . Start ( ) ; 
  Test preproc statement:         : repThread . Start ( ) ; 
  Test namespace definition:      : repThread . Start ( ) ; 
  Test class definition:          : repThread . Start ( ) ; 
  Test struct definition:         : repThread . Start ( ) ; 
  Test C# function definition:    : repThread . Start ( ) ; 
  Test control definition:        : repThread . Start ( ) ; 
  Test C# declaration:            : repThread . Start ( ) ; 
  Handle C# declaration:          : repThread . Start ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : static void RepoThread ( ) { 
  handle begin scope              : static void RepoThread ( ) { 
--- stack size = 4 ---
  Test end scope                  : static void RepoThread ( ) { 
  Test preproc statement:         : static void RepoThread ( ) { 
  function def   : static void RepoThread ( ) { 
  Test namespace definition:      : static void RepoThread ( ) { 
  Test class definition:          : static void RepoThread ( ) { 
  Test struct definition:         : static void RepoThread ( ) { 
  Test C# function definition:    : static void RepoThread ( ) { 
  data declar    : bool check = true ; 
  Handle C# function definition:  : static void RepoThread ( ) { 
  Test begin scope                : bool check = true ; 
  Test end scope                  : bool check = true ; 
  Test preproc statement:         : bool check = true ; 
  Test namespace definition:      : bool check = true ; 
  data declar    : Process proc = new Process ( ) ; 
  Test class definition:          : bool check = true ; 
  Test struct definition:         : bool check = true ; 
  Test C# function definition:    : bool check = true ; 
  Test control definition:        : bool check = true ; 
  Test C# declaration:            : bool check = true ; 
  data declar    : string fileName = "..\\..\\..\\ConsoleApp2\\bin\\debug\\MockRepo.exe" ; 
  Handle C# declaration:          : bool check = true ; 
  Test begin scope                : Process proc = new Process ( ) ; 
  Test end scope                  : Process proc = new Process ( ) ; 
  Test preproc statement:         : Process proc = new Process ( ) ; 
  Test namespace definition:      : Process proc = new Process ( ) ; 
  Test class definition:          : Process proc = new Process ( ) ; 
  Test struct definition:         : Process proc = new Process ( ) ; 
  data declar    : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test C# function definition:    : Process proc = new Process ( ) ; 
  Test control definition:        : Process proc = new Process ( ) ; 
  Test C# declaration:            : Process proc = new Process ( ) ; 
  Handle C# declaration:          : Process proc = new Process ( ) ; 
  Test begin scope                : string fileName = "..\\..\\..\\ConsoleApp2\\bin\\debug\\MockRepo.exe" ; 
  executable     : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test end scope                  : string fileName = "..\\..\\..\\ConsoleApp2\\bin\\debug\\MockRepo.exe" ; 
  Test preproc statement:         : string fileName = "..\\..\\..\\ConsoleApp2\\bin\\debug\\MockRepo.exe" ; 
  Test namespace definition:      : string fileName = "..\\..\\..\\ConsoleApp2\\bin\\debug\\MockRepo.exe" ; 
  Test class definition:          : string fileName = "..\\..\\..\\ConsoleApp2\\bin\\debug\\MockRepo.exe" ; 
  Test struct definition:         : string fileName = "..\\..\\..\\ConsoleApp2\\bin\\debug\\MockRepo.exe" ; 
  Test C# function definition:    : string fileName = "..\\..\\..\\ConsoleApp2\\bin\\debug\\MockRepo.exe" ; 
  Test control definition:        : string fileName = "..\\..\\..\\ConsoleApp2\\bin\\debug\\MockRepo.exe" ; 
  Test C# declaration:            : string fileName = "..\\..\\..\\ConsoleApp2\\bin\\debug\\MockRepo.exe" ; 
  Handle C# declaration:          : string fileName = "..\\..\\..\\ConsoleApp2\\bin\\debug\\MockRepo.exe" ; 
  Test begin scope                : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test end scope                  : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test preproc statement:         : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test namespace definition:      : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test class definition:          : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test struct definition:         : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test C# function definition:    : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test control definition:        : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test C# declaration:            : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Handle C# declaration:          : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test begin scope                : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test end scope                  : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test preproc statement:         : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test namespace definition:      : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test class definition:          : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test struct definition:         : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test C# function definition:    : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test control definition:        : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test C# declaration:            : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test C# executable:             : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Handle C# executable:           : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test begin scope                : try { 
  handle begin scope              : try { 
--- stack size = 5 ---
  Test end scope                  : try { 
  Test preproc statement:         : try { 
  control def    : try { 
  Test namespace definition:      : try { 
  Test class definition:          : try { 
  Test struct definition:         : try { 
  Test C# function definition:    : try { 
  Test control definition:        : try { 
  Handle control definition:      : try { 
  Test begin scope                : Process . Start ( fileName ) ; 
  Test end scope                  : Process . Start ( fileName ) ; 
  Test preproc statement:         : Process . Start ( fileName ) ; 
  executable     : Process . Start ( fileName ) ; 
  Test namespace definition:      : Process . Start ( fileName ) ; 
--- stack size = 4 ---
  Test class definition:          : Process . Start ( fileName ) ; 
  Test struct definition:         : Process . Start ( fileName ) ; 
  Test C# function definition:    : Process . Start ( fileName ) ; 
  Test control definition:        : Process . Start ( fileName ) ; 
  Test C# declaration:            : Process . Start ( fileName ) ; 
  Test C# executable:             : Process . Start ( fileName ) ; 
  Handle C# executable:           : Process . Start ( fileName ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : catch ( Exception ex ) { 
  handle begin scope              : catch ( Exception ex ) { 
--- stack size = 5 ---
  Test end scope                  : catch ( Exception ex ) { 
  Test preproc statement:         : catch ( Exception ex ) { 
  Test namespace definition:      : catch ( Exception ex ) { 
  control def    : catch ( Exception ex ) { 
  Test class definition:          : catch ( Exception ex ) { 
  Test struct definition:         : catch ( Exception ex ) { 
  Test C# function definition:    : catch ( Exception ex ) { 
  Test control definition:        : catch ( Exception ex ) { 
  Handle control definition:      : catch ( Exception ex ) { 
  Test begin scope                : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test end scope                  : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test preproc statement:         : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test namespace definition:      : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test class definition:          : Console . Write ( "\n  {0}" , ex . Message ) ; 
  executable     : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test struct definition:         : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test C# function definition:    : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test control definition:        : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test C# declaration:            : Console . Write ( "\n  {0}" , ex . Message ) ; 
  executable     : check = false ; 
  Test C# executable:             : Console . Write ( "\n  {0}" , ex . Message ) ; 
--- stack size = 4 ---
  Handle C# executable:           : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test begin scope                : check = false ; 
  Test end scope                  : check = false ; 
  Test preproc statement:         : check = false ; 
  Test namespace definition:      : check = false ; 
  Test class definition:          : check = false ; 
  Test struct definition:         : check = false ; 
  Test C# function definition:    : check = false ; 
  Test control definition:        : check = false ; 
  Test C# declaration:            : check = false ; 
  Test C# executable:             : check = false ; 
  Handle C# executable:           : check = false ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : if ( check ) { 
  handle begin scope              : if ( check ) { 
--- stack size = 5 ---
  Test end scope                  : if ( check ) { 
  Test preproc statement:         : if ( check ) { 
  Test namespace definition:      : if ( check ) { 
  control def    : if ( check ) { 
  Test class definition:          : if ( check ) { 
  Test struct definition:         : if ( check ) { 
  Test C# function definition:    : if ( check ) { 
  Test control definition:        : if ( check ) { 
  Handle control definition:      : if ( check ) { 
  executable     : repocheck = 1 ; 
  Test begin scope                : repocheck = 1 ; 
--- stack size = 4 ---
  Test end scope                  : repocheck = 1 ; 
  Test preproc statement:         : repocheck = 1 ; 
  Test namespace definition:      : repocheck = 1 ; 
  Test class definition:          : repocheck = 1 ; 
  Test struct definition:         : repocheck = 1 ; 
  Test C# function definition:    : repocheck = 1 ; 
  Test control definition:        : repocheck = 1 ; 
  Test C# declaration:            : repocheck = 1 ; 
  Test C# executable:             : repocheck = 1 ; 
  Handle C# executable:           : repocheck = 1 ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  Test namespace definition:      : else { 
  control def    : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : MessageBox . Show ( String . Format ( "Repository process failed!" ) ) ; 
  Test end scope                  : MessageBox . Show ( String . Format ( "Repository process failed!" ) ) ; 
  Test preproc statement:         : MessageBox . Show ( String . Format ( "Repository process failed!" ) ) ; 
  Test namespace definition:      : MessageBox . Show ( String . Format ( "Repository process failed!" ) ) ; 
  Test class definition:          : MessageBox . Show ( String . Format ( "Repository process failed!" ) ) ; 
  Test struct definition:         : MessageBox . Show ( String . Format ( "Repository process failed!" ) ) ; 
  Test C# function definition:    : MessageBox . Show ( String . Format ( "Repository process failed!" ) ) ; 
  executable     : MessageBox . Show ( String . Format ( "Repository process failed!" ) ) ; 
  Test control definition:        : MessageBox . Show ( String . Format ( "Repository process failed!" ) ) ; 
--- stack size = 4 ---
  Test C# declaration:            : MessageBox . Show ( String . Format ( "Repository process failed!" ) ) ; 
--- stack size = 3 ---
  Test C# executable:             : MessageBox . Show ( String . Format ( "Repository process failed!" ) ) ; 
  Handle C# executable:           : MessageBox . Show ( String . Format ( "Repository process failed!" ) ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void startTHProcess ( ) { 
  handle begin scope              : private void startTHProcess ( ) { 
--- stack size = 4 ---
  Test end scope                  : private void startTHProcess ( ) { 
  Test preproc statement:         : private void startTHProcess ( ) { 
  function def   : private void startTHProcess ( ) { 
  Test namespace definition:      : private void startTHProcess ( ) { 
  Test class definition:          : private void startTHProcess ( ) { 
  Test struct definition:         : private void startTHProcess ( ) { 
  Test C# function definition:    : private void startTHProcess ( ) { 
  Handle C# function definition:  : private void startTHProcess ( ) { 
  Test begin scope                : if ( Thcheck == 0 ) { 
  handle begin scope              : if ( Thcheck == 0 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( Thcheck == 0 ) { 
  Test preproc statement:         : if ( Thcheck == 0 ) { 
  Test namespace definition:      : if ( Thcheck == 0 ) { 
  control def    : if ( Thcheck == 0 ) { 
  Test class definition:          : if ( Thcheck == 0 ) { 
  Test struct definition:         : if ( Thcheck == 0 ) { 
  Test C# function definition:    : if ( Thcheck == 0 ) { 
  Test control definition:        : if ( Thcheck == 0 ) { 
  Handle control definition:      : if ( Thcheck == 0 ) { 
  Test begin scope                : thThread = new Thread ( ThThread ) ; 
  Test end scope                  : thThread = new Thread ( ThThread ) ; 
  Test preproc statement:         : thThread = new Thread ( ThThread ) ; 
  executable     : thThread = new Thread ( ThThread ) ; 
  Test namespace definition:      : thThread = new Thread ( ThThread ) ; 
  Test class definition:          : thThread = new Thread ( ThThread ) ; 
  Test struct definition:         : thThread = new Thread ( ThThread ) ; 
  Test C# function definition:    : thThread = new Thread ( ThThread ) ; 
  Test control definition:        : thThread = new Thread ( ThThread ) ; 
  Test C# declaration:            : thThread = new Thread ( ThThread ) ; 
  Test C# executable:             : thThread = new Thread ( ThThread ) ; 
  Handle C# executable:           : thThread = new Thread ( ThThread ) ; 
  function declar: thThread . Start ( ) ; 
  Test begin scope                : thThread . Start ( ) ; 
--- stack size = 4 ---
  Test end scope                  : thThread . Start ( ) ; 
--- stack size = 3 ---
  Test preproc statement:         : thThread . Start ( ) ; 
  Test namespace definition:      : thThread . Start ( ) ; 
  Test class definition:          : thThread . Start ( ) ; 
  Test struct definition:         : thThread . Start ( ) ; 
  Test C# function definition:    : thThread . Start ( ) ; 
  Test control definition:        : thThread . Start ( ) ; 
  Test C# declaration:            : thThread . Start ( ) ; 
  Handle C# declaration:          : thThread . Start ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : static void ThThread ( ) { 
  handle begin scope              : static void ThThread ( ) { 
--- stack size = 4 ---
  Test end scope                  : static void ThThread ( ) { 
  Test preproc statement:         : static void ThThread ( ) { 
  Test namespace definition:      : static void ThThread ( ) { 
  Test class definition:          : static void ThThread ( ) { 
  function def   : static void ThThread ( ) { 
  Test struct definition:         : static void ThThread ( ) { 
  Test C# function definition:    : static void ThThread ( ) { 
  Handle C# function definition:  : static void ThThread ( ) { 
  Test begin scope                : bool check = true ; 
  data declar    : bool check = true ; 
  Test end scope                  : bool check = true ; 
  Test preproc statement:         : bool check = true ; 
  Test namespace definition:      : bool check = true ; 
  Test class definition:          : bool check = true ; 
  Test struct definition:         : bool check = true ; 
  Test C# function definition:    : bool check = true ; 
  data declar    : Process proc = new Process ( ) ; 
  Test control definition:        : bool check = true ; 
  Test C# declaration:            : bool check = true ; 
  Handle C# declaration:          : bool check = true ; 
  Test begin scope                : Process proc = new Process ( ) ; 
  data declar    : 
    string fileName = "..\\..\\..\\MockTestHarness\\bin\\debug\\MockTestHarness.exe" ; 
  Test end scope                  : Process proc = new Process ( ) ; 
  Test preproc statement:         : Process proc = new Process ( ) ; 
  Test namespace definition:      : Process proc = new Process ( ) ; 
  Test class definition:          : Process proc = new Process ( ) ; 
  Test struct definition:         : Process proc = new Process ( ) ; 
  Test C# function definition:    : Process proc = new Process ( ) ; 
  Test control definition:        : Process proc = new Process ( ) ; 
  data declar    : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test C# declaration:            : Process proc = new Process ( ) ; 
  Handle C# declaration:          : Process proc = new Process ( ) ; 
  Test begin scope                : 
    string fileName = "..\\..\\..\\MockTestHarness\\bin\\debug\\MockTestHarness.exe" ; 
  Test end scope                  : 
    string fileName = "..\\..\\..\\MockTestHarness\\bin\\debug\\MockTestHarness.exe" ; 
  executable     : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test preproc statement:         : 
    string fileName = "..\\..\\..\\MockTestHarness\\bin\\debug\\MockTestHarness.exe" ; 
  Test namespace definition:      : 
    string fileName = "..\\..\\..\\MockTestHarness\\bin\\debug\\MockTestHarness.exe" ; 
  Test class definition:          : 
    string fileName = "..\\..\\..\\MockTestHarness\\bin\\debug\\MockTestHarness.exe" ; 
  Test struct definition:         : 
    string fileName = "..\\..\\..\\MockTestHarness\\bin\\debug\\MockTestHarness.exe" ; 
  Test C# function definition:    : 
    string fileName = "..\\..\\..\\MockTestHarness\\bin\\debug\\MockTestHarness.exe" ; 
  Test control definition:        : 
    string fileName = "..\\..\\..\\MockTestHarness\\bin\\debug\\MockTestHarness.exe" ; 
  Test C# declaration:            : 
    string fileName = "..\\..\\..\\MockTestHarness\\bin\\debug\\MockTestHarness.exe" ; 
  Handle C# declaration:          : 
    string fileName = "..\\..\\..\\MockTestHarness\\bin\\debug\\MockTestHarness.exe" ; 
  Test begin scope                : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test end scope                  : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test preproc statement:         : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test namespace definition:      : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test class definition:          : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test struct definition:         : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test C# function definition:    : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test control definition:        : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test C# declaration:            : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Handle C# declaration:          : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test begin scope                : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test end scope                  : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test preproc statement:         : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test namespace definition:      : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test class definition:          : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test struct definition:         : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test C# function definition:    : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test control definition:        : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test C# declaration:            : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test C# executable:             : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Handle C# executable:           : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test begin scope                : try { 
  handle begin scope              : try { 
--- stack size = 5 ---
  Test end scope                  : try { 
  Test preproc statement:         : try { 
  control def    : try { 
  Test namespace definition:      : try { 
  Test class definition:          : try { 
  Test struct definition:         : try { 
  Test C# function definition:    : try { 
  Test control definition:        : try { 
  Handle control definition:      : try { 
  Test begin scope                : Process . Start ( fileName ) ; 
  Test end scope                  : Process . Start ( fileName ) ; 
  Test preproc statement:         : Process . Start ( fileName ) ; 
  executable     : Process . Start ( fileName ) ; 
  Test namespace definition:      : Process . Start ( fileName ) ; 
--- stack size = 4 ---
  Test class definition:          : Process . Start ( fileName ) ; 
  Test struct definition:         : Process . Start ( fileName ) ; 
  Test C# function definition:    : Process . Start ( fileName ) ; 
  Test control definition:        : Process . Start ( fileName ) ; 
  Test C# declaration:            : Process . Start ( fileName ) ; 
  Test C# executable:             : Process . Start ( fileName ) ; 
  Handle C# executable:           : Process . Start ( fileName ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : catch ( Exception ex ) { 
  handle begin scope              : catch ( Exception ex ) { 
--- stack size = 5 ---
  Test end scope                  : catch ( Exception ex ) { 
  Test preproc statement:         : catch ( Exception ex ) { 
  Test namespace definition:      : catch ( Exception ex ) { 
  Test class definition:          : catch ( Exception ex ) { 
  control def    : catch ( Exception ex ) { 
  Test struct definition:         : catch ( Exception ex ) { 
  Test C# function definition:    : catch ( Exception ex ) { 
  Test control definition:        : catch ( Exception ex ) { 
  Handle control definition:      : catch ( Exception ex ) { 
  Test begin scope                : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test end scope                  : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test preproc statement:         : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test namespace definition:      : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test class definition:          : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test struct definition:         : Console . Write ( "\n  {0}" , ex . Message ) ; 
  executable     : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test C# function definition:    : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test control definition:        : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test C# declaration:            : Console . Write ( "\n  {0}" , ex . Message ) ; 
  executable     : check = false ; 
  Test C# executable:             : Console . Write ( "\n  {0}" , ex . Message ) ; 
--- stack size = 4 ---
  Handle C# executable:           : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test begin scope                : check = false ; 
  Test end scope                  : check = false ; 
  Test preproc statement:         : check = false ; 
  Test namespace definition:      : check = false ; 
  Test class definition:          : check = false ; 
  Test struct definition:         : check = false ; 
  Test C# function definition:    : check = false ; 
  Test control definition:        : check = false ; 
  Test C# declaration:            : check = false ; 
  Test C# executable:             : check = false ; 
  Handle C# executable:           : check = false ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : if ( check ) { 
  handle begin scope              : if ( check ) { 
--- stack size = 5 ---
  Test end scope                  : if ( check ) { 
  Test preproc statement:         : if ( check ) { 
  Test namespace definition:      : if ( check ) { 
  control def    : if ( check ) { 
  Test class definition:          : if ( check ) { 
  Test struct definition:         : if ( check ) { 
  Test C# function definition:    : if ( check ) { 
  Test control definition:        : if ( check ) { 
  executable     : Thcheck = 1 ; 
  Handle control definition:      : if ( check ) { 
--- stack size = 4 ---
  Test begin scope                : Thcheck = 1 ; 
  Test end scope                  : Thcheck = 1 ; 
  Test preproc statement:         : Thcheck = 1 ; 
  Test namespace definition:      : Thcheck = 1 ; 
  Test class definition:          : Thcheck = 1 ; 
  Test struct definition:         : Thcheck = 1 ; 
  Test C# function definition:    : Thcheck = 1 ; 
  Test control definition:        : Thcheck = 1 ; 
  Test C# declaration:            : Thcheck = 1 ; 
  Test C# executable:             : Thcheck = 1 ; 
  Handle C# executable:           : Thcheck = 1 ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : MessageBox . Show ( String . Format ( "test harness process failed!" ) ) ; 
  Test end scope                  : MessageBox . Show ( String . Format ( "test harness process failed!" ) ) ; 
  Test preproc statement:         : MessageBox . Show ( String . Format ( "test harness process failed!" ) ) ; 
  Test namespace definition:      : MessageBox . Show ( String . Format ( "test harness process failed!" ) ) ; 
  Test class definition:          : MessageBox . Show ( String . Format ( "test harness process failed!" ) ) ; 
  executable     : MessageBox . Show ( String . Format ( "test harness process failed!" ) ) ; 
  Test struct definition:         : MessageBox . Show ( String . Format ( "test harness process failed!" ) ) ; 
--- stack size = 4 ---
  Test C# function definition:    : MessageBox . Show ( String . Format ( "test harness process failed!" ) ) ; 
--- stack size = 3 ---
  Test control definition:        : MessageBox . Show ( String . Format ( "test harness process failed!" ) ) ; 
  Test C# declaration:            : MessageBox . Show ( String . Format ( "test harness process failed!" ) ) ; 
  Test C# executable:             : MessageBox . Show ( String . Format ( "test harness process failed!" ) ) ; 
  Handle C# executable:           : MessageBox . Show ( String . Format ( "test harness process failed!" ) ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : static bool createMotherBuilder ( int prcess ) { 
  handle begin scope              : static bool createMotherBuilder ( int prcess ) { 
--- stack size = 4 ---
  Test end scope                  : static bool createMotherBuilder ( int prcess ) { 
  Test preproc statement:         : static bool createMotherBuilder ( int prcess ) { 
  Test namespace definition:      : static bool createMotherBuilder ( int prcess ) { 
  function def   : static bool createMotherBuilder ( int prcess ) { 
  Test class definition:          : static bool createMotherBuilder ( int prcess ) { 
  Test struct definition:         : static bool createMotherBuilder ( int prcess ) { 
  Test C# function definition:    : static bool createMotherBuilder ( int prcess ) { 
  Handle C# function definition:  : static bool createMotherBuilder ( int prcess ) { 
  data declar    : Process proc = new Process ( ) ; 
  Test begin scope                : Process proc = new Process ( ) ; 
  Test end scope                  : Process proc = new Process ( ) ; 
  Test preproc statement:         : Process proc = new Process ( ) ; 
  data declar    : string fileName = "..\\..\\..\\MotherBuilder\\bin\\debug\\MotherBuilder.exe" ; 
  Test namespace definition:      : Process proc = new Process ( ) ; 
  Test class definition:          : Process proc = new Process ( ) ; 
  Test struct definition:         : Process proc = new Process ( ) ; 
  Test C# function definition:    : Process proc = new Process ( ) ; 
  Test control definition:        : Process proc = new Process ( ) ; 
  Test C# declaration:            : Process proc = new Process ( ) ; 
  Handle C# declaration:          : Process proc = new Process ( ) ; 
  data declar    : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test begin scope                : string fileName = "..\\..\\..\\MotherBuilder\\bin\\debug\\MotherBuilder.exe" ; 
  Test end scope                  : string fileName = "..\\..\\..\\MotherBuilder\\bin\\debug\\MotherBuilder.exe" ; 
  Test preproc statement:         : string fileName = "..\\..\\..\\MotherBuilder\\bin\\debug\\MotherBuilder.exe" ; 
  Test namespace definition:      : string fileName = "..\\..\\..\\MotherBuilder\\bin\\debug\\MotherBuilder.exe" ; 
  executable     : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test class definition:          : string fileName = "..\\..\\..\\MotherBuilder\\bin\\debug\\MotherBuilder.exe" ; 
  Test struct definition:         : string fileName = "..\\..\\..\\MotherBuilder\\bin\\debug\\MotherBuilder.exe" ; 
  data declar    : string commandline = prcess . ToString ( ) ; 
  Test C# function definition:    : string fileName = "..\\..\\..\\MotherBuilder\\bin\\debug\\MotherBuilder.exe" ; 
  Test control definition:        : string fileName = "..\\..\\..\\MotherBuilder\\bin\\debug\\MotherBuilder.exe" ; 
  Test C# declaration:            : string fileName = "..\\..\\..\\MotherBuilder\\bin\\debug\\MotherBuilder.exe" ; 
  Handle C# declaration:          : string fileName = "..\\..\\..\\MotherBuilder\\bin\\debug\\MotherBuilder.exe" ; 
  Test begin scope                : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test end scope                  : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test preproc statement:         : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test namespace definition:      : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test class definition:          : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test struct definition:         : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test C# function definition:    : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test control definition:        : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test C# declaration:            : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Handle C# declaration:          : string absFileSpec = System . IO . Path . GetFullPath ( fileName ) ; 
  Test begin scope                : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test end scope                  : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test preproc statement:         : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test namespace definition:      : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test class definition:          : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test struct definition:         : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test C# function definition:    : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test control definition:        : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test C# declaration:            : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test C# executable:             : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Handle C# executable:           : Console . Write ( "\n  attempting to start {0}" , absFileSpec ) ; 
  Test begin scope                : string commandline = prcess . ToString ( ) ; 
  Test end scope                  : string commandline = prcess . ToString ( ) ; 
  Test preproc statement:         : string commandline = prcess . ToString ( ) ; 
  Test namespace definition:      : string commandline = prcess . ToString ( ) ; 
  Test class definition:          : string commandline = prcess . ToString ( ) ; 
  Test struct definition:         : string commandline = prcess . ToString ( ) ; 
  Test C# function definition:    : string commandline = prcess . ToString ( ) ; 
  Test control definition:        : string commandline = prcess . ToString ( ) ; 
  Test C# declaration:            : string commandline = prcess . ToString ( ) ; 
  Handle C# declaration:          : string commandline = prcess . ToString ( ) ; 
  Test begin scope                : try { 
  handle begin scope              : try { 
--- stack size = 5 ---
  Test end scope                  : try { 
  Test preproc statement:         : try { 
  control def    : try { 
  Test namespace definition:      : try { 
  Test class definition:          : try { 
  Test struct definition:         : try { 
  Test C# function definition:    : try { 
  Test control definition:        : try { 
  Handle control definition:      : try { 
  Test begin scope                : Process . Start ( fileName , commandline ) ; 
  Test end scope                  : Process . Start ( fileName , commandline ) ; 
  Test preproc statement:         : Process . Start ( fileName , commandline ) ; 
  Test namespace definition:      : Process . Start ( fileName , commandline ) ; 
  executable     : Process . Start ( fileName , commandline ) ; 
  Test class definition:          : Process . Start ( fileName , commandline ) ; 
--- stack size = 4 ---
  Test struct definition:         : Process . Start ( fileName , commandline ) ; 
  Test C# function definition:    : Process . Start ( fileName , commandline ) ; 
  Test control definition:        : Process . Start ( fileName , commandline ) ; 
  Test C# declaration:            : Process . Start ( fileName , commandline ) ; 
  Test C# executable:             : Process . Start ( fileName , commandline ) ; 
  Handle C# executable:           : Process . Start ( fileName , commandline ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : catch ( Exception ex ) { 
  handle begin scope              : catch ( Exception ex ) { 
--- stack size = 5 ---
  Test end scope                  : catch ( Exception ex ) { 
  Test preproc statement:         : catch ( Exception ex ) { 
  Test namespace definition:      : catch ( Exception ex ) { 
  control def    : catch ( Exception ex ) { 
  Test class definition:          : catch ( Exception ex ) { 
  Test struct definition:         : catch ( Exception ex ) { 
  Test C# function definition:    : catch ( Exception ex ) { 
  Test control definition:        : catch ( Exception ex ) { 
  Handle control definition:      : catch ( Exception ex ) { 
  Test begin scope                : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test end scope                  : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test preproc statement:         : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test namespace definition:      : Console . Write ( "\n  {0}" , ex . Message ) ; 
  executable     : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test class definition:          : Console . Write ( "\n  {0}" , ex . Message ) ; 
  executable     : return false ; 
  Test struct definition:         : Console . Write ( "\n  {0}" , ex . Message ) ; 
--- stack size = 4 ---
  Test C# function definition:    : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test control definition:        : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test C# declaration:            : Console . Write ( "\n  {0}" , ex . Message ) ; 
  executable     : return true ; 
  Test C# executable:             : Console . Write ( "\n  {0}" , ex . Message ) ; 
--- stack size = 3 ---
  Handle C# executable:           : Console . Write ( "\n  {0}" , ex . Message ) ; 
  Test begin scope                : return false ; 
  Test end scope                  : return false ; 
  Test preproc statement:         : return false ; 
  Test namespace definition:      : return false ; 
  Test class definition:          : return false ; 
  Test struct definition:         : return false ; 
  Test C# function definition:    : return false ; 
  Test control definition:        : return false ; 
  Test C# declaration:            : return false ; 
  Test C# executable:             : return false ; 
  Handle C# executable:           : return false ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : return true ; 
  Test end scope                  : return true ; 
  Test preproc statement:         : return true ; 
  Test namespace definition:      : return true ; 
  Test class definition:          : return true ; 
  Test struct definition:         : return true ; 
  Test C# function definition:    : return true ; 
  Test control definition:        : return true ; 
  Test C# declaration:            : return true ; 
  Test C# executable:             : return true ; 
  Handle C# executable:           : return true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void Kill ( object sender , RoutedEventArgs e ) { 
  handle begin scope              : private void Kill ( object sender , RoutedEventArgs e ) { 
--- stack size = 4 ---
  Test end scope                  : private void Kill ( object sender , RoutedEventArgs e ) { 
  Test preproc statement:         : private void Kill ( object sender , RoutedEventArgs e ) { 
  Test namespace definition:      : private void Kill ( object sender , RoutedEventArgs e ) { 
  function def   : private void Kill ( object sender , RoutedEventArgs e ) { 
  Test class definition:          : private void Kill ( object sender , RoutedEventArgs e ) { 
  Test struct definition:         : private void Kill ( object sender , RoutedEventArgs e ) { 
  Test C# function definition:    : private void Kill ( object sender , RoutedEventArgs e ) { 
  Handle C# function definition:  : private void Kill ( object sender , RoutedEventArgs e ) { 
  Test begin scope                : if ( buildcheck == 1 ) { 
  handle begin scope              : if ( buildcheck == 1 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( buildcheck == 1 ) { 
  Test preproc statement:         : if ( buildcheck == 1 ) { 
  Test namespace definition:      : if ( buildcheck == 1 ) { 
  control def    : if ( buildcheck == 1 ) { 
  Test class definition:          : if ( buildcheck == 1 ) { 
  Test struct definition:         : if ( buildcheck == 1 ) { 
  Test C# function definition:    : if ( buildcheck == 1 ) { 
  Test control definition:        : if ( buildcheck == 1 ) { 
  Handle control definition:      : if ( buildcheck == 1 ) { 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . command = "Quit" ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test begin scope                : sndMsg . command = "Quit" ; 
  Test end scope                  : sndMsg . command = "Quit" ; 
  Test preproc statement:         : sndMsg . command = "Quit" ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . command = "Quit" ; 
  Test class definition:          : sndMsg . command = "Quit" ; 
  Test struct definition:         : sndMsg . command = "Quit" ; 
  Test C# function definition:    : sndMsg . command = "Quit" ; 
  Test control definition:        : sndMsg . command = "Quit" ; 
  Test C# declaration:            : sndMsg . command = "Quit" ; 
  executable     : sndMsg . to = ; 
  Test C# executable:             : sndMsg . command = "Quit" ; 
  Handle C# executable:           : sndMsg . command = "Quit" ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : sndMsg . from = ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = ; 
  Test end scope                  : sndMsg . to = ; 
  executable     : sndMsg . body = "Quit" ; 
  Test preproc statement:         : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . to = ; 
  Test class definition:          : sndMsg . to = ; 
  Test struct definition:         : sndMsg . to = ; 
  Test C# function definition:    : sndMsg . to = ; 
  Test control definition:        : sndMsg . to = ; 
  Test C# declaration:            : sndMsg . to = ; 
  Test C# executable:             : sndMsg . to = ; 
  executable     : sndMsg . port = 8074 ; 
  Handle C# executable:           : sndMsg . to = ; 
  Test begin scope                : sndMsg . from = ; 
  Test end scope                  : sndMsg . from = ; 
  Test preproc statement:         : sndMsg . from = ; 
  Test namespace definition:      : sndMsg . from = ; 
  Test class definition:          : sndMsg . from = ; 
  Test struct definition:         : sndMsg . from = ; 
  Test C# function definition:    : sndMsg . from = ; 
  Test control definition:        : sndMsg . from = ; 
  Test C# declaration:            : sndMsg . from = ; 
  Test C# executable:             : sndMsg . from = ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : sndMsg . from = ; 
  Test begin scope                : sndMsg . body = "Quit" ; 
  Test end scope                  : sndMsg . body = "Quit" ; 
  Test preproc statement:         : sndMsg . body = "Quit" ; 
  executable     : buildcheck = 0 ; 
  Test namespace definition:      : sndMsg . body = "Quit" ; 
  Test class definition:          : sndMsg . body = "Quit" ; 
  Test struct definition:         : sndMsg . body = "Quit" ; 
  Test C# function definition:    : sndMsg . body = "Quit" ; 
  Test control definition:        : sndMsg . body = "Quit" ; 
  Test C# declaration:            : sndMsg . body = "Quit" ; 
  executable     : repocheck = 0 ; 
  Test C# executable:             : sndMsg . body = "Quit" ; 
  Handle C# executable:           : sndMsg . body = "Quit" ; 
  Test begin scope                : sndMsg . port = 8074 ; 
  Test end scope                  : sndMsg . port = 8074 ; 
  Test preproc statement:         : sndMsg . port = 8074 ; 
  Test namespace definition:      : sndMsg . port = 8074 ; 
  Test class definition:          : sndMsg . port = 8074 ; 
  Test struct definition:         : sndMsg . port = 8074 ; 
  Test C# function definition:    : sndMsg . port = 8074 ; 
  Test control definition:        : sndMsg . port = 8074 ; 
  executable     : Console . WriteLine ( "\n---------Killed Successfully-------" ) ; 
  Test C# declaration:            : sndMsg . port = 8074 ; 
  Test C# executable:             : sndMsg . port = 8074 ; 
  Handle C# executable:           : sndMsg . port = 8074 ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  executable     : MessageBox . Show ( String . Format ( "Process killed successfully!" ) ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
--- stack size = 4 ---
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : buildcheck = 0 ; 
  Test end scope                  : buildcheck = 0 ; 
  Test preproc statement:         : buildcheck = 0 ; 
  Test namespace definition:      : buildcheck = 0 ; 
  Test class definition:          : buildcheck = 0 ; 
  Test struct definition:         : buildcheck = 0 ; 
  Test C# function definition:    : buildcheck = 0 ; 
  Test control definition:        : buildcheck = 0 ; 
  Test C# declaration:            : buildcheck = 0 ; 
  Test C# executable:             : buildcheck = 0 ; 
  Handle C# executable:           : buildcheck = 0 ; 
  Test begin scope                : repocheck = 0 ; 
  Test end scope                  : repocheck = 0 ; 
  Test preproc statement:         : repocheck = 0 ; 
  Test namespace definition:      : repocheck = 0 ; 
  Test class definition:          : repocheck = 0 ; 
  Test struct definition:         : repocheck = 0 ; 
  Test C# function definition:    : repocheck = 0 ; 
  Test control definition:        : repocheck = 0 ; 
  Test C# declaration:            : repocheck = 0 ; 
  Test C# executable:             : repocheck = 0 ; 
  Handle C# executable:           : repocheck = 0 ; 
  Test begin scope                : Console . WriteLine ( "\n---------Killed Successfully-------" ) ; 
  Test end scope                  : Console . WriteLine ( "\n---------Killed Successfully-------" ) ; 
  Test preproc statement:         : Console . WriteLine ( "\n---------Killed Successfully-------" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n---------Killed Successfully-------" ) ; 
  Test class definition:          : Console . WriteLine ( "\n---------Killed Successfully-------" ) ; 
  Test struct definition:         : Console . WriteLine ( "\n---------Killed Successfully-------" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n---------Killed Successfully-------" ) ; 
  Test control definition:        : Console . WriteLine ( "\n---------Killed Successfully-------" ) ; 
  Test C# declaration:            : Console . WriteLine ( "\n---------Killed Successfully-------" ) ; 
  Test C# executable:             : Console . WriteLine ( "\n---------Killed Successfully-------" ) ; 
  Handle C# executable:           : Console . WriteLine ( "\n---------Killed Successfully-------" ) ; 
  Test begin scope                : MessageBox . Show ( String . Format ( "Process killed successfully!" ) ) ; 
  Test end scope                  : MessageBox . Show ( String . Format ( "Process killed successfully!" ) ) ; 
  Test preproc statement:         : MessageBox . Show ( String . Format ( "Process killed successfully!" ) ) ; 
  Test namespace definition:      : MessageBox . Show ( String . Format ( "Process killed successfully!" ) ) ; 
  Test class definition:          : MessageBox . Show ( String . Format ( "Process killed successfully!" ) ) ; 
  Test struct definition:         : MessageBox . Show ( String . Format ( "Process killed successfully!" ) ) ; 
  Test C# function definition:    : MessageBox . Show ( String . Format ( "Process killed successfully!" ) ) ; 
  Test control definition:        : MessageBox . Show ( String . Format ( "Process killed successfully!" ) ) ; 
  Test C# declaration:            : MessageBox . Show ( String . Format ( "Process killed successfully!" ) ) ; 
  Test C# executable:             : MessageBox . Show ( String . Format ( "Process killed successfully!" ) ) ; 
  Handle C# executable:           : MessageBox . Show ( String . Format ( "Process killed successfully!" ) ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : MessageBox . Show ( String . Format ( "No active process to kill!" ) ) ; 
  Test end scope                  : MessageBox . Show ( String . Format ( "No active process to kill!" ) ) ; 
  Test preproc statement:         : MessageBox . Show ( String . Format ( "No active process to kill!" ) ) ; 
  Test namespace definition:      : MessageBox . Show ( String . Format ( "No active process to kill!" ) ) ; 
  executable     : MessageBox . Show ( String . Format ( "No active process to kill!" ) ) ; 
  Test class definition:          : MessageBox . Show ( String . Format ( "No active process to kill!" ) ) ; 
--- stack size = 4 ---
  Test struct definition:         : MessageBox . Show ( String . Format ( "No active process to kill!" ) ) ; 
--- stack size = 3 ---
  Test C# function definition:    : MessageBox . Show ( String . Format ( "No active process to kill!" ) ) ; 
  Test control definition:        : MessageBox . Show ( String . Format ( "No active process to kill!" ) ) ; 
  Test C# declaration:            : MessageBox . Show ( String . Format ( "No active process to kill!" ) ) ; 
  Test C# executable:             : MessageBox . Show ( String . Format ( "No active process to kill!" ) ) ; 
  Handle C# executable:           : MessageBox . Show ( String . Format ( "No active process to kill!" ) ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void testFunction ( ) { 
  handle begin scope              : private void testFunction ( ) { 
--- stack size = 4 ---
  Test end scope                  : private void testFunction ( ) { 
  Test preproc statement:         : private void testFunction ( ) { 
  Test namespace definition:      : private void testFunction ( ) { 
  function def   : private void testFunction ( ) { 
  Test class definition:          : private void testFunction ( ) { 
  Test struct definition:         : private void testFunction ( ) { 
  Test C# function definition:    : private void testFunction ( ) { 
  Handle C# function definition:  : private void testFunction ( ) { 
  Test begin scope                : if ( buildcheck == 0 ) { 
  handle begin scope              : if ( buildcheck == 0 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( buildcheck == 0 ) { 
  Test preproc statement:         : if ( buildcheck == 0 ) { 
  Test namespace definition:      : if ( buildcheck == 0 ) { 
  control def    : if ( buildcheck == 0 ) { 
  Test class definition:          : if ( buildcheck == 0 ) { 
  Test struct definition:         : if ( buildcheck == 0 ) { 
  Test C# function definition:    : if ( buildcheck == 0 ) { 
  Test control definition:        : if ( buildcheck == 0 ) { 
  Handle control definition:      : if ( buildcheck == 0 ) { 
  Test begin scope                : startRepoProcess ( ) ; 
  function declar: startRepoProcess ( ) ; 
  Test end scope                  : startRepoProcess ( ) ; 
  Test preproc statement:         : startRepoProcess ( ) ; 
  Test namespace definition:      : startRepoProcess ( ) ; 
  Test class definition:          : startRepoProcess ( ) ; 
  Test struct definition:         : startRepoProcess ( ) ; 
  Test C# function definition:    : startRepoProcess ( ) ; 
  Test control definition:        : startRepoProcess ( ) ; 
  data declar    : bool cond = createMotherBuilder ( 3 ) ; 
  Test C# declaration:            : startRepoProcess ( ) ; 
  Handle C# declaration:          : startRepoProcess ( ) ; 
  Test begin scope                : bool cond = createMotherBuilder ( 3 ) ; 
  Test end scope                  : bool cond = createMotherBuilder ( 3 ) ; 
  function declar: startTHProcess ( ) ; 
  Test preproc statement:         : bool cond = createMotherBuilder ( 3 ) ; 
  Test namespace definition:      : bool cond = createMotherBuilder ( 3 ) ; 
  Test class definition:          : bool cond = createMotherBuilder ( 3 ) ; 
  Test struct definition:         : bool cond = createMotherBuilder ( 3 ) ; 
  Test C# function definition:    : bool cond = createMotherBuilder ( 3 ) ; 
  Test control definition:        : bool cond = createMotherBuilder ( 3 ) ; 
  Test C# declaration:            : bool cond = createMotherBuilder ( 3 ) ; 
  Handle C# declaration:          : bool cond = createMotherBuilder ( 3 ) ; 
  Test begin scope                : startTHProcess ( ) ; 
  Test end scope                  : startTHProcess ( ) ; 
  Test preproc statement:         : startTHProcess ( ) ; 
  Test namespace definition:      : startTHProcess ( ) ; 
  Test class definition:          : startTHProcess ( ) ; 
  Test struct definition:         : startTHProcess ( ) ; 
  Test C# function definition:    : startTHProcess ( ) ; 
  Test control definition:        : startTHProcess ( ) ; 
  Test C# declaration:            : startTHProcess ( ) ; 
  Handle C# declaration:          : startTHProcess ( ) ; 
  Test begin scope                : if ( cond ) { 
  handle begin scope              : if ( cond ) { 
--- stack size = 6 ---
  Test end scope                  : if ( cond ) { 
  Test preproc statement:         : if ( cond ) { 
  control def    : if ( cond ) { 
  Test namespace definition:      : if ( cond ) { 
  Test class definition:          : if ( cond ) { 
  Test struct definition:         : if ( cond ) { 
  Test C# function definition:    : if ( cond ) { 
  Test control definition:        : if ( cond ) { 
  Handle control definition:      : if ( cond ) { 
  Test begin scope                : Console . WriteLine ( "\n ------------------------------------" ) ; 
  Test end scope                  : Console . WriteLine ( "\n ------------------------------------" ) ; 
  executable     : Console . WriteLine ( "\n ------------------------------------" ) ; 
  Test preproc statement:         : Console . WriteLine ( "\n ------------------------------------" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n ------------------------------------" ) ; 
  Test class definition:          : Console . WriteLine ( "\n ------------------------------------" ) ; 
  Test struct definition:         : Console . WriteLine ( "\n ------------------------------------" ) ; 
  executable     : Console . WriteLine ( "\n mother builder created successfully" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n ------------------------------------" ) ; 
  Test control definition:        : Console . WriteLine ( "\n ------------------------------------" ) ; 
  Test C# declaration:            : Console . WriteLine ( "\n ------------------------------------" ) ; 
  Test C# executable:             : Console . WriteLine ( "\n ------------------------------------" ) ; 
  Handle C# executable:           : Console . WriteLine ( "\n ------------------------------------" ) ; 
  executable     : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Test begin scope                : Console . WriteLine ( "\n mother builder created successfully" ) ; 
  executable     : buildcheck = 1 ; 
  Test end scope                  : Console . WriteLine ( "\n mother builder created successfully" ) ; 
--- stack size = 5 ---
  Test preproc statement:         : Console . WriteLine ( "\n mother builder created successfully" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n mother builder created successfully" ) ; 
  Test class definition:          : Console . WriteLine ( "\n mother builder created successfully" ) ; 
  Test struct definition:         : Console . WriteLine ( "\n mother builder created successfully" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n mother builder created successfully" ) ; 
  Test control definition:        : Console . WriteLine ( "\n mother builder created successfully" ) ; 
  Test C# declaration:            : Console . WriteLine ( "\n mother builder created successfully" ) ; 
  Test C# executable:             : Console . WriteLine ( "\n mother builder created successfully" ) ; 
  Handle C# executable:           : Console . WriteLine ( "\n mother builder created successfully" ) ; 
  Test begin scope                : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Test end scope                  : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Test preproc statement:         : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Test class definition:          : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Test struct definition:         : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Test control definition:        : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Test C# declaration:            : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Test C# executable:             : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Handle C# executable:           : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Test begin scope                : buildcheck = 1 ; 
  Test end scope                  : buildcheck = 1 ; 
  Test preproc statement:         : buildcheck = 1 ; 
  Test namespace definition:      : buildcheck = 1 ; 
  Test class definition:          : buildcheck = 1 ; 
  Test struct definition:         : buildcheck = 1 ; 
  Test C# function definition:    : buildcheck = 1 ; 
  Test control definition:        : buildcheck = 1 ; 
  Test C# declaration:            : buildcheck = 1 ; 
  Test C# executable:             : buildcheck = 1 ; 
  Handle C# executable:           : buildcheck = 1 ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 6 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : Console . WriteLine ( "\n ------------------------------------" ) ; 
  Test end scope                  : Console . WriteLine ( "\n ------------------------------------" ) ; 
  executable     : Console . WriteLine ( "\n ------------------------------------" ) ; 
  Test preproc statement:         : Console . WriteLine ( "\n ------------------------------------" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n ------------------------------------" ) ; 
  Test class definition:          : Console . WriteLine ( "\n ------------------------------------" ) ; 
  Test struct definition:         : Console . WriteLine ( "\n ------------------------------------" ) ; 
  executable     : Console . WriteLine ( "\n mother builder creation failed" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n ------------------------------------" ) ; 
  Test control definition:        : Console . WriteLine ( "\n ------------------------------------" ) ; 
  Test C# declaration:            : Console . WriteLine ( "\n ------------------------------------" ) ; 
  Test C# executable:             : Console . WriteLine ( "\n ------------------------------------" ) ; 
  executable     : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Handle C# executable:           : Console . WriteLine ( "\n ------------------------------------" ) ; 
--- stack size = 5 ---
  Test begin scope                : Console . WriteLine ( "\n mother builder creation failed" ) ; 
--- stack size = 4 ---
  Test end scope                  : Console . WriteLine ( "\n mother builder creation failed" ) ; 
--- stack size = 3 ---
  Test preproc statement:         : Console . WriteLine ( "\n mother builder creation failed" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n mother builder creation failed" ) ; 
  Test class definition:          : Console . WriteLine ( "\n mother builder creation failed" ) ; 
  Test struct definition:         : Console . WriteLine ( "\n mother builder creation failed" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n mother builder creation failed" ) ; 
  Test control definition:        : Console . WriteLine ( "\n mother builder creation failed" ) ; 
  Test C# declaration:            : Console . WriteLine ( "\n mother builder creation failed" ) ; 
  Test C# executable:             : Console . WriteLine ( "\n mother builder creation failed" ) ; 
  Handle C# executable:           : Console . WriteLine ( "\n mother builder creation failed" ) ; 
  Test begin scope                : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Test end scope                  : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Test preproc statement:         : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Test class definition:          : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Test struct definition:         : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Test control definition:        : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Test C# declaration:            : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Test C# executable:             : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Handle C# executable:           : Console . WriteLine ( "\n -----------------------------------" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void InitiateComponents ( object sender , RoutedEventArgs e ) { 
  handle begin scope              : private void InitiateComponents ( object sender , RoutedEventArgs e ) { 
--- stack size = 4 ---
  Test end scope                  : private void InitiateComponents ( object sender , RoutedEventArgs e ) { 
  Test preproc statement:         : private void InitiateComponents ( object sender , RoutedEventArgs e ) { 
  function def   : private void InitiateComponents ( object sender , RoutedEventArgs e ) { 
  Test namespace definition:      : private void InitiateComponents ( object sender , RoutedEventArgs e ) { 
  Test class definition:          : private void InitiateComponents ( object sender , RoutedEventArgs e ) { 
  Test struct definition:         : private void InitiateComponents ( object sender , RoutedEventArgs e ) { 
  Test C# function definition:    : private void InitiateComponents ( object sender , RoutedEventArgs e ) { 
  Handle C# function definition:  : private void InitiateComponents ( object sender , RoutedEventArgs e ) { 
  Test begin scope                : if ( buildcheck == 0 ) { 
  handle begin scope              : if ( buildcheck == 0 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( buildcheck == 0 ) { 
  Test preproc statement:         : if ( buildcheck == 0 ) { 
  Test namespace definition:      : if ( buildcheck == 0 ) { 
  control def    : if ( buildcheck == 0 ) { 
  Test class definition:          : if ( buildcheck == 0 ) { 
  Test struct definition:         : if ( buildcheck == 0 ) { 
  Test C# function definition:    : if ( buildcheck == 0 ) { 
  Test control definition:        : if ( buildcheck == 0 ) { 
  Handle control definition:      : if ( buildcheck == 0 ) { 
  Test begin scope                : try { 
  handle begin scope              : try { 
--- stack size = 6 ---
  Test end scope                  : try { 
  Test preproc statement:         : try { 
  Test namespace definition:      : try { 
  control def    : try { 
  Test class definition:          : try { 
  Test struct definition:         : try { 
  Test C# function definition:    : try { 
  Test control definition:        : try { 
  Handle control definition:      : try { 
  Test begin scope                : proc = Int32 . Parse ( process . Text ) ; 
  Test end scope                  : proc = Int32 . Parse ( process . Text ) ; 
  Test preproc statement:         : proc = Int32 . Parse ( process . Text ) ; 
  Test namespace definition:      : proc = Int32 . Parse ( process . Text ) ; 
  Test class definition:          : proc = Int32 . Parse ( process . Text ) ; 
  executable     : proc = Int32 . Parse ( process . Text ) ; 
  Test struct definition:         : proc = Int32 . Parse ( process . Text ) ; 
--- stack size = 5 ---
  Test C# function definition:    : proc = Int32 . Parse ( process . Text ) ; 
  Test control definition:        : proc = Int32 . Parse ( process . Text ) ; 
  Test C# declaration:            : proc = Int32 . Parse ( process . Text ) ; 
  Test C# executable:             : proc = Int32 . Parse ( process . Text ) ; 
  Handle C# executable:           : proc = Int32 . Parse ( process . Text ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : catch ( Exception Ex ) { 
  handle begin scope              : catch ( Exception Ex ) { 
--- stack size = 6 ---
  Test end scope                  : catch ( Exception Ex ) { 
  Test preproc statement:         : catch ( Exception Ex ) { 
  control def    : catch ( Exception Ex ) { 
  Test namespace definition:      : catch ( Exception Ex ) { 
  Test class definition:          : catch ( Exception Ex ) { 
  Test struct definition:         : catch ( Exception Ex ) { 
  Test C# function definition:    : catch ( Exception Ex ) { 
  Test control definition:        : catch ( Exception Ex ) { 
  Handle control definition:      : catch ( Exception Ex ) { 
  Test begin scope                : MessageBox . Show ( String . Format ( Ex . Message ) ) ; 
  Test end scope                  : MessageBox . Show ( String . Format ( Ex . Message ) ) ; 
  Test preproc statement:         : MessageBox . Show ( String . Format ( Ex . Message ) ) ; 
  Test namespace definition:      : MessageBox . Show ( String . Format ( Ex . Message ) ) ; 
  Test class definition:          : MessageBox . Show ( String . Format ( Ex . Message ) ) ; 
  executable     : MessageBox . Show ( String . Format ( Ex . Message ) ) ; 
  Test struct definition:         : MessageBox . Show ( String . Format ( Ex . Message ) ) ; 
--- stack size = 5 ---
  Test C# function definition:    : MessageBox . Show ( String . Format ( Ex . Message ) ) ; 
  Test control definition:        : MessageBox . Show ( String . Format ( Ex . Message ) ) ; 
  Test C# declaration:            : MessageBox . Show ( String . Format ( Ex . Message ) ) ; 
  Test C# executable:             : MessageBox . Show ( String . Format ( Ex . Message ) ) ; 
  Handle C# executable:           : MessageBox . Show ( String . Format ( Ex . Message ) ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : if ( proc > 0 ) { 
  handle begin scope              : if ( proc > 0 ) { 
--- stack size = 6 ---
  Test end scope                  : if ( proc > 0 ) { 
  Test preproc statement:         : if ( proc > 0 ) { 
  Test namespace definition:      : if ( proc > 0 ) { 
  control def    : if ( proc > 0 ) { 
  Test class definition:          : if ( proc > 0 ) { 
  Test struct definition:         : if ( proc > 0 ) { 
  Test C# function definition:    : if ( proc > 0 ) { 
  Test control definition:        : if ( proc > 0 ) { 
  Handle control definition:      : if ( proc > 0 ) { 
  Test begin scope                : createChildMessage ( proc ) ; 
  executable     : createChildMessage ( proc ) ; 
  Test end scope                  : createChildMessage ( proc ) ; 
--- stack size = 5 ---
  Test preproc statement:         : createChildMessage ( proc ) ; 
  Test namespace definition:      : createChildMessage ( proc ) ; 
  Test class definition:          : createChildMessage ( proc ) ; 
  Test struct definition:         : createChildMessage ( proc ) ; 
  Test C# function definition:    : createChildMessage ( proc ) ; 
  Test control definition:        : createChildMessage ( proc ) ; 
  Test C# declaration:            : createChildMessage ( proc ) ; 
  Test C# executable:             : createChildMessage ( proc ) ; 
  Handle C# executable:           : createChildMessage ( proc ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 6 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : 
    MessageBox . Show ( String . Format ( "Please enter valid number of process" ) ) ; 
  Test end scope                  : 
    MessageBox . Show ( String . Format ( "Please enter valid number of process" ) ) ; 
  Test preproc statement:         : 
    MessageBox . Show ( String . Format ( "Please enter valid number of process" ) ) ; 
  executable     : 
    MessageBox . Show ( String . Format ( "Please enter valid number of process" ) ) ; 
  Test namespace definition:      : 
    MessageBox . Show ( String . Format ( "Please enter valid number of process" ) ) ; 
--- stack size = 5 ---
  Test class definition:          : 
    MessageBox . Show ( String . Format ( "Please enter valid number of process" ) ) ; 
--- stack size = 4 ---
  Test struct definition:         : 
    MessageBox . Show ( String . Format ( "Please enter valid number of process" ) ) ; 
  Test C# function definition:    : 
    MessageBox . Show ( String . Format ( "Please enter valid number of process" ) ) ; 
  Test control definition:        : 
    MessageBox . Show ( String . Format ( "Please enter valid number of process" ) ) ; 
  Test C# declaration:            : 
    MessageBox . Show ( String . Format ( "Please enter valid number of process" ) ) ; 
  Test C# executable:             : 
    MessageBox . Show ( String . Format ( "Please enter valid number of process" ) ) ; 
  Handle C# executable:           : 
    MessageBox . Show ( String . Format ( "Please enter valid number of process" ) ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : 
    MessageBox . Show ( String . Format ( "Please kill the process before building again!!" ) ) ; 
  Test end scope                  : 
    MessageBox . Show ( String . Format ( "Please kill the process before building again!!" ) ) ; 
  Test preproc statement:         : 
    MessageBox . Show ( String . Format ( "Please kill the process before building again!!" ) ) ; 
  Test namespace definition:      : 
    MessageBox . Show ( String . Format ( "Please kill the process before building again!!" ) ) ; 
  executable     : 
    MessageBox . Show ( String . Format ( "Please kill the process before building again!!" ) ) ; 
  Test class definition:          : 
    MessageBox . Show ( String . Format ( "Please kill the process before building again!!" ) ) ; 
--- stack size = 4 ---
  Test struct definition:         : 
    MessageBox . Show ( String . Format ( "Please kill the process before building again!!" ) ) ; 
--- stack size = 3 ---
  Test C# function definition:    : 
    MessageBox . Show ( String . Format ( "Please kill the process before building again!!" ) ) ; 
  Test control definition:        : 
    MessageBox . Show ( String . Format ( "Please kill the process before building again!!" ) ) ; 
  Test C# declaration:            : 
    MessageBox . Show ( String . Format ( "Please kill the process before building again!!" ) ) ; 
  Test C# executable:             : 
    MessageBox . Show ( String . Format ( "Please kill the process before building again!!" ) ) ; 
  Handle C# executable:           : 
    MessageBox . Show ( String . Format ( "Please kill the process before building again!!" ) ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void createChildMessage ( int proc ) { 
  handle begin scope              : private void createChildMessage ( int proc ) { 
--- stack size = 4 ---
  Test end scope                  : private void createChildMessage ( int proc ) { 
  Test preproc statement:         : private void createChildMessage ( int proc ) { 
  Test namespace definition:      : private void createChildMessage ( int proc ) { 
  function def   : private void createChildMessage ( int proc ) { 
  Test class definition:          : private void createChildMessage ( int proc ) { 
  Test struct definition:         : private void createChildMessage ( int proc ) { 
  Test C# function definition:    : private void createChildMessage ( int proc ) { 
  Handle C# function definition:  : private void createChildMessage ( int proc ) { 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . command = "childno" ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . to = ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test begin scope                : sndMsg . command = "childno" ; 
  executable     : sndMsg . from = ; 
  Test end scope                  : sndMsg . command = "childno" ; 
  Test preproc statement:         : sndMsg . command = "childno" ; 
  Test namespace definition:      : sndMsg . command = "childno" ; 
  Test class definition:          : sndMsg . command = "childno" ; 
  Test struct definition:         : sndMsg . command = "childno" ; 
  Test C# function definition:    : sndMsg . command = "childno" ; 
  Test control definition:        : sndMsg . command = "childno" ; 
  executable     : sndMsg . body = proc . ToString ( ) ; 
  Test C# declaration:            : sndMsg . command = "childno" ; 
  Test C# executable:             : sndMsg . command = "childno" ; 
  Handle C# executable:           : sndMsg . command = "childno" ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : sndMsg . port = 8074 ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : buildcheck = 1 ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
--- stack size = 3 ---
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = ; 
  Test end scope                  : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . to = ; 
  Test class definition:          : sndMsg . to = ; 
  Test struct definition:         : sndMsg . to = ; 
  Test C# function definition:    : sndMsg . to = ; 
  Test control definition:        : sndMsg . to = ; 
  Test C# declaration:            : sndMsg . to = ; 
  Test C# executable:             : sndMsg . to = ; 
  Handle C# executable:           : sndMsg . to = ; 
  Test begin scope                : sndMsg . from = ; 
  Test end scope                  : sndMsg . from = ; 
  Test preproc statement:         : sndMsg . from = ; 
  Test namespace definition:      : sndMsg . from = ; 
  Test class definition:          : sndMsg . from = ; 
  Test struct definition:         : sndMsg . from = ; 
  Test C# function definition:    : sndMsg . from = ; 
  Test control definition:        : sndMsg . from = ; 
  Test C# declaration:            : sndMsg . from = ; 
  Test C# executable:             : sndMsg . from = ; 
  Handle C# executable:           : sndMsg . from = ; 
  Test begin scope                : sndMsg . body = proc . ToString ( ) ; 
  Test end scope                  : sndMsg . body = proc . ToString ( ) ; 
  Test preproc statement:         : sndMsg . body = proc . ToString ( ) ; 
  Test namespace definition:      : sndMsg . body = proc . ToString ( ) ; 
  Test class definition:          : sndMsg . body = proc . ToString ( ) ; 
  Test struct definition:         : sndMsg . body = proc . ToString ( ) ; 
  Test C# function definition:    : sndMsg . body = proc . ToString ( ) ; 
  Test control definition:        : sndMsg . body = proc . ToString ( ) ; 
  Test C# declaration:            : sndMsg . body = proc . ToString ( ) ; 
  Test C# executable:             : sndMsg . body = proc . ToString ( ) ; 
  Handle C# executable:           : sndMsg . body = proc . ToString ( ) ; 
  Test begin scope                : sndMsg . port = 8074 ; 
  Test end scope                  : sndMsg . port = 8074 ; 
  Test preproc statement:         : sndMsg . port = 8074 ; 
  Test namespace definition:      : sndMsg . port = 8074 ; 
  Test class definition:          : sndMsg . port = 8074 ; 
  Test struct definition:         : sndMsg . port = 8074 ; 
  Test C# function definition:    : sndMsg . port = 8074 ; 
  Test control definition:        : sndMsg . port = 8074 ; 
  Test C# declaration:            : sndMsg . port = 8074 ; 
  Test C# executable:             : sndMsg . port = 8074 ; 
  Handle C# executable:           : sndMsg . port = 8074 ; 
  Test begin scope                : buildcheck = 1 ; 
  Test end scope                  : buildcheck = 1 ; 
  Test preproc statement:         : buildcheck = 1 ; 
  Test namespace definition:      : buildcheck = 1 ; 
  Test class definition:          : buildcheck = 1 ; 
  Test struct definition:         : buildcheck = 1 ; 
  Test C# function definition:    : buildcheck = 1 ; 
  Test control definition:        : buildcheck = 1 ; 
  Test C# declaration:            : buildcheck = 1 ; 
  Test C# executable:             : buildcheck = 1 ; 
  Handle C# executable:           : buildcheck = 1 ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void ProcessExisting ( object sender , RoutedEventArgs e ) { 
  handle begin scope              : private void ProcessExisting ( object sender , RoutedEventArgs e ) { 
--- stack size = 4 ---
  Test end scope                  : private void ProcessExisting ( object sender , RoutedEventArgs e ) { 
  Test preproc statement:         : private void ProcessExisting ( object sender , RoutedEventArgs e ) { 
  function def   : private void ProcessExisting ( object sender , RoutedEventArgs e ) { 
  Test namespace definition:      : private void ProcessExisting ( object sender , RoutedEventArgs e ) { 
  Test class definition:          : private void ProcessExisting ( object sender , RoutedEventArgs e ) { 
  Test struct definition:         : private void ProcessExisting ( object sender , RoutedEventArgs e ) { 
  Test C# function definition:    : private void ProcessExisting ( object sender , RoutedEventArgs e ) { 
  Handle C# function definition:  : private void ProcessExisting ( object sender , RoutedEventArgs e ) { 
  Test begin scope                : if ( buildcheck == 0 ) { 
  handle begin scope              : if ( buildcheck == 0 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( buildcheck == 0 ) { 
  Test preproc statement:         : if ( buildcheck == 0 ) { 
  Test namespace definition:      : if ( buildcheck == 0 ) { 
  control def    : if ( buildcheck == 0 ) { 
  Test class definition:          : if ( buildcheck == 0 ) { 
  Test struct definition:         : if ( buildcheck == 0 ) { 
  Test C# function definition:    : if ( buildcheck == 0 ) { 
  Test control definition:        : if ( buildcheck == 0 ) { 
  Handle control definition:      : if ( buildcheck == 0 ) { 
  Test begin scope                : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  Test end scope                  : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  Test preproc statement:         : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  executable     : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  Test namespace definition:      : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
--- stack size = 4 ---
  Test class definition:          : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  Test struct definition:         : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  Test C# function definition:    : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  Test control definition:        : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  Test C# declaration:            : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  Test C# executable:             : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  Handle C# executable:           : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  control def    : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : String filenames = "" ; 
  Test end scope                  : String filenames = "" ; 
  Test preproc statement:         : String filenames = "" ; 
  Test namespace definition:      : String filenames = "" ; 
  Test class definition:          : String filenames = "" ; 
  Test struct definition:         : String filenames = "" ; 
  Test C# function definition:    : String filenames = "" ; 
  Test control definition:        : String filenames = "" ; 
  data declar    : String filenames = "" ; 
  Test C# declaration:            : String filenames = "" ; 
  Handle C# declaration:          : String filenames = "" ; 
  Test begin scope                : if ( repoXml . SelectedItems . Count != 0 ) { 
  handle begin scope              : if ( repoXml . SelectedItems . Count != 0 ) { 
--- stack size = 6 ---
  Test end scope                  : if ( repoXml . SelectedItems . Count != 0 ) { 
  Test preproc statement:         : if ( repoXml . SelectedItems . Count != 0 ) { 
  Test namespace definition:      : if ( repoXml . SelectedItems . Count != 0 ) { 
  Test class definition:          : if ( repoXml . SelectedItems . Count != 0 ) { 
  control def    : if ( repoXml . SelectedItems . Count != 0 ) { 
  Test struct definition:         : if ( repoXml . SelectedItems . Count != 0 ) { 
  Test C# function definition:    : if ( repoXml . SelectedItems . Count != 0 ) { 
  Test control definition:        : if ( repoXml . SelectedItems . Count != 0 ) { 
  Handle control definition:      : if ( repoXml . SelectedItems . Count != 0 ) { 
  Test begin scope                : foreach ( var str in repoXml . SelectedItems ) { 
  handle begin scope              : foreach ( var str in repoXml . SelectedItems ) { 
--- stack size = 7 ---
  Test end scope                  : foreach ( var str in repoXml . SelectedItems ) { 
  Test preproc statement:         : foreach ( var str in repoXml . SelectedItems ) { 
  control def    : foreach ( var str in repoXml . SelectedItems ) { 
  Test namespace definition:      : foreach ( var str in repoXml . SelectedItems ) { 
  Test class definition:          : foreach ( var str in repoXml . SelectedItems ) { 
  Test struct definition:         : foreach ( var str in repoXml . SelectedItems ) { 
  Test C# function definition:    : foreach ( var str in repoXml . SelectedItems ) { 
  Test control definition:        : foreach ( var str in repoXml . SelectedItems ) { 
  Handle control definition:      : foreach ( var str in repoXml . SelectedItems ) { 
  Test begin scope                : filenames = filenames + str . ToString ( ) + " " ; 
  Test end scope                  : filenames = filenames + str . ToString ( ) + " " ; 
  Test preproc statement:         : filenames = filenames + str . ToString ( ) + " " ; 
  Test namespace definition:      : filenames = filenames + str . ToString ( ) + " " ; 
  function declar: filenames = filenames + str . ToString ( ) + " " ; 
  Test class definition:          : filenames = filenames + str . ToString ( ) + " " ; 
  Test struct definition:         : filenames = filenames + str . ToString ( ) + " " ; 
--- stack size = 6 ---
  Test C# function definition:    : filenames = filenames + str . ToString ( ) + " " ; 
  Test control definition:        : filenames = filenames + str . ToString ( ) + " " ; 
  Test C# declaration:            : filenames = filenames + str . ToString ( ) + " " ; 
  Handle C# declaration:          : filenames = filenames + str . ToString ( ) + " " ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : sendTestRequestToBuild ( filenames ) ; 
  Test end scope                  : sendTestRequestToBuild ( filenames ) ; 
  executable     : sendTestRequestToBuild ( filenames ) ; 
  Test preproc statement:         : sendTestRequestToBuild ( filenames ) ; 
--- stack size = 5 ---
  Test namespace definition:      : sendTestRequestToBuild ( filenames ) ; 
  Test class definition:          : sendTestRequestToBuild ( filenames ) ; 
  Test struct definition:         : sendTestRequestToBuild ( filenames ) ; 
  Test C# function definition:    : sendTestRequestToBuild ( filenames ) ; 
  Test control definition:        : sendTestRequestToBuild ( filenames ) ; 
  Test C# declaration:            : sendTestRequestToBuild ( filenames ) ; 
  Test C# executable:             : sendTestRequestToBuild ( filenames ) ; 
  Handle C# executable:           : sendTestRequestToBuild ( filenames ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 6 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : MessageBox . Show ( "Please select requests for processing" ) ; 
  Test end scope                  : MessageBox . Show ( "Please select requests for processing" ) ; 
  Test preproc statement:         : MessageBox . Show ( "Please select requests for processing" ) ; 
  Test namespace definition:      : MessageBox . Show ( "Please select requests for processing" ) ; 
  executable     : MessageBox . Show ( "Please select requests for processing" ) ; 
  Test class definition:          : MessageBox . Show ( "Please select requests for processing" ) ; 
--- stack size = 5 ---
  Test struct definition:         : MessageBox . Show ( "Please select requests for processing" ) ; 
--- stack size = 4 ---
  Test C# function definition:    : MessageBox . Show ( "Please select requests for processing" ) ; 
--- stack size = 3 ---
  Test control definition:        : MessageBox . Show ( "Please select requests for processing" ) ; 
  Test C# declaration:            : MessageBox . Show ( "Please select requests for processing" ) ; 
  Test C# executable:             : MessageBox . Show ( "Please select requests for processing" ) ; 
  Handle C# executable:           : MessageBox . Show ( "Please select requests for processing" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void processRequest ( object sender , RoutedEventArgs e ) { 
  handle begin scope              : private void processRequest ( object sender , RoutedEventArgs e ) { 
--- stack size = 4 ---
  Test end scope                  : private void processRequest ( object sender , RoutedEventArgs e ) { 
  Test preproc statement:         : private void processRequest ( object sender , RoutedEventArgs e ) { 
  Test namespace definition:      : private void processRequest ( object sender , RoutedEventArgs e ) { 
  function def   : private void processRequest ( object sender , RoutedEventArgs e ) { 
  Test class definition:          : private void processRequest ( object sender , RoutedEventArgs e ) { 
  Test struct definition:         : private void processRequest ( object sender , RoutedEventArgs e ) { 
  Test C# function definition:    : private void processRequest ( object sender , RoutedEventArgs e ) { 
  Handle C# function definition:  : private void processRequest ( object sender , RoutedEventArgs e ) { 
  Test begin scope                : if ( buildcheck == 0 ) { 
  handle begin scope              : if ( buildcheck == 0 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( buildcheck == 0 ) { 
  Test preproc statement:         : if ( buildcheck == 0 ) { 
  Test namespace definition:      : if ( buildcheck == 0 ) { 
  control def    : if ( buildcheck == 0 ) { 
  Test class definition:          : if ( buildcheck == 0 ) { 
  Test struct definition:         : if ( buildcheck == 0 ) { 
  Test C# function definition:    : if ( buildcheck == 0 ) { 
  Test control definition:        : if ( buildcheck == 0 ) { 
  Handle control definition:      : if ( buildcheck == 0 ) { 
  Test begin scope                : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  Test end scope                  : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  Test preproc statement:         : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  executable     : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  Test namespace definition:      : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
--- stack size = 4 ---
  Test class definition:          : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  Test struct definition:         : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  Test C# function definition:    : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  Test control definition:        : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  Test C# declaration:            : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  Test C# executable:             : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  Handle C# executable:           : 
    MessageBox . Show ( String . Format ( "Please initiate the builder component to process the request!!" ) ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  data declar    : String filenames = "" ; 
  Test begin scope                : String filenames = "" ; 
  Test end scope                  : String filenames = "" ; 
  Test preproc statement:         : String filenames = "" ; 
  Test namespace definition:      : String filenames = "" ; 
  Test class definition:          : String filenames = "" ; 
  Test struct definition:         : String filenames = "" ; 
  Test C# function definition:    : String filenames = "" ; 
  Test control definition:        : String filenames = "" ; 
  Test C# declaration:            : String filenames = "" ; 
  Handle C# declaration:          : String filenames = "" ; 
  Test begin scope                : if ( request . SelectedItems . Count != 0 ) { 
  handle begin scope              : if ( request . SelectedItems . Count != 0 ) { 
--- stack size = 6 ---
  Test end scope                  : if ( request . SelectedItems . Count != 0 ) { 
  Test preproc statement:         : if ( request . SelectedItems . Count != 0 ) { 
  Test namespace definition:      : if ( request . SelectedItems . Count != 0 ) { 
  control def    : if ( request . SelectedItems . Count != 0 ) { 
  Test class definition:          : if ( request . SelectedItems . Count != 0 ) { 
  Test struct definition:         : if ( request . SelectedItems . Count != 0 ) { 
  Test C# function definition:    : if ( request . SelectedItems . Count != 0 ) { 
  Test control definition:        : if ( request . SelectedItems . Count != 0 ) { 
  Handle control definition:      : if ( request . SelectedItems . Count != 0 ) { 
  Test begin scope                : foreach ( var str in request . SelectedItems ) { 
  handle begin scope              : foreach ( var str in request . SelectedItems ) { 
--- stack size = 7 ---
  Test end scope                  : foreach ( var str in request . SelectedItems ) { 
  Test preproc statement:         : foreach ( var str in request . SelectedItems ) { 
  Test namespace definition:      : foreach ( var str in request . SelectedItems ) { 
  control def    : foreach ( var str in request . SelectedItems ) { 
  Test class definition:          : foreach ( var str in request . SelectedItems ) { 
  Test struct definition:         : foreach ( var str in request . SelectedItems ) { 
  Test C# function definition:    : foreach ( var str in request . SelectedItems ) { 
  Test control definition:        : foreach ( var str in request . SelectedItems ) { 
  Handle control definition:      : foreach ( var str in request . SelectedItems ) { 
  Test begin scope                : filenames = filenames + str . ToString ( ) + " " ; 
  Test end scope                  : filenames = filenames + str . ToString ( ) + " " ; 
  Test preproc statement:         : filenames = filenames + str . ToString ( ) + " " ; 
  Test namespace definition:      : filenames = filenames + str . ToString ( ) + " " ; 
  Test class definition:          : filenames = filenames + str . ToString ( ) + " " ; 
  Test struct definition:         : filenames = filenames + str . ToString ( ) + " " ; 
  function declar: filenames = filenames + str . ToString ( ) + " " ; 
  Test C# function definition:    : filenames = filenames + str . ToString ( ) + " " ; 
--- stack size = 6 ---
  Test control definition:        : filenames = filenames + str . ToString ( ) + " " ; 
  Test C# declaration:            : filenames = filenames + str . ToString ( ) + " " ; 
  Handle C# declaration:          : filenames = filenames + str . ToString ( ) + " " ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : sendTestRequestToBuild ( filenames ) ; 
  executable     : sendTestRequestToBuild ( filenames ) ; 
  Test end scope                  : sendTestRequestToBuild ( filenames ) ; 
--- stack size = 5 ---
  Test preproc statement:         : sendTestRequestToBuild ( filenames ) ; 
  Test namespace definition:      : sendTestRequestToBuild ( filenames ) ; 
  Test class definition:          : sendTestRequestToBuild ( filenames ) ; 
  Test struct definition:         : sendTestRequestToBuild ( filenames ) ; 
  Test C# function definition:    : sendTestRequestToBuild ( filenames ) ; 
  Test control definition:        : sendTestRequestToBuild ( filenames ) ; 
  Test C# declaration:            : sendTestRequestToBuild ( filenames ) ; 
  Test C# executable:             : sendTestRequestToBuild ( filenames ) ; 
  Handle C# executable:           : sendTestRequestToBuild ( filenames ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 6 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  control def    : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : MessageBox . Show ( "Please select requests for processing" ) ; 
  Test end scope                  : MessageBox . Show ( "Please select requests for processing" ) ; 
  Test preproc statement:         : MessageBox . Show ( "Please select requests for processing" ) ; 
  executable     : MessageBox . Show ( "Please select requests for processing" ) ; 
  Test namespace definition:      : MessageBox . Show ( "Please select requests for processing" ) ; 
--- stack size = 5 ---
  Test class definition:          : MessageBox . Show ( "Please select requests for processing" ) ; 
--- stack size = 4 ---
  Test struct definition:         : MessageBox . Show ( "Please select requests for processing" ) ; 
--- stack size = 3 ---
  Test C# function definition:    : MessageBox . Show ( "Please select requests for processing" ) ; 
  Test control definition:        : MessageBox . Show ( "Please select requests for processing" ) ; 
  Test C# declaration:            : MessageBox . Show ( "Please select requests for processing" ) ; 
  Test C# executable:             : MessageBox . Show ( "Please select requests for processing" ) ; 
  Handle C# executable:           : MessageBox . Show ( "Please select requests for processing" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void sendTestRequestToBuild ( string body ) { 
  handle begin scope              : private void sendTestRequestToBuild ( string body ) { 
--- stack size = 4 ---
  Test end scope                  : private void sendTestRequestToBuild ( string body ) { 
  Test preproc statement:         : private void sendTestRequestToBuild ( string body ) { 
  Test namespace definition:      : private void sendTestRequestToBuild ( string body ) { 
  function def   : private void sendTestRequestToBuild ( string body ) { 
  Test class definition:          : private void sendTestRequestToBuild ( string body ) { 
  Test struct definition:         : private void sendTestRequestToBuild ( string body ) { 
  Test C# function definition:    : private void sendTestRequestToBuild ( string body ) { 
  Handle C# function definition:  : private void sendTestRequestToBuild ( string body ) { 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . command = "xmlfilenames" ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . to = ; 
  Test begin scope                : sndMsg . command = "xmlfilenames" ; 
  Test end scope                  : sndMsg . command = "xmlfilenames" ; 
  Test preproc statement:         : sndMsg . command = "xmlfilenames" ; 
  Test namespace definition:      : sndMsg . command = "xmlfilenames" ; 
  executable     : sndMsg . from = ; 
  Test class definition:          : sndMsg . command = "xmlfilenames" ; 
  Test struct definition:         : sndMsg . command = "xmlfilenames" ; 
  Test C# function definition:    : sndMsg . command = "xmlfilenames" ; 
  Test control definition:        : sndMsg . command = "xmlfilenames" ; 
  executable     : sndMsg . body = body ; 
  Test C# declaration:            : sndMsg . command = "xmlfilenames" ; 
  Test C# executable:             : sndMsg . command = "xmlfilenames" ; 
  Handle C# executable:           : sndMsg . command = "xmlfilenames" ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : sndMsg . port = 8074 ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
--- stack size = 3 ---
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = ; 
  Test end scope                  : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . to = ; 
  Test class definition:          : sndMsg . to = ; 
  Test struct definition:         : sndMsg . to = ; 
  Test C# function definition:    : sndMsg . to = ; 
  Test control definition:        : sndMsg . to = ; 
  Test C# declaration:            : sndMsg . to = ; 
  Test C# executable:             : sndMsg . to = ; 
  Handle C# executable:           : sndMsg . to = ; 
  Test begin scope                : sndMsg . from = ; 
  Test end scope                  : sndMsg . from = ; 
  Test preproc statement:         : sndMsg . from = ; 
  Test namespace definition:      : sndMsg . from = ; 
  Test class definition:          : sndMsg . from = ; 
  Test struct definition:         : sndMsg . from = ; 
  Test C# function definition:    : sndMsg . from = ; 
  Test control definition:        : sndMsg . from = ; 
  Test C# declaration:            : sndMsg . from = ; 
  Test C# executable:             : sndMsg . from = ; 
  Handle C# executable:           : sndMsg . from = ; 
  Test begin scope                : sndMsg . body = body ; 
  Test end scope                  : sndMsg . body = body ; 
  Test preproc statement:         : sndMsg . body = body ; 
  Test namespace definition:      : sndMsg . body = body ; 
  Test class definition:          : sndMsg . body = body ; 
  Test struct definition:         : sndMsg . body = body ; 
  Test C# function definition:    : sndMsg . body = body ; 
  Test control definition:        : sndMsg . body = body ; 
  Test C# declaration:            : sndMsg . body = body ; 
  Test C# executable:             : sndMsg . body = body ; 
  Handle C# executable:           : sndMsg . body = body ; 
  Test begin scope                : sndMsg . port = 8074 ; 
  Test end scope                  : sndMsg . port = 8074 ; 
  Test preproc statement:         : sndMsg . port = 8074 ; 
  Test namespace definition:      : sndMsg . port = 8074 ; 
  Test class definition:          : sndMsg . port = 8074 ; 
  Test struct definition:         : sndMsg . port = 8074 ; 
  Test C# function definition:    : sndMsg . port = 8074 ; 
  Test control definition:        : sndMsg . port = 8074 ; 
  Test C# declaration:            : sndMsg . port = 8074 ; 
  Test C# executable:             : sndMsg . port = 8074 ; 
  Handle C# executable:           : sndMsg . port = 8074 ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void Repo_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  handle begin scope              : private void Repo_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
--- stack size = 4 ---
  Test end scope                  : private void Repo_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  Test preproc statement:         : private void Repo_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  function def   : private void Repo_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  Test namespace definition:      : private void Repo_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  Test class definition:          : private void Repo_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  Test struct definition:         : private void Repo_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  data declar    : string fileName = repo . SelectedValue as string ; 
  Test C# function definition:    : private void Repo_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  Handle C# function definition:  : private void Repo_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  Test begin scope                : string fileName = repo . SelectedValue as string ; 
  Test end scope                  : string fileName = repo . SelectedValue as string ; 
  executable     : Console . WriteLine ( "filename----" + repo . SelectedValue ) ; 
  Test preproc statement:         : string fileName = repo . SelectedValue as string ; 
  Test namespace definition:      : string fileName = repo . SelectedValue as string ; 
  Test class definition:          : string fileName = repo . SelectedValue as string ; 
  Test struct definition:         : string fileName = repo . SelectedValue as string ; 
  executable     : Console . WriteLine ( "filename----" + fileName ) ; 
  Test C# function definition:    : string fileName = repo . SelectedValue as string ; 
  Test control definition:        : string fileName = repo . SelectedValue as string ; 
  Test C# declaration:            : string fileName = repo . SelectedValue as string ; 
  executable     : sendContentRequest ( fileName ) ; 
  Handle C# declaration:          : string fileName = repo . SelectedValue as string ; 
--- stack size = 3 ---
  Test begin scope                : Console . WriteLine ( "filename----" + repo . SelectedValue ) ; 
  Test end scope                  : Console . WriteLine ( "filename----" + repo . SelectedValue ) ; 
  Test preproc statement:         : Console . WriteLine ( "filename----" + repo . SelectedValue ) ; 
  Test namespace definition:      : Console . WriteLine ( "filename----" + repo . SelectedValue ) ; 
  Test class definition:          : Console . WriteLine ( "filename----" + repo . SelectedValue ) ; 
  Test struct definition:         : Console . WriteLine ( "filename----" + repo . SelectedValue ) ; 
  Test C# function definition:    : Console . WriteLine ( "filename----" + repo . SelectedValue ) ; 
  Test control definition:        : Console . WriteLine ( "filename----" + repo . SelectedValue ) ; 
  Test C# declaration:            : Console . WriteLine ( "filename----" + repo . SelectedValue ) ; 
  Test C# executable:             : Console . WriteLine ( "filename----" + repo . SelectedValue ) ; 
  Handle C# executable:           : Console . WriteLine ( "filename----" + repo . SelectedValue ) ; 
  Test begin scope                : Console . WriteLine ( "filename----" + fileName ) ; 
  Test end scope                  : Console . WriteLine ( "filename----" + fileName ) ; 
  Test preproc statement:         : Console . WriteLine ( "filename----" + fileName ) ; 
  Test namespace definition:      : Console . WriteLine ( "filename----" + fileName ) ; 
  Test class definition:          : Console . WriteLine ( "filename----" + fileName ) ; 
  Test struct definition:         : Console . WriteLine ( "filename----" + fileName ) ; 
  Test C# function definition:    : Console . WriteLine ( "filename----" + fileName ) ; 
  Test control definition:        : Console . WriteLine ( "filename----" + fileName ) ; 
  Test C# declaration:            : Console . WriteLine ( "filename----" + fileName ) ; 
  Test C# executable:             : Console . WriteLine ( "filename----" + fileName ) ; 
  Handle C# executable:           : Console . WriteLine ( "filename----" + fileName ) ; 
  Test begin scope                : sendContentRequest ( fileName ) ; 
  Test end scope                  : sendContentRequest ( fileName ) ; 
  Test preproc statement:         : sendContentRequest ( fileName ) ; 
  Test namespace definition:      : sendContentRequest ( fileName ) ; 
  Test class definition:          : sendContentRequest ( fileName ) ; 
  Test struct definition:         : sendContentRequest ( fileName ) ; 
  Test C# function definition:    : sendContentRequest ( fileName ) ; 
  Test control definition:        : sendContentRequest ( fileName ) ; 
  Test C# declaration:            : sendContentRequest ( fileName ) ; 
  Test C# executable:             : sendContentRequest ( fileName ) ; 
  Handle C# executable:           : sendContentRequest ( fileName ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    private void NewReq_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  handle begin scope              : 
    private void NewReq_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
--- stack size = 4 ---
  Test end scope                  : 
    private void NewReq_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  Test preproc statement:         : 
    private void NewReq_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  function def   : 
    private void NewReq_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  Test namespace definition:      : 
    private void NewReq_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  Test class definition:          : 
    private void NewReq_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  Test struct definition:         : 
    private void NewReq_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  data declar    : string fileName = request . SelectedValue as string ; 
  Test C# function definition:    : 
    private void NewReq_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  Handle C# function definition:  : 
    private void NewReq_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  executable     : sendContentRequest ( fileName ) ; 
  Test begin scope                : string fileName = request . SelectedValue as string ; 
--- stack size = 3 ---
  Test end scope                  : string fileName = request . SelectedValue as string ; 
  Test preproc statement:         : string fileName = request . SelectedValue as string ; 
  Test namespace definition:      : string fileName = request . SelectedValue as string ; 
  Test class definition:          : string fileName = request . SelectedValue as string ; 
  Test struct definition:         : string fileName = request . SelectedValue as string ; 
  Test C# function definition:    : string fileName = request . SelectedValue as string ; 
  Test control definition:        : string fileName = request . SelectedValue as string ; 
  Test C# declaration:            : string fileName = request . SelectedValue as string ; 
  Handle C# declaration:          : string fileName = request . SelectedValue as string ; 
  Test begin scope                : sendContentRequest ( fileName ) ; 
  Test end scope                  : sendContentRequest ( fileName ) ; 
  Test preproc statement:         : sendContentRequest ( fileName ) ; 
  Test namespace definition:      : sendContentRequest ( fileName ) ; 
  Test class definition:          : sendContentRequest ( fileName ) ; 
  Test struct definition:         : sendContentRequest ( fileName ) ; 
  Test C# function definition:    : sendContentRequest ( fileName ) ; 
  Test control definition:        : sendContentRequest ( fileName ) ; 
  Test C# declaration:            : sendContentRequest ( fileName ) ; 
  Test C# executable:             : sendContentRequest ( fileName ) ; 
  Handle C# executable:           : sendContentRequest ( fileName ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    private void OldReq_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  handle begin scope              : 
    private void OldReq_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
--- stack size = 4 ---
  Test end scope                  : 
    private void OldReq_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  Test preproc statement:         : 
    private void OldReq_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  Test namespace definition:      : 
    private void OldReq_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  function def   : 
    private void OldReq_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  Test class definition:          : 
    private void OldReq_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  Test struct definition:         : 
    private void OldReq_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  Test C# function definition:    : 
    private void OldReq_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  data declar    : string fileName = repoXml . SelectedValue as string ; 
  Handle C# function definition:  : 
    private void OldReq_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { 
  Test begin scope                : string fileName = repoXml . SelectedValue as string ; 
  Test end scope                  : string fileName = repoXml . SelectedValue as string ; 
  Test preproc statement:         : string fileName = repoXml . SelectedValue as string ; 
  executable     : sendContentRequest ( fileName ) ; 
  Test namespace definition:      : string fileName = repoXml . SelectedValue as string ; 
--- stack size = 3 ---
  Test class definition:          : string fileName = repoXml . SelectedValue as string ; 
  Test struct definition:         : string fileName = repoXml . SelectedValue as string ; 
  Test C# function definition:    : string fileName = repoXml . SelectedValue as string ; 
  Test control definition:        : string fileName = repoXml . SelectedValue as string ; 
  Test C# declaration:            : string fileName = repoXml . SelectedValue as string ; 
  Handle C# declaration:          : string fileName = repoXml . SelectedValue as string ; 
  Test begin scope                : sendContentRequest ( fileName ) ; 
  Test end scope                  : sendContentRequest ( fileName ) ; 
  Test preproc statement:         : sendContentRequest ( fileName ) ; 
  Test namespace definition:      : sendContentRequest ( fileName ) ; 
  Test class definition:          : sendContentRequest ( fileName ) ; 
  Test struct definition:         : sendContentRequest ( fileName ) ; 
  Test C# function definition:    : sendContentRequest ( fileName ) ; 
  Test control definition:        : sendContentRequest ( fileName ) ; 
  Test C# declaration:            : sendContentRequest ( fileName ) ; 
  Test C# executable:             : sendContentRequest ( fileName ) ; 
  Handle C# executable:           : sendContentRequest ( fileName ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void sendContentRequest ( string body ) { 
  handle begin scope              : private void sendContentRequest ( string body ) { 
--- stack size = 4 ---
  Test end scope                  : private void sendContentRequest ( string body ) { 
  Test preproc statement:         : private void sendContentRequest ( string body ) { 
  Test namespace definition:      : private void sendContentRequest ( string body ) { 
  function def   : private void sendContentRequest ( string body ) { 
  Test class definition:          : private void sendContentRequest ( string body ) { 
  Test struct definition:         : private void sendContentRequest ( string body ) { 
  Test C# function definition:    : private void sendContentRequest ( string body ) { 
  Handle C# function definition:  : private void sendContentRequest ( string body ) { 
  Test begin scope                : Console . WriteLine ( "filename----" + body ) ; 
  executable     : Console . WriteLine ( "filename----" + body ) ; 
  Test end scope                  : Console . WriteLine ( "filename----" + body ) ; 
  Test preproc statement:         : Console . WriteLine ( "filename----" + body ) ; 
  Test namespace definition:      : Console . WriteLine ( "filename----" + body ) ; 
  Test class definition:          : Console . WriteLine ( "filename----" + body ) ; 
  Test struct definition:         : Console . WriteLine ( "filename----" + body ) ; 
  Test C# function definition:    : Console . WriteLine ( "filename----" + body ) ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test control definition:        : Console . WriteLine ( "filename----" + body ) ; 
  Test C# declaration:            : Console . WriteLine ( "filename----" + body ) ; 
  Test C# executable:             : Console . WriteLine ( "filename----" + body ) ; 
  executable     : sndMsg . command = "ContentReq" ; 
  Handle C# executable:           : Console . WriteLine ( "filename----" + body ) ; 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . to = ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . from = ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . body = body ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test begin scope                : sndMsg . command = "ContentReq" ; 
  Test end scope                  : sndMsg . command = "ContentReq" ; 
  executable     : sndMsg . port = 8074 ; 
  Test preproc statement:         : sndMsg . command = "ContentReq" ; 
  Test namespace definition:      : sndMsg . command = "ContentReq" ; 
  Test class definition:          : sndMsg . command = "ContentReq" ; 
  Test struct definition:         : sndMsg . command = "ContentReq" ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : sndMsg . command = "ContentReq" ; 
--- stack size = 3 ---
  Test control definition:        : sndMsg . command = "ContentReq" ; 
  Test C# declaration:            : sndMsg . command = "ContentReq" ; 
  Test C# executable:             : sndMsg . command = "ContentReq" ; 
  Handle C# executable:           : sndMsg . command = "ContentReq" ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = ; 
  Test end scope                  : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . to = ; 
  Test class definition:          : sndMsg . to = ; 
  Test struct definition:         : sndMsg . to = ; 
  Test C# function definition:    : sndMsg . to = ; 
  Test control definition:        : sndMsg . to = ; 
  Test C# declaration:            : sndMsg . to = ; 
  Test C# executable:             : sndMsg . to = ; 
  Handle C# executable:           : sndMsg . to = ; 
  Test begin scope                : sndMsg . from = ; 
  Test end scope                  : sndMsg . from = ; 
  Test preproc statement:         : sndMsg . from = ; 
  Test namespace definition:      : sndMsg . from = ; 
  Test class definition:          : sndMsg . from = ; 
  Test struct definition:         : sndMsg . from = ; 
  Test C# function definition:    : sndMsg . from = ; 
  Test control definition:        : sndMsg . from = ; 
  Test C# declaration:            : sndMsg . from = ; 
  Test C# executable:             : sndMsg . from = ; 
  Handle C# executable:           : sndMsg . from = ; 
  Test begin scope                : sndMsg . body = body ; 
  Test end scope                  : sndMsg . body = body ; 
  Test preproc statement:         : sndMsg . body = body ; 
  Test namespace definition:      : sndMsg . body = body ; 
  Test class definition:          : sndMsg . body = body ; 
  Test struct definition:         : sndMsg . body = body ; 
  Test C# function definition:    : sndMsg . body = body ; 
  Test control definition:        : sndMsg . body = body ; 
  Test C# declaration:            : sndMsg . body = body ; 
  Test C# executable:             : sndMsg . body = body ; 
  Handle C# executable:           : sndMsg . body = body ; 
  Test begin scope                : sndMsg . port = 8074 ; 
  Test end scope                  : sndMsg . port = 8074 ; 
  Test preproc statement:         : sndMsg . port = 8074 ; 
  Test namespace definition:      : sndMsg . port = 8074 ; 
  Test class definition:          : sndMsg . port = 8074 ; 
  Test struct definition:         : sndMsg . port = 8074 ; 
  Test C# function definition:    : sndMsg . port = 8074 ; 
  Test control definition:        : sndMsg . port = 8074 ; 
  Test C# declaration:            : sndMsg . port = 8074 ; 
  Test C# executable:             : sndMsg . port = 8074 ; 
  Handle C# executable:           : sndMsg . port = 8074 ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void DeleteNew ( object sender , RoutedEventArgs e ) { 
  handle begin scope              : private void DeleteNew ( object sender , RoutedEventArgs e ) { 
--- stack size = 4 ---
  Test end scope                  : private void DeleteNew ( object sender , RoutedEventArgs e ) { 
  Test preproc statement:         : private void DeleteNew ( object sender , RoutedEventArgs e ) { 
  function def   : private void DeleteNew ( object sender , RoutedEventArgs e ) { 
  Test namespace definition:      : private void DeleteNew ( object sender , RoutedEventArgs e ) { 
  Test class definition:          : private void DeleteNew ( object sender , RoutedEventArgs e ) { 
  Test struct definition:         : private void DeleteNew ( object sender , RoutedEventArgs e ) { 
  Test C# function definition:    : private void DeleteNew ( object sender , RoutedEventArgs e ) { 
  Handle C# function definition:  : private void DeleteNew ( object sender , RoutedEventArgs e ) { 
  Test begin scope                : if ( request . SelectedItems . Count != 0 ) { 
  handle begin scope              : if ( request . SelectedItems . Count != 0 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( request . SelectedItems . Count != 0 ) { 
  Test preproc statement:         : if ( request . SelectedItems . Count != 0 ) { 
  Test namespace definition:      : if ( request . SelectedItems . Count != 0 ) { 
  control def    : if ( request . SelectedItems . Count != 0 ) { 
  Test class definition:          : if ( request . SelectedItems . Count != 0 ) { 
  Test struct definition:         : if ( request . SelectedItems . Count != 0 ) { 
  Test C# function definition:    : if ( request . SelectedItems . Count != 0 ) { 
  Test control definition:        : if ( request . SelectedItems . Count != 0 ) { 
  Handle control definition:      : if ( request . SelectedItems . Count != 0 ) { 
  Test begin scope                : foreach ( var str in request . SelectedItems ) { 
  handle begin scope              : foreach ( var str in request . SelectedItems ) { 
--- stack size = 6 ---
  Test end scope                  : foreach ( var str in request . SelectedItems ) { 
  Test preproc statement:         : foreach ( var str in request . SelectedItems ) { 
  Test namespace definition:      : foreach ( var str in request . SelectedItems ) { 
  control def    : foreach ( var str in request . SelectedItems ) { 
  Test class definition:          : foreach ( var str in request . SelectedItems ) { 
  Test struct definition:         : foreach ( var str in request . SelectedItems ) { 
  Test C# function definition:    : foreach ( var str in request . SelectedItems ) { 
  Test control definition:        : foreach ( var str in request . SelectedItems ) { 
  Handle control definition:      : foreach ( var str in request . SelectedItems ) { 
  Test begin scope                : request . Items . Remove ( str ) ; 
  executable     : request . Items . Remove ( str ) ; 
  Test end scope                  : request . Items . Remove ( str ) ; 
--- stack size = 5 ---
  Test preproc statement:         : request . Items . Remove ( str ) ; 
--- stack size = 4 ---
  Test namespace definition:      : request . Items . Remove ( str ) ; 
  Test class definition:          : request . Items . Remove ( str ) ; 
  Test struct definition:         : request . Items . Remove ( str ) ; 
  Test C# function definition:    : request . Items . Remove ( str ) ; 
  Test control definition:        : request . Items . Remove ( str ) ; 
  Test C# declaration:            : request . Items . Remove ( str ) ; 
  Test C# executable:             : request . Items . Remove ( str ) ; 
  Handle C# executable:           : request . Items . Remove ( str ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : MessageBox . Show ( "Please select requests to Delete!" ) ; 
  Test end scope                  : MessageBox . Show ( "Please select requests to Delete!" ) ; 
  Test preproc statement:         : MessageBox . Show ( "Please select requests to Delete!" ) ; 
  executable     : MessageBox . Show ( "Please select requests to Delete!" ) ; 
  Test namespace definition:      : MessageBox . Show ( "Please select requests to Delete!" ) ; 
--- stack size = 4 ---
  Test class definition:          : MessageBox . Show ( "Please select requests to Delete!" ) ; 
--- stack size = 3 ---
  Test struct definition:         : MessageBox . Show ( "Please select requests to Delete!" ) ; 
  Test C# function definition:    : MessageBox . Show ( "Please select requests to Delete!" ) ; 
  Test control definition:        : MessageBox . Show ( "Please select requests to Delete!" ) ; 
  Test C# declaration:            : MessageBox . Show ( "Please select requests to Delete!" ) ; 
  Test C# executable:             : MessageBox . Show ( "Please select requests to Delete!" ) ; 
  Handle C# executable:           : MessageBox . Show ( "Please select requests to Delete!" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void DeleteExisting ( object sender , RoutedEventArgs e ) { 
  handle begin scope              : private void DeleteExisting ( object sender , RoutedEventArgs e ) { 
--- stack size = 4 ---
  Test end scope                  : private void DeleteExisting ( object sender , RoutedEventArgs e ) { 
  Test preproc statement:         : private void DeleteExisting ( object sender , RoutedEventArgs e ) { 
  function def   : private void DeleteExisting ( object sender , RoutedEventArgs e ) { 
  Test namespace definition:      : private void DeleteExisting ( object sender , RoutedEventArgs e ) { 
  Test class definition:          : private void DeleteExisting ( object sender , RoutedEventArgs e ) { 
  data declar    : String filenames = "" ; 
  Test struct definition:         : private void DeleteExisting ( object sender , RoutedEventArgs e ) { 
  Test C# function definition:    : private void DeleteExisting ( object sender , RoutedEventArgs e ) { 
  Handle C# function definition:  : private void DeleteExisting ( object sender , RoutedEventArgs e ) { 
  Test begin scope                : String filenames = "" ; 
  Test end scope                  : String filenames = "" ; 
  Test preproc statement:         : String filenames = "" ; 
  Test namespace definition:      : String filenames = "" ; 
  Test class definition:          : String filenames = "" ; 
  Test struct definition:         : String filenames = "" ; 
  Test C# function definition:    : String filenames = "" ; 
  Test control definition:        : String filenames = "" ; 
  Test C# declaration:            : String filenames = "" ; 
  Handle C# declaration:          : String filenames = "" ; 
  Test begin scope                : if ( repoXml . SelectedItems . Count != 0 ) { 
  handle begin scope              : if ( repoXml . SelectedItems . Count != 0 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( repoXml . SelectedItems . Count != 0 ) { 
  Test preproc statement:         : if ( repoXml . SelectedItems . Count != 0 ) { 
  Test namespace definition:      : if ( repoXml . SelectedItems . Count != 0 ) { 
  Test class definition:          : if ( repoXml . SelectedItems . Count != 0 ) { 
  control def    : if ( repoXml . SelectedItems . Count != 0 ) { 
  Test struct definition:         : if ( repoXml . SelectedItems . Count != 0 ) { 
  Test C# function definition:    : if ( repoXml . SelectedItems . Count != 0 ) { 
  Test control definition:        : if ( repoXml . SelectedItems . Count != 0 ) { 
  Handle control definition:      : if ( repoXml . SelectedItems . Count != 0 ) { 
  Test begin scope                : foreach ( var str in repoXml . SelectedItems ) { 
  handle begin scope              : foreach ( var str in repoXml . SelectedItems ) { 
--- stack size = 6 ---
  Test end scope                  : foreach ( var str in repoXml . SelectedItems ) { 
  Test preproc statement:         : foreach ( var str in repoXml . SelectedItems ) { 
  Test namespace definition:      : foreach ( var str in repoXml . SelectedItems ) { 
  Test class definition:          : foreach ( var str in repoXml . SelectedItems ) { 
  control def    : foreach ( var str in repoXml . SelectedItems ) { 
  Test struct definition:         : foreach ( var str in repoXml . SelectedItems ) { 
  Test C# function definition:    : foreach ( var str in repoXml . SelectedItems ) { 
  Test control definition:        : foreach ( var str in repoXml . SelectedItems ) { 
  Handle control definition:      : foreach ( var str in repoXml . SelectedItems ) { 
  Test begin scope                : filenames = filenames + str . ToString ( ) + " " ; 
  Test end scope                  : filenames = filenames + str . ToString ( ) + " " ; 
  Test preproc statement:         : filenames = filenames + str . ToString ( ) + " " ; 
  Test namespace definition:      : filenames = filenames + str . ToString ( ) + " " ; 
  Test class definition:          : filenames = filenames + str . ToString ( ) + " " ; 
  Test struct definition:         : filenames = filenames + str . ToString ( ) + " " ; 
  Test C# function definition:    : filenames = filenames + str . ToString ( ) + " " ; 
  Test control definition:        : filenames = filenames + str . ToString ( ) + " " ; 
  Test C# declaration:            : filenames = filenames + str . ToString ( ) + " " ; 
  function declar: filenames = filenames + str . ToString ( ) + " " ; 
  Handle C# declaration:          : filenames = filenames + str . ToString ( ) + " " ; 
  Test begin scope                : repoXml . Items . Remove ( str ) ; 
  Test end scope                  : repoXml . Items . Remove ( str ) ; 
  Test preproc statement:         : repoXml . Items . Remove ( str ) ; 
  Test namespace definition:      : repoXml . Items . Remove ( str ) ; 
  Test class definition:          : repoXml . Items . Remove ( str ) ; 
  Test struct definition:         : repoXml . Items . Remove ( str ) ; 
  Test C# function definition:    : repoXml . Items . Remove ( str ) ; 
  Test control definition:        : repoXml . Items . Remove ( str ) ; 
  Test C# declaration:            : repoXml . Items . Remove ( str ) ; 
  Test C# executable:             : repoXml . Items . Remove ( str ) ; 
  Handle C# executable:           : repoXml . Items . Remove ( str ) ; 
  executable     : repoXml . Items . Remove ( str ) ; 
  Test begin scope                : } 
--- stack size = 5 ---
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : sendDeleteRequestToBuild ( filenames , "request" ) ; 
  Test end scope                  : sendDeleteRequestToBuild ( filenames , "request" ) ; 
  Test preproc statement:         : sendDeleteRequestToBuild ( filenames , "request" ) ; 
  Test namespace definition:      : sendDeleteRequestToBuild ( filenames , "request" ) ; 
  Test class definition:          : sendDeleteRequestToBuild ( filenames , "request" ) ; 
  Test struct definition:         : sendDeleteRequestToBuild ( filenames , "request" ) ; 
  Test C# function definition:    : sendDeleteRequestToBuild ( filenames , "request" ) ; 
  Test control definition:        : sendDeleteRequestToBuild ( filenames , "request" ) ; 
  Test C# declaration:            : sendDeleteRequestToBuild ( filenames , "request" ) ; 
  Test C# executable:             : sendDeleteRequestToBuild ( filenames , "request" ) ; 
  executable     : sendDeleteRequestToBuild ( filenames , "request" ) ; 
  Handle C# executable:           : sendDeleteRequestToBuild ( filenames , "request" ) ; 
--- stack size = 4 ---
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  Test namespace definition:      : else { 
  control def    : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : MessageBox . Show ( "Please select requests to Delete!" ) ; 
  Test end scope                  : MessageBox . Show ( "Please select requests to Delete!" ) ; 
  Test preproc statement:         : MessageBox . Show ( "Please select requests to Delete!" ) ; 
  Test namespace definition:      : MessageBox . Show ( "Please select requests to Delete!" ) ; 
  Test class definition:          : MessageBox . Show ( "Please select requests to Delete!" ) ; 
  executable     : MessageBox . Show ( "Please select requests to Delete!" ) ; 
  Test struct definition:         : MessageBox . Show ( "Please select requests to Delete!" ) ; 
--- stack size = 4 ---
  Test C# function definition:    : MessageBox . Show ( "Please select requests to Delete!" ) ; 
--- stack size = 3 ---
  Test control definition:        : MessageBox . Show ( "Please select requests to Delete!" ) ; 
  Test C# declaration:            : MessageBox . Show ( "Please select requests to Delete!" ) ; 
  Test C# executable:             : MessageBox . Show ( "Please select requests to Delete!" ) ; 
  Handle C# executable:           : MessageBox . Show ( "Please select requests to Delete!" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void sendDeleteRequestToBuild ( string body , string type ) { 
  handle begin scope              : private void sendDeleteRequestToBuild ( string body , string type ) { 
--- stack size = 4 ---
  Test end scope                  : private void sendDeleteRequestToBuild ( string body , string type ) { 
  Test preproc statement:         : private void sendDeleteRequestToBuild ( string body , string type ) { 
  function def   : private void sendDeleteRequestToBuild ( string body , string type ) { 
  Test namespace definition:      : private void sendDeleteRequestToBuild ( string body , string type ) { 
  Test class definition:          : private void sendDeleteRequestToBuild ( string body , string type ) { 
  Test struct definition:         : private void sendDeleteRequestToBuild ( string body , string type ) { 
  Test C# function definition:    : private void sendDeleteRequestToBuild ( string body , string type ) { 
  Handle C# function definition:  : private void sendDeleteRequestToBuild ( string body , string type ) { 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . command = "delete" + type ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test begin scope                : sndMsg . command = "delete" + type ; 
  Test end scope                  : sndMsg . command = "delete" + type ; 
  executable     : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . command = "delete" + type ; 
  Test namespace definition:      : sndMsg . command = "delete" + type ; 
  Test class definition:          : sndMsg . command = "delete" + type ; 
  Test struct definition:         : sndMsg . command = "delete" + type ; 
  executable     : sndMsg . from = ; 
  Test C# function definition:    : sndMsg . command = "delete" + type ; 
  Test control definition:        : sndMsg . command = "delete" + type ; 
  Test C# declaration:            : sndMsg . command = "delete" + type ; 
  Test C# executable:             : sndMsg . command = "delete" + type ; 
  executable     : sndMsg . body = body ; 
  Handle C# executable:           : sndMsg . command = "delete" + type ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : sndMsg . port = 8074 ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
--- stack size = 3 ---
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = ; 
  Test end scope                  : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . to = ; 
  Test class definition:          : sndMsg . to = ; 
  Test struct definition:         : sndMsg . to = ; 
  Test C# function definition:    : sndMsg . to = ; 
  Test control definition:        : sndMsg . to = ; 
  Test C# declaration:            : sndMsg . to = ; 
  Test C# executable:             : sndMsg . to = ; 
  Handle C# executable:           : sndMsg . to = ; 
  Test begin scope                : sndMsg . from = ; 
  Test end scope                  : sndMsg . from = ; 
  Test preproc statement:         : sndMsg . from = ; 
  Test namespace definition:      : sndMsg . from = ; 
  Test class definition:          : sndMsg . from = ; 
  Test struct definition:         : sndMsg . from = ; 
  Test C# function definition:    : sndMsg . from = ; 
  Test control definition:        : sndMsg . from = ; 
  Test C# declaration:            : sndMsg . from = ; 
  Test C# executable:             : sndMsg . from = ; 
  Handle C# executable:           : sndMsg . from = ; 
  Test begin scope                : sndMsg . body = body ; 
  Test end scope                  : sndMsg . body = body ; 
  Test preproc statement:         : sndMsg . body = body ; 
  Test namespace definition:      : sndMsg . body = body ; 
  Test class definition:          : sndMsg . body = body ; 
  Test struct definition:         : sndMsg . body = body ; 
  Test C# function definition:    : sndMsg . body = body ; 
  Test control definition:        : sndMsg . body = body ; 
  Test C# declaration:            : sndMsg . body = body ; 
  Test C# executable:             : sndMsg . body = body ; 
  Handle C# executable:           : sndMsg . body = body ; 
  Test begin scope                : sndMsg . port = 8074 ; 
  Test end scope                  : sndMsg . port = 8074 ; 
  Test preproc statement:         : sndMsg . port = 8074 ; 
  Test namespace definition:      : sndMsg . port = 8074 ; 
  Test class definition:          : sndMsg . port = 8074 ; 
  Test struct definition:         : sndMsg . port = 8074 ; 
  Test C# function definition:    : sndMsg . port = 8074 ; 
  Test control definition:        : sndMsg . port = 8074 ; 
  Test C# declaration:            : sndMsg . port = 8074 ; 
  Test C# executable:             : sndMsg . port = 8074 ; 
  Handle C# executable:           : sndMsg . port = 8074 ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void DeleteCs ( object sender , RoutedEventArgs e ) { 
  handle begin scope              : private void DeleteCs ( object sender , RoutedEventArgs e ) { 
--- stack size = 4 ---
  Test end scope                  : private void DeleteCs ( object sender , RoutedEventArgs e ) { 
  Test preproc statement:         : private void DeleteCs ( object sender , RoutedEventArgs e ) { 
  function def   : private void DeleteCs ( object sender , RoutedEventArgs e ) { 
  Test namespace definition:      : private void DeleteCs ( object sender , RoutedEventArgs e ) { 
  Test class definition:          : private void DeleteCs ( object sender , RoutedEventArgs e ) { 
  data declar    : String filenames = "" ; 
  Test struct definition:         : private void DeleteCs ( object sender , RoutedEventArgs e ) { 
  Test C# function definition:    : private void DeleteCs ( object sender , RoutedEventArgs e ) { 
  Handle C# function definition:  : private void DeleteCs ( object sender , RoutedEventArgs e ) { 
  Test begin scope                : String filenames = "" ; 
  Test end scope                  : String filenames = "" ; 
  Test preproc statement:         : String filenames = "" ; 
  Test namespace definition:      : String filenames = "" ; 
  Test class definition:          : String filenames = "" ; 
  Test struct definition:         : String filenames = "" ; 
  Test C# function definition:    : String filenames = "" ; 
  Test control definition:        : String filenames = "" ; 
  Test C# declaration:            : String filenames = "" ; 
  Handle C# declaration:          : String filenames = "" ; 
  Test begin scope                : if ( repo . SelectedItems . Count != 0 ) { 
  handle begin scope              : if ( repo . SelectedItems . Count != 0 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( repo . SelectedItems . Count != 0 ) { 
  Test preproc statement:         : if ( repo . SelectedItems . Count != 0 ) { 
  Test namespace definition:      : if ( repo . SelectedItems . Count != 0 ) { 
  Test class definition:          : if ( repo . SelectedItems . Count != 0 ) { 
  control def    : if ( repo . SelectedItems . Count != 0 ) { 
  Test struct definition:         : if ( repo . SelectedItems . Count != 0 ) { 
  Test C# function definition:    : if ( repo . SelectedItems . Count != 0 ) { 
  Test control definition:        : if ( repo . SelectedItems . Count != 0 ) { 
  Handle control definition:      : if ( repo . SelectedItems . Count != 0 ) { 
  Test begin scope                : foreach ( var str in repo . SelectedItems ) { 
  handle begin scope              : foreach ( var str in repo . SelectedItems ) { 
--- stack size = 6 ---
  Test end scope                  : foreach ( var str in repo . SelectedItems ) { 
  Test preproc statement:         : foreach ( var str in repo . SelectedItems ) { 
  Test namespace definition:      : foreach ( var str in repo . SelectedItems ) { 
  Test class definition:          : foreach ( var str in repo . SelectedItems ) { 
  Test struct definition:         : foreach ( var str in repo . SelectedItems ) { 
  control def    : foreach ( var str in repo . SelectedItems ) { 
  Test C# function definition:    : foreach ( var str in repo . SelectedItems ) { 
  Test control definition:        : foreach ( var str in repo . SelectedItems ) { 
  Handle control definition:      : foreach ( var str in repo . SelectedItems ) { 
  Test begin scope                : filenames = filenames + str . ToString ( ) + " " ; 
  Test end scope                  : filenames = filenames + str . ToString ( ) + " " ; 
  Test preproc statement:         : filenames = filenames + str . ToString ( ) + " " ; 
  Test namespace definition:      : filenames = filenames + str . ToString ( ) + " " ; 
  Test class definition:          : filenames = filenames + str . ToString ( ) + " " ; 
  Test struct definition:         : filenames = filenames + str . ToString ( ) + " " ; 
  Test C# function definition:    : filenames = filenames + str . ToString ( ) + " " ; 
  Test control definition:        : filenames = filenames + str . ToString ( ) + " " ; 
  Test C# declaration:            : filenames = filenames + str . ToString ( ) + " " ; 
  Handle C# declaration:          : filenames = filenames + str . ToString ( ) + " " ; 
  function declar: filenames = filenames + str . ToString ( ) + " " ; 
  Test begin scope                : repo . Items . Remove ( str ) ; 
  Test end scope                  : repo . Items . Remove ( str ) ; 
  Test preproc statement:         : repo . Items . Remove ( str ) ; 
  Test namespace definition:      : repo . Items . Remove ( str ) ; 
  Test class definition:          : repo . Items . Remove ( str ) ; 
  Test struct definition:         : repo . Items . Remove ( str ) ; 
  Test C# function definition:    : repo . Items . Remove ( str ) ; 
  Test control definition:        : repo . Items . Remove ( str ) ; 
  Test C# declaration:            : repo . Items . Remove ( str ) ; 
  Test C# executable:             : repo . Items . Remove ( str ) ; 
  Handle C# executable:           : repo . Items . Remove ( str ) ; 
  executable     : repo . Items . Remove ( str ) ; 
  Test begin scope                : } 
--- stack size = 5 ---
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : sendDeleteRequestToBuild ( filenames , "files" ) ; 
  Test end scope                  : sendDeleteRequestToBuild ( filenames , "files" ) ; 
  Test preproc statement:         : sendDeleteRequestToBuild ( filenames , "files" ) ; 
  Test namespace definition:      : sendDeleteRequestToBuild ( filenames , "files" ) ; 
  Test class definition:          : sendDeleteRequestToBuild ( filenames , "files" ) ; 
  Test struct definition:         : sendDeleteRequestToBuild ( filenames , "files" ) ; 
  Test C# function definition:    : sendDeleteRequestToBuild ( filenames , "files" ) ; 
  executable     : sendDeleteRequestToBuild ( filenames , "files" ) ; 
  Test control definition:        : sendDeleteRequestToBuild ( filenames , "files" ) ; 
--- stack size = 4 ---
  Test C# declaration:            : sendDeleteRequestToBuild ( filenames , "files" ) ; 
  Test C# executable:             : sendDeleteRequestToBuild ( filenames , "files" ) ; 
  Handle C# executable:           : sendDeleteRequestToBuild ( filenames , "files" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : MessageBox . Show ( "Please select files to delete" ) ; 
  Test end scope                  : MessageBox . Show ( "Please select files to delete" ) ; 
  executable     : MessageBox . Show ( "Please select files to delete" ) ; 
  Test preproc statement:         : MessageBox . Show ( "Please select files to delete" ) ; 
--- stack size = 4 ---
  Test namespace definition:      : MessageBox . Show ( "Please select files to delete" ) ; 
--- stack size = 3 ---
  Test class definition:          : MessageBox . Show ( "Please select files to delete" ) ; 
--- stack size = 2 ---
  Test struct definition:         : MessageBox . Show ( "Please select files to delete" ) ; 
--- stack size = 1 ---
  Test C# function definition:    : MessageBox . Show ( "Please select files to delete" ) ; 
  Test control definition:        : MessageBox . Show ( "Please select files to delete" ) ; 
  Test C# declaration:            : MessageBox . Show ( "Please select files to delete" ) ; 
  Preproc Stmt   : 
    # pragma checksum "..\..\App.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "076F7B7FCBF42DCEFD7286E26DA07F14" 
  Test C# executable:             : MessageBox . Show ( "Please select files to delete" ) ; 
  using declar   : using ClientGUI ; 
  Handle C# executable:           : MessageBox . Show ( "Please select files to delete" ) ; 
  using declar   : using System ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System . Diagnostics ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  using declar   : using System . Windows ; 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System . Windows . Automation ; 
  Test begin scope                : 
    # pragma checksum "..\..\App.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "076F7B7FCBF42DCEFD7286E26DA07F14" 
  using declar   : using System . Windows . Controls ; 
  Test end scope                  : 
    # pragma checksum "..\..\App.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "076F7B7FCBF42DCEFD7286E26DA07F14" 
  Test preproc statement:         : 
    # pragma checksum "..\..\App.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "076F7B7FCBF42DCEFD7286E26DA07F14" 
  using declar   : using System . Windows . Controls . Primitives ; 
  Handle preproc statement:       : 
    # pragma checksum "..\..\App.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "076F7B7FCBF42DCEFD7286E26DA07F14" 
  using declar   : using System . Windows . Data ; 
  Test begin scope                : using ClientGUI ; 
  Test end scope                  : using ClientGUI ; 
  using declar   : using System . Windows . Documents ; 
  Test preproc statement:         : using ClientGUI ; 
  Test namespace definition:      : using ClientGUI ; 
  Test class definition:          : using ClientGUI ; 
  using declar   : using System . Windows . Ink ; 
  Test struct definition:         : using ClientGUI ; 
  Test C# function definition:    : using ClientGUI ; 
  Test control definition:        : using ClientGUI ; 
  Test C# declaration:            : using ClientGUI ; 
  Handle C# declaration:          : using ClientGUI ; 
  using declar   : using System . Windows . Input ; 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  using declar   : using System . Windows . Markup ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  using declar   : using System . Windows . Media ; 
  Test begin scope                : using System . Diagnostics ; 
  Test end scope                  : using System . Diagnostics ; 
  Test preproc statement:         : using System . Diagnostics ; 
  using declar   : using System . Windows . Media . Animation ; 
  Test namespace definition:      : using System . Diagnostics ; 
  Test class definition:          : using System . Diagnostics ; 
  Test struct definition:         : using System . Diagnostics ; 
  using declar   : using System . Windows . Media . Effects ; 
  Test C# function definition:    : using System . Diagnostics ; 
  Test control definition:        : using System . Diagnostics ; 
  Test C# declaration:            : using System . Diagnostics ; 
  using declar   : using System . Windows . Media . Imaging ; 
  Handle C# declaration:          : using System . Diagnostics ; 
  Test begin scope                : using System . Windows ; 
  Test end scope                  : using System . Windows ; 
  Test preproc statement:         : using System . Windows ; 
  using declar   : using System . Windows . Media . Media3D ; 
  Test namespace definition:      : using System . Windows ; 
  Test class definition:          : using System . Windows ; 
  Test struct definition:         : using System . Windows ; 
  using declar   : using System . Windows . Media . TextFormatting ; 
  Test C# function definition:    : using System . Windows ; 
  Test control definition:        : using System . Windows ; 
  Test C# declaration:            : using System . Windows ; 
  using declar   : using System . Windows . Navigation ; 
  Handle C# declaration:          : using System . Windows ; 
  Test begin scope                : using System . Windows . Automation ; 
  Test end scope                  : using System . Windows . Automation ; 
  Test preproc statement:         : using System . Windows . Automation ; 
  using declar   : using System . Windows . Shapes ; 
  Test namespace definition:      : using System . Windows . Automation ; 
  Test class definition:          : using System . Windows . Automation ; 
  Test struct definition:         : using System . Windows . Automation ; 
  Test C# function definition:    : using System . Windows . Automation ; 
  using declar   : using System . Windows . Shell ; 
  Test control definition:        : using System . Windows . Automation ; 
  Test C# declaration:            : using System . Windows . Automation ; 
  Handle C# declaration:          : using System . Windows . Automation ; 
  Test begin scope                : using System . Windows . Controls ; 
  Test end scope                  : using System . Windows . Controls ; 
  Test preproc statement:         : using System . Windows . Controls ; 
  Test namespace definition:      : using System . Windows . Controls ; 
  Test class definition:          : using System . Windows . Controls ; 
  Test struct definition:         : using System . Windows . Controls ; 
  Test C# function definition:    : using System . Windows . Controls ; 
  Test control definition:        : using System . Windows . Controls ; 
  Test C# declaration:            : using System . Windows . Controls ; 
  Handle C# declaration:          : using System . Windows . Controls ; 
  Test begin scope                : using System . Windows . Controls . Primitives ; 
  Test end scope                  : using System . Windows . Controls . Primitives ; 
  Test preproc statement:         : using System . Windows . Controls . Primitives ; 
  Test namespace definition:      : using System . Windows . Controls . Primitives ; 
  Test class definition:          : using System . Windows . Controls . Primitives ; 
  Test struct definition:         : using System . Windows . Controls . Primitives ; 
  Test C# function definition:    : using System . Windows . Controls . Primitives ; 
  Test control definition:        : using System . Windows . Controls . Primitives ; 
  Test C# declaration:            : using System . Windows . Controls . Primitives ; 
  Handle C# declaration:          : using System . Windows . Controls . Primitives ; 
  Test begin scope                : using System . Windows . Data ; 
  Test end scope                  : using System . Windows . Data ; 
  Test preproc statement:         : using System . Windows . Data ; 
  Test namespace definition:      : using System . Windows . Data ; 
  Test class definition:          : using System . Windows . Data ; 
  Test struct definition:         : using System . Windows . Data ; 
  Test C# function definition:    : using System . Windows . Data ; 
  Test control definition:        : using System . Windows . Data ; 
  Test C# declaration:            : using System . Windows . Data ; 
  Handle C# declaration:          : using System . Windows . Data ; 
  Test begin scope                : using System . Windows . Documents ; 
  Test end scope                  : using System . Windows . Documents ; 
  Test preproc statement:         : using System . Windows . Documents ; 
  Test namespace definition:      : using System . Windows . Documents ; 
  Test class definition:          : using System . Windows . Documents ; 
  Test struct definition:         : using System . Windows . Documents ; 
  Test C# function definition:    : using System . Windows . Documents ; 
  Test control definition:        : using System . Windows . Documents ; 
  Test C# declaration:            : using System . Windows . Documents ; 
  Handle C# declaration:          : using System . Windows . Documents ; 
  Test begin scope                : using System . Windows . Ink ; 
  Test end scope                  : using System . Windows . Ink ; 
  Test preproc statement:         : using System . Windows . Ink ; 
  Test namespace definition:      : using System . Windows . Ink ; 
  Test class definition:          : using System . Windows . Ink ; 
  Test struct definition:         : using System . Windows . Ink ; 
  Test C# function definition:    : using System . Windows . Ink ; 
  Test control definition:        : using System . Windows . Ink ; 
  Test C# declaration:            : using System . Windows . Ink ; 
  Handle C# declaration:          : using System . Windows . Ink ; 
  Test begin scope                : using System . Windows . Input ; 
  Test end scope                  : using System . Windows . Input ; 
  Test preproc statement:         : using System . Windows . Input ; 
  Test namespace definition:      : using System . Windows . Input ; 
  Test class definition:          : using System . Windows . Input ; 
  Test struct definition:         : using System . Windows . Input ; 
  Test C# function definition:    : using System . Windows . Input ; 
  Test control definition:        : using System . Windows . Input ; 
  Test C# declaration:            : using System . Windows . Input ; 
  Handle C# declaration:          : using System . Windows . Input ; 
  Test begin scope                : using System . Windows . Markup ; 
  Test end scope                  : using System . Windows . Markup ; 
  Test preproc statement:         : using System . Windows . Markup ; 
  Test namespace definition:      : using System . Windows . Markup ; 
  Test class definition:          : using System . Windows . Markup ; 
  Test struct definition:         : using System . Windows . Markup ; 
  Test C# function definition:    : using System . Windows . Markup ; 
  Test control definition:        : using System . Windows . Markup ; 
  Test C# declaration:            : using System . Windows . Markup ; 
  Handle C# declaration:          : using System . Windows . Markup ; 
  Test begin scope                : using System . Windows . Media ; 
  Test end scope                  : using System . Windows . Media ; 
  Test preproc statement:         : using System . Windows . Media ; 
  Test namespace definition:      : using System . Windows . Media ; 
  Test class definition:          : using System . Windows . Media ; 
  Test struct definition:         : using System . Windows . Media ; 
  Test C# function definition:    : using System . Windows . Media ; 
  Test control definition:        : using System . Windows . Media ; 
  Test C# declaration:            : using System . Windows . Media ; 
  Handle C# declaration:          : using System . Windows . Media ; 
  Test begin scope                : using System . Windows . Media . Animation ; 
  Test end scope                  : using System . Windows . Media . Animation ; 
  Test preproc statement:         : using System . Windows . Media . Animation ; 
  Test namespace definition:      : using System . Windows . Media . Animation ; 
  Test class definition:          : using System . Windows . Media . Animation ; 
  Test struct definition:         : using System . Windows . Media . Animation ; 
  Test C# function definition:    : using System . Windows . Media . Animation ; 
  Test control definition:        : using System . Windows . Media . Animation ; 
  Test C# declaration:            : using System . Windows . Media . Animation ; 
  Handle C# declaration:          : using System . Windows . Media . Animation ; 
  Test begin scope                : using System . Windows . Media . Effects ; 
  Test end scope                  : using System . Windows . Media . Effects ; 
  Test preproc statement:         : using System . Windows . Media . Effects ; 
  Test namespace definition:      : using System . Windows . Media . Effects ; 
  Test class definition:          : using System . Windows . Media . Effects ; 
  Test struct definition:         : using System . Windows . Media . Effects ; 
  Test C# function definition:    : using System . Windows . Media . Effects ; 
  Test control definition:        : using System . Windows . Media . Effects ; 
  Test C# declaration:            : using System . Windows . Media . Effects ; 
  Handle C# declaration:          : using System . Windows . Media . Effects ; 
  Test begin scope                : using System . Windows . Media . Imaging ; 
  Test end scope                  : using System . Windows . Media . Imaging ; 
  Test preproc statement:         : using System . Windows . Media . Imaging ; 
  Test namespace definition:      : using System . Windows . Media . Imaging ; 
  Test class definition:          : using System . Windows . Media . Imaging ; 
  Test struct definition:         : using System . Windows . Media . Imaging ; 
  Test C# function definition:    : using System . Windows . Media . Imaging ; 
  Test control definition:        : using System . Windows . Media . Imaging ; 
  Test C# declaration:            : using System . Windows . Media . Imaging ; 
  Handle C# declaration:          : using System . Windows . Media . Imaging ; 
  Test begin scope                : using System . Windows . Media . Media3D ; 
  Test end scope                  : using System . Windows . Media . Media3D ; 
  Test preproc statement:         : using System . Windows . Media . Media3D ; 
  Test namespace definition:      : using System . Windows . Media . Media3D ; 
  Test class definition:          : using System . Windows . Media . Media3D ; 
  Test struct definition:         : using System . Windows . Media . Media3D ; 
  Test C# function definition:    : using System . Windows . Media . Media3D ; 
  Test control definition:        : using System . Windows . Media . Media3D ; 
  Test C# declaration:            : using System . Windows . Media . Media3D ; 
  Handle C# declaration:          : using System . Windows . Media . Media3D ; 
  Test begin scope                : using System . Windows . Media . TextFormatting ; 
  Test end scope                  : using System . Windows . Media . TextFormatting ; 
  Test preproc statement:         : using System . Windows . Media . TextFormatting ; 
  Test namespace definition:      : using System . Windows . Media . TextFormatting ; 
  Test class definition:          : using System . Windows . Media . TextFormatting ; 
  Test struct definition:         : using System . Windows . Media . TextFormatting ; 
  Test C# function definition:    : using System . Windows . Media . TextFormatting ; 
  Test control definition:        : using System . Windows . Media . TextFormatting ; 
  Test C# declaration:            : using System . Windows . Media . TextFormatting ; 
  Handle C# declaration:          : using System . Windows . Media . TextFormatting ; 
  Test begin scope                : using System . Windows . Navigation ; 
  Test end scope                  : using System . Windows . Navigation ; 
  Test preproc statement:         : using System . Windows . Navigation ; 
  Test namespace definition:      : using System . Windows . Navigation ; 
  Test class definition:          : using System . Windows . Navigation ; 
  Test struct definition:         : using System . Windows . Navigation ; 
  Test C# function definition:    : using System . Windows . Navigation ; 
  Test control definition:        : using System . Windows . Navigation ; 
  Test C# declaration:            : using System . Windows . Navigation ; 
  Handle C# declaration:          : using System . Windows . Navigation ; 
  Test begin scope                : using System . Windows . Shapes ; 
  Test end scope                  : using System . Windows . Shapes ; 
  Test preproc statement:         : using System . Windows . Shapes ; 
  Test namespace definition:      : using System . Windows . Shapes ; 
  Test class definition:          : using System . Windows . Shapes ; 
  Test struct definition:         : using System . Windows . Shapes ; 
  Test C# function definition:    : using System . Windows . Shapes ; 
  Test control definition:        : using System . Windows . Shapes ; 
  Test C# declaration:            : using System . Windows . Shapes ; 
  Handle C# declaration:          : using System . Windows . Shapes ; 
  Test begin scope                : using System . Windows . Shell ; 
  Test end scope                  : using System . Windows . Shell ; 
  Test preproc statement:         : using System . Windows . Shell ; 
  Test namespace definition:      : using System . Windows . Shell ; 
  Test class definition:          : using System . Windows . Shell ; 
  Test struct definition:         : using System . Windows . Shell ; 
  Test C# function definition:    : using System . Windows . Shell ; 
  Test control definition:        : using System . Windows . Shell ; 
  Test C# declaration:            : using System . Windows . Shell ; 
  Handle C# declaration:          : using System . Windows . Shell ; 
  Test begin scope                : namespace ClientGUI { 
  handle begin scope              : namespace ClientGUI { 
--- stack size = 2 ---
  Test end scope                  : namespace ClientGUI { 
  namespace def  : namespace ClientGUI { 
  Test preproc statement:         : namespace ClientGUI { 
  Test namespace definition:      : namespace ClientGUI { 
  Handle namespace definition:    : namespace ClientGUI { 
  Test begin scope                : public partial class App : System . Windows . Application { 
  handle begin scope              : public partial class App : System . Windows . Application { 
--- stack size = 3 ---
  Test end scope                  : public partial class App : System . Windows . Application { 
  Test preproc statement:         : public partial class App : System . Windows . Application { 
  class def      : public partial class App : System . Windows . Application { 
  Test namespace definition:      : public partial class App : System . Windows . Application { 
  Test class definition:          : public partial class App : System . Windows . Application { 
  Handle class definition:        : public partial class App : System . Windows . Application { 
  Test begin scope                : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  handle begin scope              : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
--- stack size = 4 ---
  Test end scope                  : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test preproc statement:         : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test namespace definition:      : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  function def   : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test class definition:          : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Preproc Stmt   : # line 5 "..\..\App.xaml" 
  Test struct definition:         : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test C# function definition:    : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  executable     : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Handle C# function definition:  : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Preproc Stmt   : # line default 
  Test begin scope                : # line 5 "..\..\App.xaml" 
  Preproc Stmt   : # line hidden 
  Test end scope                  : # line 5 "..\..\App.xaml" 
--- stack size = 3 ---
  Test preproc statement:         : # line 5 "..\..\App.xaml" 
  Handle preproc statement:       : # line 5 "..\..\App.xaml" 
  Test begin scope                : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Test end scope                  : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Test preproc statement:         : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Test namespace definition:      : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Test class definition:          : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Test struct definition:         : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Test C# function definition:    : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Test control definition:        : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Test C# declaration:            : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Test C# executable:             : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Handle C# executable:           : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    [ System . STAThreadAttribute ( ) ] [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public static void Main ( ) { 
  handle begin scope              : 
    [ System . STAThreadAttribute ( ) ] [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public static void Main ( ) { 
--- stack size = 4 ---
  Test end scope                  : 
    [ System . STAThreadAttribute ( ) ] [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public static void Main ( ) { 
  Test preproc statement:         : 
    [ System . STAThreadAttribute ( ) ] [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public static void Main ( ) { 
  Test namespace definition:      : 
    [ System . STAThreadAttribute ( ) ] [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public static void Main ( ) { 
  function def   : 
    [ System . STAThreadAttribute ( ) ] [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public static void Main ( ) { 
  Test class definition:          : 
    [ System . STAThreadAttribute ( ) ] [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public static void Main ( ) { 
  Test struct definition:         : 
    [ System . STAThreadAttribute ( ) ] [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public static void Main ( ) { 
  executable     : ClientGUI . App app = new ClientGUI . App ( ) ; 
  Test C# function definition:    : 
    [ System . STAThreadAttribute ( ) ] [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public static void Main ( ) { 
  executable     : app . InitializeComponent ( ) ; 
  Handle C# function definition:  : 
    [ System . STAThreadAttribute ( ) ] [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public static void Main ( ) { 
  executable     : app . Run ( ) ; 
  Test begin scope                : ClientGUI . App app = new ClientGUI . App ( ) ; 
--- stack size = 3 ---
  Test end scope                  : ClientGUI . App app = new ClientGUI . App ( ) ; 
--- stack size = 2 ---
  Test preproc statement:         : ClientGUI . App app = new ClientGUI . App ( ) ; 
--- stack size = 1 ---
  Test namespace definition:      : ClientGUI . App app = new ClientGUI . App ( ) ; 
  Test class definition:          : ClientGUI . App app = new ClientGUI . App ( ) ; 
  Test struct definition:         : ClientGUI . App app = new ClientGUI . App ( ) ; 
  Preproc Stmt   : 
    # pragma checksum "..\..\App.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "076F7B7FCBF42DCEFD7286E26DA07F14" 
  Test C# function definition:    : ClientGUI . App app = new ClientGUI . App ( ) ; 
  using declar   : using ClientGUI ; 
  Test control definition:        : ClientGUI . App app = new ClientGUI . App ( ) ; 
  Test C# declaration:            : ClientGUI . App app = new ClientGUI . App ( ) ; 
  using declar   : using System ; 
  Test C# executable:             : ClientGUI . App app = new ClientGUI . App ( ) ; 
  Handle C# executable:           : ClientGUI . App app = new ClientGUI . App ( ) ; 
  using declar   : using System . Diagnostics ; 
  Test begin scope                : app . InitializeComponent ( ) ; 
  Test end scope                  : app . InitializeComponent ( ) ; 
  Test preproc statement:         : app . InitializeComponent ( ) ; 
  using declar   : using System . Windows ; 
  Test namespace definition:      : app . InitializeComponent ( ) ; 
  Test class definition:          : app . InitializeComponent ( ) ; 
  Test struct definition:         : app . InitializeComponent ( ) ; 
  using declar   : using System . Windows . Automation ; 
  Test C# function definition:    : app . InitializeComponent ( ) ; 
  Test control definition:        : app . InitializeComponent ( ) ; 
  using declar   : using System . Windows . Controls ; 
  Test C# declaration:            : app . InitializeComponent ( ) ; 
  Test C# executable:             : app . InitializeComponent ( ) ; 
  Handle C# executable:           : app . InitializeComponent ( ) ; 
  Test begin scope                : app . Run ( ) ; 
  using declar   : using System . Windows . Controls . Primitives ; 
  Test end scope                  : app . Run ( ) ; 
  Test preproc statement:         : app . Run ( ) ; 
  Test namespace definition:      : app . Run ( ) ; 
  Test class definition:          : app . Run ( ) ; 
  using declar   : using System . Windows . Data ; 
  Test struct definition:         : app . Run ( ) ; 
  Test C# function definition:    : app . Run ( ) ; 
  Test control definition:        : app . Run ( ) ; 
  using declar   : using System . Windows . Documents ; 
  Test C# declaration:            : app . Run ( ) ; 
  Test C# executable:             : app . Run ( ) ; 
  Handle C# executable:           : app . Run ( ) ; 
  Test begin scope                : } 
  using declar   : using System . Windows . Ink ; 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  using declar   : using System . Windows . Input ; 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    # pragma checksum "..\..\App.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "076F7B7FCBF42DCEFD7286E26DA07F14" 
  using declar   : using System . Windows . Markup ; 
  Test end scope                  : 
    # pragma checksum "..\..\App.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "076F7B7FCBF42DCEFD7286E26DA07F14" 
  Test preproc statement:         : 
    # pragma checksum "..\..\App.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "076F7B7FCBF42DCEFD7286E26DA07F14" 
  using declar   : using System . Windows . Media ; 
  Handle preproc statement:       : 
    # pragma checksum "..\..\App.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "076F7B7FCBF42DCEFD7286E26DA07F14" 
  using declar   : using System . Windows . Media . Animation ; 
  Test begin scope                : using ClientGUI ; 
  Test end scope                  : using ClientGUI ; 
  Test preproc statement:         : using ClientGUI ; 
  Test namespace definition:      : using ClientGUI ; 
  Test class definition:          : using ClientGUI ; 
  using declar   : using System . Windows . Media . Effects ; 
  Test struct definition:         : using ClientGUI ; 
  Test C# function definition:    : using ClientGUI ; 
  Test control definition:        : using ClientGUI ; 
  using declar   : using System . Windows . Media . Imaging ; 
  Test C# declaration:            : using ClientGUI ; 
  Handle C# declaration:          : using ClientGUI ; 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  using declar   : using System . Windows . Media . Media3D ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  using declar   : using System . Windows . Media . TextFormatting ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Diagnostics ; 
  using declar   : using System . Windows . Navigation ; 
  Test end scope                  : using System . Diagnostics ; 
  Test preproc statement:         : using System . Diagnostics ; 
  Test namespace definition:      : using System . Diagnostics ; 
  using declar   : using System . Windows . Shapes ; 
  Test class definition:          : using System . Diagnostics ; 
  Test struct definition:         : using System . Diagnostics ; 
  Test C# function definition:    : using System . Diagnostics ; 
  Test control definition:        : using System . Diagnostics ; 
  using declar   : using System . Windows . Shell ; 
  Test C# declaration:            : using System . Diagnostics ; 
  Handle C# declaration:          : using System . Diagnostics ; 
  Test begin scope                : using System . Windows ; 
  Test end scope                  : using System . Windows ; 
  Test preproc statement:         : using System . Windows ; 
  Test namespace definition:      : using System . Windows ; 
  Test class definition:          : using System . Windows ; 
  Test struct definition:         : using System . Windows ; 
  Test C# function definition:    : using System . Windows ; 
  Test control definition:        : using System . Windows ; 
  Test C# declaration:            : using System . Windows ; 
  Handle C# declaration:          : using System . Windows ; 
  Test begin scope                : using System . Windows . Automation ; 
  Test end scope                  : using System . Windows . Automation ; 
  Test preproc statement:         : using System . Windows . Automation ; 
  Test namespace definition:      : using System . Windows . Automation ; 
  Test class definition:          : using System . Windows . Automation ; 
  Test struct definition:         : using System . Windows . Automation ; 
  Test C# function definition:    : using System . Windows . Automation ; 
  Test control definition:        : using System . Windows . Automation ; 
  Test C# declaration:            : using System . Windows . Automation ; 
  Handle C# declaration:          : using System . Windows . Automation ; 
  Test begin scope                : using System . Windows . Controls ; 
  Test end scope                  : using System . Windows . Controls ; 
  Test preproc statement:         : using System . Windows . Controls ; 
  Test namespace definition:      : using System . Windows . Controls ; 
  Test class definition:          : using System . Windows . Controls ; 
  Test struct definition:         : using System . Windows . Controls ; 
  Test C# function definition:    : using System . Windows . Controls ; 
  Test control definition:        : using System . Windows . Controls ; 
  Test C# declaration:            : using System . Windows . Controls ; 
  Handle C# declaration:          : using System . Windows . Controls ; 
  Test begin scope                : using System . Windows . Controls . Primitives ; 
  Test end scope                  : using System . Windows . Controls . Primitives ; 
  Test preproc statement:         : using System . Windows . Controls . Primitives ; 
  Test namespace definition:      : using System . Windows . Controls . Primitives ; 
  Test class definition:          : using System . Windows . Controls . Primitives ; 
  Test struct definition:         : using System . Windows . Controls . Primitives ; 
  Test C# function definition:    : using System . Windows . Controls . Primitives ; 
  Test control definition:        : using System . Windows . Controls . Primitives ; 
  Test C# declaration:            : using System . Windows . Controls . Primitives ; 
  Handle C# declaration:          : using System . Windows . Controls . Primitives ; 
  Test begin scope                : using System . Windows . Data ; 
  Test end scope                  : using System . Windows . Data ; 
  Test preproc statement:         : using System . Windows . Data ; 
  Test namespace definition:      : using System . Windows . Data ; 
  Test class definition:          : using System . Windows . Data ; 
  Test struct definition:         : using System . Windows . Data ; 
  Test C# function definition:    : using System . Windows . Data ; 
  Test control definition:        : using System . Windows . Data ; 
  Test C# declaration:            : using System . Windows . Data ; 
  Handle C# declaration:          : using System . Windows . Data ; 
  Test begin scope                : using System . Windows . Documents ; 
  Test end scope                  : using System . Windows . Documents ; 
  Test preproc statement:         : using System . Windows . Documents ; 
  Test namespace definition:      : using System . Windows . Documents ; 
  Test class definition:          : using System . Windows . Documents ; 
  Test struct definition:         : using System . Windows . Documents ; 
  Test C# function definition:    : using System . Windows . Documents ; 
  Test control definition:        : using System . Windows . Documents ; 
  Test C# declaration:            : using System . Windows . Documents ; 
  Handle C# declaration:          : using System . Windows . Documents ; 
  Test begin scope                : using System . Windows . Ink ; 
  Test end scope                  : using System . Windows . Ink ; 
  Test preproc statement:         : using System . Windows . Ink ; 
  Test namespace definition:      : using System . Windows . Ink ; 
  Test class definition:          : using System . Windows . Ink ; 
  Test struct definition:         : using System . Windows . Ink ; 
  Test C# function definition:    : using System . Windows . Ink ; 
  Test control definition:        : using System . Windows . Ink ; 
  Test C# declaration:            : using System . Windows . Ink ; 
  Handle C# declaration:          : using System . Windows . Ink ; 
  Test begin scope                : using System . Windows . Input ; 
  Test end scope                  : using System . Windows . Input ; 
  Test preproc statement:         : using System . Windows . Input ; 
  Test namespace definition:      : using System . Windows . Input ; 
  Test class definition:          : using System . Windows . Input ; 
  Test struct definition:         : using System . Windows . Input ; 
  Test C# function definition:    : using System . Windows . Input ; 
  Test control definition:        : using System . Windows . Input ; 
  Test C# declaration:            : using System . Windows . Input ; 
  Handle C# declaration:          : using System . Windows . Input ; 
  Test begin scope                : using System . Windows . Markup ; 
  Test end scope                  : using System . Windows . Markup ; 
  Test preproc statement:         : using System . Windows . Markup ; 
  Test namespace definition:      : using System . Windows . Markup ; 
  Test class definition:          : using System . Windows . Markup ; 
  Test struct definition:         : using System . Windows . Markup ; 
  Test C# function definition:    : using System . Windows . Markup ; 
  Test control definition:        : using System . Windows . Markup ; 
  Test C# declaration:            : using System . Windows . Markup ; 
  Handle C# declaration:          : using System . Windows . Markup ; 
  Test begin scope                : using System . Windows . Media ; 
  Test end scope                  : using System . Windows . Media ; 
  Test preproc statement:         : using System . Windows . Media ; 
  Test namespace definition:      : using System . Windows . Media ; 
  Test class definition:          : using System . Windows . Media ; 
  Test struct definition:         : using System . Windows . Media ; 
  Test C# function definition:    : using System . Windows . Media ; 
  Test control definition:        : using System . Windows . Media ; 
  Test C# declaration:            : using System . Windows . Media ; 
  Handle C# declaration:          : using System . Windows . Media ; 
  Test begin scope                : using System . Windows . Media . Animation ; 
  Test end scope                  : using System . Windows . Media . Animation ; 
  Test preproc statement:         : using System . Windows . Media . Animation ; 
  Test namespace definition:      : using System . Windows . Media . Animation ; 
  Test class definition:          : using System . Windows . Media . Animation ; 
  Test struct definition:         : using System . Windows . Media . Animation ; 
  Test C# function definition:    : using System . Windows . Media . Animation ; 
  Test control definition:        : using System . Windows . Media . Animation ; 
  Test C# declaration:            : using System . Windows . Media . Animation ; 
  Handle C# declaration:          : using System . Windows . Media . Animation ; 
  Test begin scope                : using System . Windows . Media . Effects ; 
  Test end scope                  : using System . Windows . Media . Effects ; 
  Test preproc statement:         : using System . Windows . Media . Effects ; 
  Test namespace definition:      : using System . Windows . Media . Effects ; 
  Test class definition:          : using System . Windows . Media . Effects ; 
  Test struct definition:         : using System . Windows . Media . Effects ; 
  Test C# function definition:    : using System . Windows . Media . Effects ; 
  Test control definition:        : using System . Windows . Media . Effects ; 
  Test C# declaration:            : using System . Windows . Media . Effects ; 
  Handle C# declaration:          : using System . Windows . Media . Effects ; 
  Test begin scope                : using System . Windows . Media . Imaging ; 
  Test end scope                  : using System . Windows . Media . Imaging ; 
  Test preproc statement:         : using System . Windows . Media . Imaging ; 
  Test namespace definition:      : using System . Windows . Media . Imaging ; 
  Test class definition:          : using System . Windows . Media . Imaging ; 
  Test struct definition:         : using System . Windows . Media . Imaging ; 
  Test C# function definition:    : using System . Windows . Media . Imaging ; 
  Test control definition:        : using System . Windows . Media . Imaging ; 
  Test C# declaration:            : using System . Windows . Media . Imaging ; 
  Handle C# declaration:          : using System . Windows . Media . Imaging ; 
  Test begin scope                : using System . Windows . Media . Media3D ; 
  Test end scope                  : using System . Windows . Media . Media3D ; 
  Test preproc statement:         : using System . Windows . Media . Media3D ; 
  Test namespace definition:      : using System . Windows . Media . Media3D ; 
  Test class definition:          : using System . Windows . Media . Media3D ; 
  Test struct definition:         : using System . Windows . Media . Media3D ; 
  Test C# function definition:    : using System . Windows . Media . Media3D ; 
  Test control definition:        : using System . Windows . Media . Media3D ; 
  Test C# declaration:            : using System . Windows . Media . Media3D ; 
  Handle C# declaration:          : using System . Windows . Media . Media3D ; 
  Test begin scope                : using System . Windows . Media . TextFormatting ; 
  Test end scope                  : using System . Windows . Media . TextFormatting ; 
  Test preproc statement:         : using System . Windows . Media . TextFormatting ; 
  Test namespace definition:      : using System . Windows . Media . TextFormatting ; 
  Test class definition:          : using System . Windows . Media . TextFormatting ; 
  Test struct definition:         : using System . Windows . Media . TextFormatting ; 
  Test C# function definition:    : using System . Windows . Media . TextFormatting ; 
  Test control definition:        : using System . Windows . Media . TextFormatting ; 
  Test C# declaration:            : using System . Windows . Media . TextFormatting ; 
  Handle C# declaration:          : using System . Windows . Media . TextFormatting ; 
  Test begin scope                : using System . Windows . Navigation ; 
  Test end scope                  : using System . Windows . Navigation ; 
  Test preproc statement:         : using System . Windows . Navigation ; 
  Test namespace definition:      : using System . Windows . Navigation ; 
  Test class definition:          : using System . Windows . Navigation ; 
  Test struct definition:         : using System . Windows . Navigation ; 
  Test C# function definition:    : using System . Windows . Navigation ; 
  Test control definition:        : using System . Windows . Navigation ; 
  Test C# declaration:            : using System . Windows . Navigation ; 
  Handle C# declaration:          : using System . Windows . Navigation ; 
  Test begin scope                : using System . Windows . Shapes ; 
  Test end scope                  : using System . Windows . Shapes ; 
  Test preproc statement:         : using System . Windows . Shapes ; 
  Test namespace definition:      : using System . Windows . Shapes ; 
  Test class definition:          : using System . Windows . Shapes ; 
  Test struct definition:         : using System . Windows . Shapes ; 
  Test C# function definition:    : using System . Windows . Shapes ; 
  Test control definition:        : using System . Windows . Shapes ; 
  Test C# declaration:            : using System . Windows . Shapes ; 
  Handle C# declaration:          : using System . Windows . Shapes ; 
  Test begin scope                : using System . Windows . Shell ; 
  Test end scope                  : using System . Windows . Shell ; 
  Test preproc statement:         : using System . Windows . Shell ; 
  Test namespace definition:      : using System . Windows . Shell ; 
  Test class definition:          : using System . Windows . Shell ; 
  Test struct definition:         : using System . Windows . Shell ; 
  Test C# function definition:    : using System . Windows . Shell ; 
  Test control definition:        : using System . Windows . Shell ; 
  Test C# declaration:            : using System . Windows . Shell ; 
  Handle C# declaration:          : using System . Windows . Shell ; 
  Test begin scope                : namespace ClientGUI { 
  handle begin scope              : namespace ClientGUI { 
--- stack size = 2 ---
  Test end scope                  : namespace ClientGUI { 
  namespace def  : namespace ClientGUI { 
  Test preproc statement:         : namespace ClientGUI { 
  Test namespace definition:      : namespace ClientGUI { 
  Handle namespace definition:    : namespace ClientGUI { 
  Test begin scope                : public partial class App : System . Windows . Application { 
  handle begin scope              : public partial class App : System . Windows . Application { 
--- stack size = 3 ---
  Test end scope                  : public partial class App : System . Windows . Application { 
  class def      : public partial class App : System . Windows . Application { 
  Test preproc statement:         : public partial class App : System . Windows . Application { 
  Test namespace definition:      : public partial class App : System . Windows . Application { 
  Test class definition:          : public partial class App : System . Windows . Application { 
  Handle class definition:        : public partial class App : System . Windows . Application { 
  Test begin scope                : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  handle begin scope              : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
--- stack size = 4 ---
  Test end scope                  : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test preproc statement:         : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  function def   : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test namespace definition:      : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Preproc Stmt   : # line 5 "..\..\App.xaml" 
  Test class definition:          : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test struct definition:         : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test C# function definition:    : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  executable     : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Handle C# function definition:  : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Preproc Stmt   : # line default 
  Test begin scope                : # line 5 "..\..\App.xaml" 
  Preproc Stmt   : # line hidden 
  Test end scope                  : # line 5 "..\..\App.xaml" 
--- stack size = 3 ---
  Test preproc statement:         : # line 5 "..\..\App.xaml" 
  Handle preproc statement:       : # line 5 "..\..\App.xaml" 
  Test begin scope                : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Test end scope                  : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Test preproc statement:         : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Test namespace definition:      : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Test class definition:          : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Test struct definition:         : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Test C# function definition:    : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Test control definition:        : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Test C# declaration:            : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Test C# executable:             : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Handle C# executable:           : 
    this . StartupUri = new System . Uri ( "MainWindow.xaml" , System . UriKind . Relative ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    [ System . STAThreadAttribute ( ) ] [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public static void Main ( ) { 
  handle begin scope              : 
    [ System . STAThreadAttribute ( ) ] [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public static void Main ( ) { 
--- stack size = 4 ---
  Test end scope                  : 
    [ System . STAThreadAttribute ( ) ] [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public static void Main ( ) { 
  Test preproc statement:         : 
    [ System . STAThreadAttribute ( ) ] [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public static void Main ( ) { 
  Test namespace definition:      : 
    [ System . STAThreadAttribute ( ) ] [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public static void Main ( ) { 
  function def   : 
    [ System . STAThreadAttribute ( ) ] [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public static void Main ( ) { 
  Test class definition:          : 
    [ System . STAThreadAttribute ( ) ] [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public static void Main ( ) { 
  executable     : ClientGUI . App app = new ClientGUI . App ( ) ; 
  Test struct definition:         : 
    [ System . STAThreadAttribute ( ) ] [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public static void Main ( ) { 
  executable     : app . InitializeComponent ( ) ; 
  Test C# function definition:    : 
    [ System . STAThreadAttribute ( ) ] [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public static void Main ( ) { 
  executable     : app . Run ( ) ; 
  Handle C# function definition:  : 
    [ System . STAThreadAttribute ( ) ] [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public static void Main ( ) { 
--- stack size = 3 ---
  Test begin scope                : ClientGUI . App app = new ClientGUI . App ( ) ; 
--- stack size = 2 ---
  Test end scope                  : ClientGUI . App app = new ClientGUI . App ( ) ; 
--- stack size = 1 ---
  Test preproc statement:         : ClientGUI . App app = new ClientGUI . App ( ) ; 
  Test namespace definition:      : ClientGUI . App app = new ClientGUI . App ( ) ; 
  Test class definition:          : ClientGUI . App app = new ClientGUI . App ( ) ; 
  Preproc Stmt   : 
    # pragma checksum "..\..\CodePopUp.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "23392899A356CC8DBEF0182475262A26" 
  Test struct definition:         : ClientGUI . App app = new ClientGUI . App ( ) ; 
  using declar   : using ClientGUI ; 
  Test C# function definition:    : ClientGUI . App app = new ClientGUI . App ( ) ; 
  using declar   : using System ; 
  Test control definition:        : ClientGUI . App app = new ClientGUI . App ( ) ; 
  Test C# declaration:            : ClientGUI . App app = new ClientGUI . App ( ) ; 
  using declar   : using System . Diagnostics ; 
  Test C# executable:             : ClientGUI . App app = new ClientGUI . App ( ) ; 
  using declar   : using System . Windows ; 
  Handle C# executable:           : ClientGUI . App app = new ClientGUI . App ( ) ; 
  Test begin scope                : app . InitializeComponent ( ) ; 
  using declar   : using System . Windows . Automation ; 
  Test end scope                  : app . InitializeComponent ( ) ; 
  Test preproc statement:         : app . InitializeComponent ( ) ; 
  Test namespace definition:      : app . InitializeComponent ( ) ; 
  using declar   : using System . Windows . Controls ; 
  Test class definition:          : app . InitializeComponent ( ) ; 
  Test struct definition:         : app . InitializeComponent ( ) ; 
  Test C# function definition:    : app . InitializeComponent ( ) ; 
  using declar   : using System . Windows . Controls . Primitives ; 
  Test control definition:        : app . InitializeComponent ( ) ; 
  Test C# declaration:            : app . InitializeComponent ( ) ; 
  using declar   : using System . Windows . Data ; 
  Test C# executable:             : app . InitializeComponent ( ) ; 
  Handle C# executable:           : app . InitializeComponent ( ) ; 
  Test begin scope                : app . Run ( ) ; 
  using declar   : using System . Windows . Documents ; 
  Test end scope                  : app . Run ( ) ; 
  Test preproc statement:         : app . Run ( ) ; 
  Test namespace definition:      : app . Run ( ) ; 
  using declar   : using System . Windows . Ink ; 
  Test class definition:          : app . Run ( ) ; 
  Test struct definition:         : app . Run ( ) ; 
  Test C# function definition:    : app . Run ( ) ; 
  using declar   : using System . Windows . Input ; 
  Test control definition:        : app . Run ( ) ; 
  Test C# declaration:            : app . Run ( ) ; 
  Test C# executable:             : app . Run ( ) ; 
  Handle C# executable:           : app . Run ( ) ; 
  using declar   : using System . Windows . Markup ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System . Windows . Media ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    # pragma checksum "..\..\CodePopUp.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "23392899A356CC8DBEF0182475262A26" 
  using declar   : using System . Windows . Media . Animation ; 
  Test end scope                  : 
    # pragma checksum "..\..\CodePopUp.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "23392899A356CC8DBEF0182475262A26" 
  Test preproc statement:         : 
    # pragma checksum "..\..\CodePopUp.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "23392899A356CC8DBEF0182475262A26" 
  Handle preproc statement:       : 
    # pragma checksum "..\..\CodePopUp.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "23392899A356CC8DBEF0182475262A26" 
  using declar   : using System . Windows . Media . Effects ; 
  Test begin scope                : using ClientGUI ; 
  Test end scope                  : using ClientGUI ; 
  Test preproc statement:         : using ClientGUI ; 
  using declar   : using System . Windows . Media . Imaging ; 
  Test namespace definition:      : using ClientGUI ; 
  Test class definition:          : using ClientGUI ; 
  Test struct definition:         : using ClientGUI ; 
  Test C# function definition:    : using ClientGUI ; 
  Test control definition:        : using ClientGUI ; 
  Test C# declaration:            : using ClientGUI ; 
  Handle C# declaration:          : using ClientGUI ; 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  using declar   : using System . Windows . Media . Media3D ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  using declar   : using System . Windows . Media . TextFormatting ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Diagnostics ; 
  Test end scope                  : using System . Diagnostics ; 
  using declar   : using System . Windows . Navigation ; 
  Test preproc statement:         : using System . Diagnostics ; 
  Test namespace definition:      : using System . Diagnostics ; 
  Test class definition:          : using System . Diagnostics ; 
  using declar   : using System . Windows . Shapes ; 
  Test struct definition:         : using System . Diagnostics ; 
  Test C# function definition:    : using System . Diagnostics ; 
  Test control definition:        : using System . Diagnostics ; 
  Test C# declaration:            : using System . Diagnostics ; 
  using declar   : using System . Windows . Shell ; 
  Handle C# declaration:          : using System . Diagnostics ; 
  Test begin scope                : using System . Windows ; 
  Test end scope                  : using System . Windows ; 
  Test preproc statement:         : using System . Windows ; 
  Test namespace definition:      : using System . Windows ; 
  Test class definition:          : using System . Windows ; 
  Test struct definition:         : using System . Windows ; 
  Test C# function definition:    : using System . Windows ; 
  Test control definition:        : using System . Windows ; 
  Test C# declaration:            : using System . Windows ; 
  Handle C# declaration:          : using System . Windows ; 
  Test begin scope                : using System . Windows . Automation ; 
  Test end scope                  : using System . Windows . Automation ; 
  Test preproc statement:         : using System . Windows . Automation ; 
  Test namespace definition:      : using System . Windows . Automation ; 
  Test class definition:          : using System . Windows . Automation ; 
  Test struct definition:         : using System . Windows . Automation ; 
  Test C# function definition:    : using System . Windows . Automation ; 
  Test control definition:        : using System . Windows . Automation ; 
  Test C# declaration:            : using System . Windows . Automation ; 
  Handle C# declaration:          : using System . Windows . Automation ; 
  Test begin scope                : using System . Windows . Controls ; 
  Test end scope                  : using System . Windows . Controls ; 
  Test preproc statement:         : using System . Windows . Controls ; 
  Test namespace definition:      : using System . Windows . Controls ; 
  Test class definition:          : using System . Windows . Controls ; 
  Test struct definition:         : using System . Windows . Controls ; 
  Test C# function definition:    : using System . Windows . Controls ; 
  Test control definition:        : using System . Windows . Controls ; 
  Test C# declaration:            : using System . Windows . Controls ; 
  Handle C# declaration:          : using System . Windows . Controls ; 
  Test begin scope                : using System . Windows . Controls . Primitives ; 
  Test end scope                  : using System . Windows . Controls . Primitives ; 
  Test preproc statement:         : using System . Windows . Controls . Primitives ; 
  Test namespace definition:      : using System . Windows . Controls . Primitives ; 
  Test class definition:          : using System . Windows . Controls . Primitives ; 
  Test struct definition:         : using System . Windows . Controls . Primitives ; 
  Test C# function definition:    : using System . Windows . Controls . Primitives ; 
  Test control definition:        : using System . Windows . Controls . Primitives ; 
  Test C# declaration:            : using System . Windows . Controls . Primitives ; 
  Handle C# declaration:          : using System . Windows . Controls . Primitives ; 
  Test begin scope                : using System . Windows . Data ; 
  Test end scope                  : using System . Windows . Data ; 
  Test preproc statement:         : using System . Windows . Data ; 
  Test namespace definition:      : using System . Windows . Data ; 
  Test class definition:          : using System . Windows . Data ; 
  Test struct definition:         : using System . Windows . Data ; 
  Test C# function definition:    : using System . Windows . Data ; 
  Test control definition:        : using System . Windows . Data ; 
  Test C# declaration:            : using System . Windows . Data ; 
  Handle C# declaration:          : using System . Windows . Data ; 
  Test begin scope                : using System . Windows . Documents ; 
  Test end scope                  : using System . Windows . Documents ; 
  Test preproc statement:         : using System . Windows . Documents ; 
  Test namespace definition:      : using System . Windows . Documents ; 
  Test class definition:          : using System . Windows . Documents ; 
  Test struct definition:         : using System . Windows . Documents ; 
  Test C# function definition:    : using System . Windows . Documents ; 
  Test control definition:        : using System . Windows . Documents ; 
  Test C# declaration:            : using System . Windows . Documents ; 
  Handle C# declaration:          : using System . Windows . Documents ; 
  Test begin scope                : using System . Windows . Ink ; 
  Test end scope                  : using System . Windows . Ink ; 
  Test preproc statement:         : using System . Windows . Ink ; 
  Test namespace definition:      : using System . Windows . Ink ; 
  Test class definition:          : using System . Windows . Ink ; 
  Test struct definition:         : using System . Windows . Ink ; 
  Test C# function definition:    : using System . Windows . Ink ; 
  Test control definition:        : using System . Windows . Ink ; 
  Test C# declaration:            : using System . Windows . Ink ; 
  Handle C# declaration:          : using System . Windows . Ink ; 
  Test begin scope                : using System . Windows . Input ; 
  Test end scope                  : using System . Windows . Input ; 
  Test preproc statement:         : using System . Windows . Input ; 
  Test namespace definition:      : using System . Windows . Input ; 
  Test class definition:          : using System . Windows . Input ; 
  Test struct definition:         : using System . Windows . Input ; 
  Test C# function definition:    : using System . Windows . Input ; 
  Test control definition:        : using System . Windows . Input ; 
  Test C# declaration:            : using System . Windows . Input ; 
  Handle C# declaration:          : using System . Windows . Input ; 
  Test begin scope                : using System . Windows . Markup ; 
  Test end scope                  : using System . Windows . Markup ; 
  Test preproc statement:         : using System . Windows . Markup ; 
  Test namespace definition:      : using System . Windows . Markup ; 
  Test class definition:          : using System . Windows . Markup ; 
  Test struct definition:         : using System . Windows . Markup ; 
  Test C# function definition:    : using System . Windows . Markup ; 
  Test control definition:        : using System . Windows . Markup ; 
  Test C# declaration:            : using System . Windows . Markup ; 
  Handle C# declaration:          : using System . Windows . Markup ; 
  Test begin scope                : using System . Windows . Media ; 
  Test end scope                  : using System . Windows . Media ; 
  Test preproc statement:         : using System . Windows . Media ; 
  Test namespace definition:      : using System . Windows . Media ; 
  Test class definition:          : using System . Windows . Media ; 
  Test struct definition:         : using System . Windows . Media ; 
  Test C# function definition:    : using System . Windows . Media ; 
  Test control definition:        : using System . Windows . Media ; 
  Test C# declaration:            : using System . Windows . Media ; 
  Handle C# declaration:          : using System . Windows . Media ; 
  Test begin scope                : using System . Windows . Media . Animation ; 
  Test end scope                  : using System . Windows . Media . Animation ; 
  Test preproc statement:         : using System . Windows . Media . Animation ; 
  Test namespace definition:      : using System . Windows . Media . Animation ; 
  Test class definition:          : using System . Windows . Media . Animation ; 
  Test struct definition:         : using System . Windows . Media . Animation ; 
  Test C# function definition:    : using System . Windows . Media . Animation ; 
  Test control definition:        : using System . Windows . Media . Animation ; 
  Test C# declaration:            : using System . Windows . Media . Animation ; 
  Handle C# declaration:          : using System . Windows . Media . Animation ; 
  Test begin scope                : using System . Windows . Media . Effects ; 
  Test end scope                  : using System . Windows . Media . Effects ; 
  Test preproc statement:         : using System . Windows . Media . Effects ; 
  Test namespace definition:      : using System . Windows . Media . Effects ; 
  Test class definition:          : using System . Windows . Media . Effects ; 
  Test struct definition:         : using System . Windows . Media . Effects ; 
  Test C# function definition:    : using System . Windows . Media . Effects ; 
  Test control definition:        : using System . Windows . Media . Effects ; 
  Test C# declaration:            : using System . Windows . Media . Effects ; 
  Handle C# declaration:          : using System . Windows . Media . Effects ; 
  Test begin scope                : using System . Windows . Media . Imaging ; 
  Test end scope                  : using System . Windows . Media . Imaging ; 
  Test preproc statement:         : using System . Windows . Media . Imaging ; 
  Test namespace definition:      : using System . Windows . Media . Imaging ; 
  Test class definition:          : using System . Windows . Media . Imaging ; 
  Test struct definition:         : using System . Windows . Media . Imaging ; 
  Test C# function definition:    : using System . Windows . Media . Imaging ; 
  Test control definition:        : using System . Windows . Media . Imaging ; 
  Test C# declaration:            : using System . Windows . Media . Imaging ; 
  Handle C# declaration:          : using System . Windows . Media . Imaging ; 
  Test begin scope                : using System . Windows . Media . Media3D ; 
  Test end scope                  : using System . Windows . Media . Media3D ; 
  Test preproc statement:         : using System . Windows . Media . Media3D ; 
  Test namespace definition:      : using System . Windows . Media . Media3D ; 
  Test class definition:          : using System . Windows . Media . Media3D ; 
  Test struct definition:         : using System . Windows . Media . Media3D ; 
  Test C# function definition:    : using System . Windows . Media . Media3D ; 
  Test control definition:        : using System . Windows . Media . Media3D ; 
  Test C# declaration:            : using System . Windows . Media . Media3D ; 
  Handle C# declaration:          : using System . Windows . Media . Media3D ; 
  Test begin scope                : using System . Windows . Media . TextFormatting ; 
  Test end scope                  : using System . Windows . Media . TextFormatting ; 
  Test preproc statement:         : using System . Windows . Media . TextFormatting ; 
  Test namespace definition:      : using System . Windows . Media . TextFormatting ; 
  Test class definition:          : using System . Windows . Media . TextFormatting ; 
  Test struct definition:         : using System . Windows . Media . TextFormatting ; 
  Test C# function definition:    : using System . Windows . Media . TextFormatting ; 
  Test control definition:        : using System . Windows . Media . TextFormatting ; 
  Test C# declaration:            : using System . Windows . Media . TextFormatting ; 
  Handle C# declaration:          : using System . Windows . Media . TextFormatting ; 
  Test begin scope                : using System . Windows . Navigation ; 
  Test end scope                  : using System . Windows . Navigation ; 
  Test preproc statement:         : using System . Windows . Navigation ; 
  Test namespace definition:      : using System . Windows . Navigation ; 
  Test class definition:          : using System . Windows . Navigation ; 
  Test struct definition:         : using System . Windows . Navigation ; 
  Test C# function definition:    : using System . Windows . Navigation ; 
  Test control definition:        : using System . Windows . Navigation ; 
  Test C# declaration:            : using System . Windows . Navigation ; 
  Handle C# declaration:          : using System . Windows . Navigation ; 
  Test begin scope                : using System . Windows . Shapes ; 
  Test end scope                  : using System . Windows . Shapes ; 
  Test preproc statement:         : using System . Windows . Shapes ; 
  Test namespace definition:      : using System . Windows . Shapes ; 
  Test class definition:          : using System . Windows . Shapes ; 
  Test struct definition:         : using System . Windows . Shapes ; 
  Test C# function definition:    : using System . Windows . Shapes ; 
  Test control definition:        : using System . Windows . Shapes ; 
  Test C# declaration:            : using System . Windows . Shapes ; 
  Handle C# declaration:          : using System . Windows . Shapes ; 
  Test begin scope                : using System . Windows . Shell ; 
  Test end scope                  : using System . Windows . Shell ; 
  Test preproc statement:         : using System . Windows . Shell ; 
  Test namespace definition:      : using System . Windows . Shell ; 
  Test class definition:          : using System . Windows . Shell ; 
  Test struct definition:         : using System . Windows . Shell ; 
  Test C# function definition:    : using System . Windows . Shell ; 
  Test control definition:        : using System . Windows . Shell ; 
  Test C# declaration:            : using System . Windows . Shell ; 
  Handle C# declaration:          : using System . Windows . Shell ; 
  Test begin scope                : namespace ClientGUI { 
  handle begin scope              : namespace ClientGUI { 
--- stack size = 2 ---
  Test end scope                  : namespace ClientGUI { 
  namespace def  : namespace ClientGUI { 
  Test preproc statement:         : namespace ClientGUI { 
  Test namespace definition:      : namespace ClientGUI { 
  Handle namespace definition:    : namespace ClientGUI { 
  Test begin scope                : 
    public partial class CodePopUp : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  handle begin scope              : 
    public partial class CodePopUp : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
--- stack size = 3 ---
  Test end scope                  : 
    public partial class CodePopUp : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  class def      : 
    public partial class CodePopUp : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  Test preproc statement:         : 
    public partial class CodePopUp : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  Preproc Stmt   : # line 12 "..\..\CodePopUp.xaml" 
  Test namespace definition:      : 
    public partial class CodePopUp : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  Test class definition:          : 
    public partial class CodePopUp : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  Handle class definition:        : 
    public partial class CodePopUp : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  Test begin scope                : # line 12 "..\..\CodePopUp.xaml" 
  Test end scope                  : # line 12 "..\..\CodePopUp.xaml" 
  Test preproc statement:         : # line 12 "..\..\CodePopUp.xaml" 
  Handle preproc statement:       : # line 12 "..\..\CodePopUp.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  Preproc Stmt   : # line default 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  Preproc Stmt   : # line hidden 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  data declar    : private bool _contentLoaded ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : private bool _contentLoaded ; 
  Test end scope                  : private bool _contentLoaded ; 
  Test preproc statement:         : private bool _contentLoaded ; 
  Test namespace definition:      : private bool _contentLoaded ; 
  Test class definition:          : private bool _contentLoaded ; 
  Test struct definition:         : private bool _contentLoaded ; 
  Test C# function definition:    : private bool _contentLoaded ; 
  Test control definition:        : private bool _contentLoaded ; 
  Test C# declaration:            : private bool _contentLoaded ; 
  Handle C# declaration:          : private bool _contentLoaded ; 
  Test begin scope                : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  handle begin scope              : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
--- stack size = 4 ---
  Test end scope                  : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test preproc statement:         : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test namespace definition:      : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  function def   : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test class definition:          : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test struct definition:         : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test C# function definition:    : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Handle C# function definition:  : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test begin scope                : if ( _contentLoaded ) { 
  handle begin scope              : if ( _contentLoaded ) { 
--- stack size = 5 ---
  Test end scope                  : if ( _contentLoaded ) { 
  Test preproc statement:         : if ( _contentLoaded ) { 
  Test namespace definition:      : if ( _contentLoaded ) { 
  control def    : if ( _contentLoaded ) { 
  Test class definition:          : if ( _contentLoaded ) { 
  default:       : return ; 
  Test struct definition:         : if ( _contentLoaded ) { 
--- stack size = 4 ---
  Test C# function definition:    : if ( _contentLoaded ) { 
  Test control definition:        : if ( _contentLoaded ) { 
  Handle control definition:      : if ( _contentLoaded ) { 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  executable     : _contentLoaded = true ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : _contentLoaded = true ; 
  Test end scope                  : _contentLoaded = true ; 
  Test preproc statement:         : _contentLoaded = true ; 
  Test namespace definition:      : _contentLoaded = true ; 
  Test class definition:          : _contentLoaded = true ; 
  Test struct definition:         : _contentLoaded = true ; 
  Test C# function definition:    : _contentLoaded = true ; 
  Test control definition:        : _contentLoaded = true ; 
  executable     : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  Test C# declaration:            : _contentLoaded = true ; 
  Preproc Stmt   : # line 1 "..\..\CodePopUp.xaml" 
  Test C# executable:             : _contentLoaded = true ; 
  Handle C# executable:           : _contentLoaded = true ; 
  Test begin scope                : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  Test end scope                  : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  Test preproc statement:         : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  Test namespace definition:      : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  Test class definition:          : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  executable     : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test struct definition:         : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  Preproc Stmt   : # line default 
  Test C# function definition:    : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  Preproc Stmt   : # line hidden 
  Test control definition:        : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
--- stack size = 3 ---
  Test C# declaration:            : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  Test C# executable:             : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  Handle C# executable:           : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  Test begin scope                : # line 1 "..\..\CodePopUp.xaml" 
  Test end scope                  : # line 1 "..\..\CodePopUp.xaml" 
  Test preproc statement:         : # line 1 "..\..\CodePopUp.xaml" 
  Handle preproc statement:       : # line 1 "..\..\CodePopUp.xaml" 
  Test begin scope                : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test end scope                  : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test preproc statement:         : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test namespace definition:      : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test class definition:          : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test struct definition:         : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test C# function definition:    : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test control definition:        : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test C# declaration:            : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test C# executable:             : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Handle C# executable:           : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  handle begin scope              : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
--- stack size = 4 ---
  Test end scope                  : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test preproc statement:         : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  function def   : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test namespace definition:      : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test class definition:          : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test struct definition:         : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test C# function definition:    : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Handle C# function definition:  : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test begin scope                : switch ( connectionId ) { 
  handle begin scope              : switch ( connectionId ) { 
--- stack size = 5 ---
  Test end scope                  : switch ( connectionId ) { 
  Test preproc statement:         : switch ( connectionId ) { 
  control def    : switch ( connectionId ) { 
  Test namespace definition:      : switch ( connectionId ) { 
  Test class definition:          : switch ( connectionId ) { 
  Test struct definition:         : switch ( connectionId ) { 
  Test C# function definition:    : switch ( connectionId ) { 
  Test control definition:        : switch ( connectionId ) { 
  Handle control definition:      : switch ( connectionId ) { 
  Test begin scope                : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  Test end scope                  : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  Test preproc statement:         : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  Test namespace definition:      : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  Test class definition:          : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  Test struct definition:         : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  Test C# function definition:    : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  Test control definition:        : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  executable     : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  Test C# declaration:            : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  default:       : return ; 
  Test C# executable:             : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
--- stack size = 4 ---
  Handle C# executable:           : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  executable     : this . _contentLoaded = true ; 
  Test struct definition:         : return ; 
--- stack size = 3 ---
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
--- stack size = 2 ---
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
--- stack size = 1 ---
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Preproc Stmt   : 
    # pragma checksum "..\..\CodePopUp.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "23392899A356CC8DBEF0182475262A26" 
  Test begin scope                : this . _contentLoaded = true ; 
  Test end scope                  : this . _contentLoaded = true ; 
  using declar   : using ClientGUI ; 
  Test preproc statement:         : this . _contentLoaded = true ; 
  Test namespace definition:      : this . _contentLoaded = true ; 
  Test class definition:          : this . _contentLoaded = true ; 
  using declar   : using System ; 
  Test struct definition:         : this . _contentLoaded = true ; 
  Test C# function definition:    : this . _contentLoaded = true ; 
  using declar   : using System . Diagnostics ; 
  Test control definition:        : this . _contentLoaded = true ; 
  Test C# declaration:            : this . _contentLoaded = true ; 
  Test C# executable:             : this . _contentLoaded = true ; 
  using declar   : using System . Windows ; 
  Handle C# executable:           : this . _contentLoaded = true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  using declar   : using System . Windows . Automation ; 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    # pragma checksum "..\..\CodePopUp.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "23392899A356CC8DBEF0182475262A26" 
  using declar   : using System . Windows . Controls ; 
  Test end scope                  : 
    # pragma checksum "..\..\CodePopUp.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "23392899A356CC8DBEF0182475262A26" 
  Test preproc statement:         : 
    # pragma checksum "..\..\CodePopUp.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "23392899A356CC8DBEF0182475262A26" 
  using declar   : using System . Windows . Controls . Primitives ; 
  Handle preproc statement:       : 
    # pragma checksum "..\..\CodePopUp.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "23392899A356CC8DBEF0182475262A26" 
  using declar   : using System . Windows . Data ; 
  Test begin scope                : using ClientGUI ; 
  Test end scope                  : using ClientGUI ; 
  Test preproc statement:         : using ClientGUI ; 
  Test namespace definition:      : using ClientGUI ; 
  using declar   : using System . Windows . Documents ; 
  Test class definition:          : using ClientGUI ; 
  Test struct definition:         : using ClientGUI ; 
  Test C# function definition:    : using ClientGUI ; 
  Test control definition:        : using ClientGUI ; 
  using declar   : using System . Windows . Ink ; 
  Test C# declaration:            : using ClientGUI ; 
  Handle C# declaration:          : using ClientGUI ; 
  Test begin scope                : using System ; 
  using declar   : using System . Windows . Input ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  using declar   : using System . Windows . Markup ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  using declar   : using System . Windows . Media ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Diagnostics ; 
  Test end scope                  : using System . Diagnostics ; 
  Test preproc statement:         : using System . Diagnostics ; 
  using declar   : using System . Windows . Media . Animation ; 
  Test namespace definition:      : using System . Diagnostics ; 
  Test class definition:          : using System . Diagnostics ; 
  Test struct definition:         : using System . Diagnostics ; 
  using declar   : using System . Windows . Media . Effects ; 
  Test C# function definition:    : using System . Diagnostics ; 
  Test control definition:        : using System . Diagnostics ; 
  Test C# declaration:            : using System . Diagnostics ; 
  Handle C# declaration:          : using System . Diagnostics ; 
  using declar   : using System . Windows . Media . Imaging ; 
  Test begin scope                : using System . Windows ; 
  Test end scope                  : using System . Windows ; 
  Test preproc statement:         : using System . Windows ; 
  Test namespace definition:      : using System . Windows ; 
  using declar   : using System . Windows . Media . Media3D ; 
  Test class definition:          : using System . Windows ; 
  Test struct definition:         : using System . Windows ; 
  Test C# function definition:    : using System . Windows ; 
  using declar   : using System . Windows . Media . TextFormatting ; 
  Test control definition:        : using System . Windows ; 
  Test C# declaration:            : using System . Windows ; 
  Handle C# declaration:          : using System . Windows ; 
  using declar   : using System . Windows . Navigation ; 
  Test begin scope                : using System . Windows . Automation ; 
  Test end scope                  : using System . Windows . Automation ; 
  using declar   : using System . Windows . Shapes ; 
  Test preproc statement:         : using System . Windows . Automation ; 
  Test namespace definition:      : using System . Windows . Automation ; 
  Test class definition:          : using System . Windows . Automation ; 
  using declar   : using System . Windows . Shell ; 
  Test struct definition:         : using System . Windows . Automation ; 
  Test C# function definition:    : using System . Windows . Automation ; 
  Test control definition:        : using System . Windows . Automation ; 
  Test C# declaration:            : using System . Windows . Automation ; 
  Handle C# declaration:          : using System . Windows . Automation ; 
  Test begin scope                : using System . Windows . Controls ; 
  Test end scope                  : using System . Windows . Controls ; 
  Test preproc statement:         : using System . Windows . Controls ; 
  Test namespace definition:      : using System . Windows . Controls ; 
  Test class definition:          : using System . Windows . Controls ; 
  Test struct definition:         : using System . Windows . Controls ; 
  Test C# function definition:    : using System . Windows . Controls ; 
  Test control definition:        : using System . Windows . Controls ; 
  Test C# declaration:            : using System . Windows . Controls ; 
  Handle C# declaration:          : using System . Windows . Controls ; 
  Test begin scope                : using System . Windows . Controls . Primitives ; 
  Test end scope                  : using System . Windows . Controls . Primitives ; 
  Test preproc statement:         : using System . Windows . Controls . Primitives ; 
  Test namespace definition:      : using System . Windows . Controls . Primitives ; 
  Test class definition:          : using System . Windows . Controls . Primitives ; 
  Test struct definition:         : using System . Windows . Controls . Primitives ; 
  Test C# function definition:    : using System . Windows . Controls . Primitives ; 
  Test control definition:        : using System . Windows . Controls . Primitives ; 
  Test C# declaration:            : using System . Windows . Controls . Primitives ; 
  Handle C# declaration:          : using System . Windows . Controls . Primitives ; 
  Test begin scope                : using System . Windows . Data ; 
  Test end scope                  : using System . Windows . Data ; 
  Test preproc statement:         : using System . Windows . Data ; 
  Test namespace definition:      : using System . Windows . Data ; 
  Test class definition:          : using System . Windows . Data ; 
  Test struct definition:         : using System . Windows . Data ; 
  Test C# function definition:    : using System . Windows . Data ; 
  Test control definition:        : using System . Windows . Data ; 
  Test C# declaration:            : using System . Windows . Data ; 
  Handle C# declaration:          : using System . Windows . Data ; 
  Test begin scope                : using System . Windows . Documents ; 
  Test end scope                  : using System . Windows . Documents ; 
  Test preproc statement:         : using System . Windows . Documents ; 
  Test namespace definition:      : using System . Windows . Documents ; 
  Test class definition:          : using System . Windows . Documents ; 
  Test struct definition:         : using System . Windows . Documents ; 
  Test C# function definition:    : using System . Windows . Documents ; 
  Test control definition:        : using System . Windows . Documents ; 
  Test C# declaration:            : using System . Windows . Documents ; 
  Handle C# declaration:          : using System . Windows . Documents ; 
  Test begin scope                : using System . Windows . Ink ; 
  Test end scope                  : using System . Windows . Ink ; 
  Test preproc statement:         : using System . Windows . Ink ; 
  Test namespace definition:      : using System . Windows . Ink ; 
  Test class definition:          : using System . Windows . Ink ; 
  Test struct definition:         : using System . Windows . Ink ; 
  Test C# function definition:    : using System . Windows . Ink ; 
  Test control definition:        : using System . Windows . Ink ; 
  Test C# declaration:            : using System . Windows . Ink ; 
  Handle C# declaration:          : using System . Windows . Ink ; 
  Test begin scope                : using System . Windows . Input ; 
  Test end scope                  : using System . Windows . Input ; 
  Test preproc statement:         : using System . Windows . Input ; 
  Test namespace definition:      : using System . Windows . Input ; 
  Test class definition:          : using System . Windows . Input ; 
  Test struct definition:         : using System . Windows . Input ; 
  Test C# function definition:    : using System . Windows . Input ; 
  Test control definition:        : using System . Windows . Input ; 
  Test C# declaration:            : using System . Windows . Input ; 
  Handle C# declaration:          : using System . Windows . Input ; 
  Test begin scope                : using System . Windows . Markup ; 
  Test end scope                  : using System . Windows . Markup ; 
  Test preproc statement:         : using System . Windows . Markup ; 
  Test namespace definition:      : using System . Windows . Markup ; 
  Test class definition:          : using System . Windows . Markup ; 
  Test struct definition:         : using System . Windows . Markup ; 
  Test C# function definition:    : using System . Windows . Markup ; 
  Test control definition:        : using System . Windows . Markup ; 
  Test C# declaration:            : using System . Windows . Markup ; 
  Handle C# declaration:          : using System . Windows . Markup ; 
  Test begin scope                : using System . Windows . Media ; 
  Test end scope                  : using System . Windows . Media ; 
  Test preproc statement:         : using System . Windows . Media ; 
  Test namespace definition:      : using System . Windows . Media ; 
  Test class definition:          : using System . Windows . Media ; 
  Test struct definition:         : using System . Windows . Media ; 
  Test C# function definition:    : using System . Windows . Media ; 
  Test control definition:        : using System . Windows . Media ; 
  Test C# declaration:            : using System . Windows . Media ; 
  Handle C# declaration:          : using System . Windows . Media ; 
  Test begin scope                : using System . Windows . Media . Animation ; 
  Test end scope                  : using System . Windows . Media . Animation ; 
  Test preproc statement:         : using System . Windows . Media . Animation ; 
  Test namespace definition:      : using System . Windows . Media . Animation ; 
  Test class definition:          : using System . Windows . Media . Animation ; 
  Test struct definition:         : using System . Windows . Media . Animation ; 
  Test C# function definition:    : using System . Windows . Media . Animation ; 
  Test control definition:        : using System . Windows . Media . Animation ; 
  Test C# declaration:            : using System . Windows . Media . Animation ; 
  Handle C# declaration:          : using System . Windows . Media . Animation ; 
  Test begin scope                : using System . Windows . Media . Effects ; 
  Test end scope                  : using System . Windows . Media . Effects ; 
  Test preproc statement:         : using System . Windows . Media . Effects ; 
  Test namespace definition:      : using System . Windows . Media . Effects ; 
  Test class definition:          : using System . Windows . Media . Effects ; 
  Test struct definition:         : using System . Windows . Media . Effects ; 
  Test C# function definition:    : using System . Windows . Media . Effects ; 
  Test control definition:        : using System . Windows . Media . Effects ; 
  Test C# declaration:            : using System . Windows . Media . Effects ; 
  Handle C# declaration:          : using System . Windows . Media . Effects ; 
  Test begin scope                : using System . Windows . Media . Imaging ; 
  Test end scope                  : using System . Windows . Media . Imaging ; 
  Test preproc statement:         : using System . Windows . Media . Imaging ; 
  Test namespace definition:      : using System . Windows . Media . Imaging ; 
  Test class definition:          : using System . Windows . Media . Imaging ; 
  Test struct definition:         : using System . Windows . Media . Imaging ; 
  Test C# function definition:    : using System . Windows . Media . Imaging ; 
  Test control definition:        : using System . Windows . Media . Imaging ; 
  Test C# declaration:            : using System . Windows . Media . Imaging ; 
  Handle C# declaration:          : using System . Windows . Media . Imaging ; 
  Test begin scope                : using System . Windows . Media . Media3D ; 
  Test end scope                  : using System . Windows . Media . Media3D ; 
  Test preproc statement:         : using System . Windows . Media . Media3D ; 
  Test namespace definition:      : using System . Windows . Media . Media3D ; 
  Test class definition:          : using System . Windows . Media . Media3D ; 
  Test struct definition:         : using System . Windows . Media . Media3D ; 
  Test C# function definition:    : using System . Windows . Media . Media3D ; 
  Test control definition:        : using System . Windows . Media . Media3D ; 
  Test C# declaration:            : using System . Windows . Media . Media3D ; 
  Handle C# declaration:          : using System . Windows . Media . Media3D ; 
  Test begin scope                : using System . Windows . Media . TextFormatting ; 
  Test end scope                  : using System . Windows . Media . TextFormatting ; 
  Test preproc statement:         : using System . Windows . Media . TextFormatting ; 
  Test namespace definition:      : using System . Windows . Media . TextFormatting ; 
  Test class definition:          : using System . Windows . Media . TextFormatting ; 
  Test struct definition:         : using System . Windows . Media . TextFormatting ; 
  Test C# function definition:    : using System . Windows . Media . TextFormatting ; 
  Test control definition:        : using System . Windows . Media . TextFormatting ; 
  Test C# declaration:            : using System . Windows . Media . TextFormatting ; 
  Handle C# declaration:          : using System . Windows . Media . TextFormatting ; 
  Test begin scope                : using System . Windows . Navigation ; 
  Test end scope                  : using System . Windows . Navigation ; 
  Test preproc statement:         : using System . Windows . Navigation ; 
  Test namespace definition:      : using System . Windows . Navigation ; 
  Test class definition:          : using System . Windows . Navigation ; 
  Test struct definition:         : using System . Windows . Navigation ; 
  Test C# function definition:    : using System . Windows . Navigation ; 
  Test control definition:        : using System . Windows . Navigation ; 
  Test C# declaration:            : using System . Windows . Navigation ; 
  Handle C# declaration:          : using System . Windows . Navigation ; 
  Test begin scope                : using System . Windows . Shapes ; 
  Test end scope                  : using System . Windows . Shapes ; 
  Test preproc statement:         : using System . Windows . Shapes ; 
  Test namespace definition:      : using System . Windows . Shapes ; 
  Test class definition:          : using System . Windows . Shapes ; 
  Test struct definition:         : using System . Windows . Shapes ; 
  Test C# function definition:    : using System . Windows . Shapes ; 
  Test control definition:        : using System . Windows . Shapes ; 
  Test C# declaration:            : using System . Windows . Shapes ; 
  Handle C# declaration:          : using System . Windows . Shapes ; 
  Test begin scope                : using System . Windows . Shell ; 
  Test end scope                  : using System . Windows . Shell ; 
  Test preproc statement:         : using System . Windows . Shell ; 
  Test namespace definition:      : using System . Windows . Shell ; 
  Test class definition:          : using System . Windows . Shell ; 
  Test struct definition:         : using System . Windows . Shell ; 
  Test C# function definition:    : using System . Windows . Shell ; 
  Test control definition:        : using System . Windows . Shell ; 
  Test C# declaration:            : using System . Windows . Shell ; 
  Handle C# declaration:          : using System . Windows . Shell ; 
  Test begin scope                : namespace ClientGUI { 
  handle begin scope              : namespace ClientGUI { 
--- stack size = 2 ---
  Test end scope                  : namespace ClientGUI { 
  namespace def  : namespace ClientGUI { 
  Test preproc statement:         : namespace ClientGUI { 
  Test namespace definition:      : namespace ClientGUI { 
  Handle namespace definition:    : namespace ClientGUI { 
  Test begin scope                : 
    public partial class CodePopUp : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  handle begin scope              : 
    public partial class CodePopUp : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
--- stack size = 3 ---
  Test end scope                  : 
    public partial class CodePopUp : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  Test preproc statement:         : 
    public partial class CodePopUp : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  class def      : 
    public partial class CodePopUp : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  Test namespace definition:      : 
    public partial class CodePopUp : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  Preproc Stmt   : # line 12 "..\..\CodePopUp.xaml" 
  Test class definition:          : 
    public partial class CodePopUp : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  Handle class definition:        : 
    public partial class CodePopUp : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  Test begin scope                : # line 12 "..\..\CodePopUp.xaml" 
  Test end scope                  : # line 12 "..\..\CodePopUp.xaml" 
  Test preproc statement:         : # line 12 "..\..\CodePopUp.xaml" 
  Handle preproc statement:       : # line 12 "..\..\CodePopUp.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  Preproc Stmt   : # line default 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  Preproc Stmt   : # line hidden 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  data declar    : private bool _contentLoaded ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBlock codeView ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : private bool _contentLoaded ; 
  Test end scope                  : private bool _contentLoaded ; 
  Test preproc statement:         : private bool _contentLoaded ; 
  Test namespace definition:      : private bool _contentLoaded ; 
  Test class definition:          : private bool _contentLoaded ; 
  Test struct definition:         : private bool _contentLoaded ; 
  Test C# function definition:    : private bool _contentLoaded ; 
  Test control definition:        : private bool _contentLoaded ; 
  Test C# declaration:            : private bool _contentLoaded ; 
  Handle C# declaration:          : private bool _contentLoaded ; 
  Test begin scope                : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  handle begin scope              : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
--- stack size = 4 ---
  Test end scope                  : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test preproc statement:         : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test namespace definition:      : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  function def   : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test class definition:          : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test struct definition:         : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test C# function definition:    : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Handle C# function definition:  : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test begin scope                : if ( _contentLoaded ) { 
  handle begin scope              : if ( _contentLoaded ) { 
--- stack size = 5 ---
  Test end scope                  : if ( _contentLoaded ) { 
  Test preproc statement:         : if ( _contentLoaded ) { 
  Test namespace definition:      : if ( _contentLoaded ) { 
  control def    : if ( _contentLoaded ) { 
  Test class definition:          : if ( _contentLoaded ) { 
  Test struct definition:         : if ( _contentLoaded ) { 
  default:       : return ; 
  Test C# function definition:    : if ( _contentLoaded ) { 
--- stack size = 4 ---
  Test control definition:        : if ( _contentLoaded ) { 
  Handle control definition:      : if ( _contentLoaded ) { 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  executable     : _contentLoaded = true ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : _contentLoaded = true ; 
  Test end scope                  : _contentLoaded = true ; 
  Test preproc statement:         : _contentLoaded = true ; 
  Test namespace definition:      : _contentLoaded = true ; 
  executable     : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  Test class definition:          : _contentLoaded = true ; 
  Preproc Stmt   : # line 1 "..\..\CodePopUp.xaml" 
  Test struct definition:         : _contentLoaded = true ; 
  Test C# function definition:    : _contentLoaded = true ; 
  Test control definition:        : _contentLoaded = true ; 
  Test C# declaration:            : _contentLoaded = true ; 
  Test C# executable:             : _contentLoaded = true ; 
  Handle C# executable:           : _contentLoaded = true ; 
  Test begin scope                : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  Test end scope                  : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  executable     : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test preproc statement:         : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  Preproc Stmt   : # line default 
  Test namespace definition:      : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  Preproc Stmt   : # line hidden 
  Test class definition:          : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
--- stack size = 3 ---
  Test struct definition:         : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  Test C# function definition:    : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  Test control definition:        : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  Test C# declaration:            : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  Test C# executable:             : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  Handle C# executable:           : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/codepopup.xaml" , System . UriKind . Relative ) ; 
  Test begin scope                : # line 1 "..\..\CodePopUp.xaml" 
  Test end scope                  : # line 1 "..\..\CodePopUp.xaml" 
  Test preproc statement:         : # line 1 "..\..\CodePopUp.xaml" 
  Handle preproc statement:       : # line 1 "..\..\CodePopUp.xaml" 
  Test begin scope                : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test end scope                  : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test preproc statement:         : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test namespace definition:      : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test class definition:          : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test struct definition:         : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test C# function definition:    : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test control definition:        : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test C# declaration:            : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test C# executable:             : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Handle C# executable:           : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  handle begin scope              : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
--- stack size = 4 ---
  Test end scope                  : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test preproc statement:         : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test namespace definition:      : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  function def   : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test class definition:          : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test struct definition:         : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test C# function definition:    : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Handle C# function definition:  : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test begin scope                : switch ( connectionId ) { 
  handle begin scope              : switch ( connectionId ) { 
--- stack size = 5 ---
  Test end scope                  : switch ( connectionId ) { 
  Test preproc statement:         : switch ( connectionId ) { 
  control def    : switch ( connectionId ) { 
  Test namespace definition:      : switch ( connectionId ) { 
  Test class definition:          : switch ( connectionId ) { 
  Test struct definition:         : switch ( connectionId ) { 
  Test C# function definition:    : switch ( connectionId ) { 
  Test control definition:        : switch ( connectionId ) { 
  Handle control definition:      : switch ( connectionId ) { 
  Test begin scope                : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  Test end scope                  : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  Test preproc statement:         : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  Test namespace definition:      : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  Test class definition:          : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  Test struct definition:         : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  Test C# function definition:    : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  Test control definition:        : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  Test C# declaration:            : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  executable     : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  Test C# executable:             : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
  default:       : return ; 
  Handle C# executable:           : 
    case 1 : this . codeView = ( ( System . Windows . Controls . TextBlock ) ( target ) ) ; 
--- stack size = 4 ---
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  executable     : this . _contentLoaded = true ; 
  Test C# executable:             : return ; 
--- stack size = 3 ---
  Test default:                   : return ; 
--- stack size = 2 ---
  Handle default:                 : return ; 
--- stack size = 1 ---
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : this . _contentLoaded = true ; 
  Preproc Stmt   : 
    # pragma checksum "..\..\MainWindow.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "95DB21B878EFCDFEBBD7AFEC7D6754D5" 
  Test end scope                  : this . _contentLoaded = true ; 
  Test preproc statement:         : this . _contentLoaded = true ; 
  using declar   : using ClientGUI ; 
  Test namespace definition:      : this . _contentLoaded = true ; 
  using declar   : using System ; 
  Test class definition:          : this . _contentLoaded = true ; 
  Test struct definition:         : this . _contentLoaded = true ; 
  Test C# function definition:    : this . _contentLoaded = true ; 
  using declar   : using System . Diagnostics ; 
  Test control definition:        : this . _contentLoaded = true ; 
  using declar   : using System . Windows ; 
  Test C# declaration:            : this . _contentLoaded = true ; 
  Test C# executable:             : this . _contentLoaded = true ; 
  Handle C# executable:           : this . _contentLoaded = true ; 
  Test begin scope                : } 
  using declar   : using System . Windows . Automation ; 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    # pragma checksum "..\..\MainWindow.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "95DB21B878EFCDFEBBD7AFEC7D6754D5" 
  using declar   : using System . Windows . Controls ; 
  Test end scope                  : 
    # pragma checksum "..\..\MainWindow.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "95DB21B878EFCDFEBBD7AFEC7D6754D5" 
  using declar   : using System . Windows . Controls . Primitives ; 
  Test preproc statement:         : 
    # pragma checksum "..\..\MainWindow.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "95DB21B878EFCDFEBBD7AFEC7D6754D5" 
  using declar   : using System . Windows . Data ; 
  Handle preproc statement:       : 
    # pragma checksum "..\..\MainWindow.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "95DB21B878EFCDFEBBD7AFEC7D6754D5" 
  Test begin scope                : using ClientGUI ; 
  using declar   : using System . Windows . Documents ; 
  Test end scope                  : using ClientGUI ; 
  Test preproc statement:         : using ClientGUI ; 
  Test namespace definition:      : using ClientGUI ; 
  using declar   : using System . Windows . Ink ; 
  Test class definition:          : using ClientGUI ; 
  Test struct definition:         : using ClientGUI ; 
  Test C# function definition:    : using ClientGUI ; 
  using declar   : using System . Windows . Input ; 
  Test control definition:        : using ClientGUI ; 
  Test C# declaration:            : using ClientGUI ; 
  Handle C# declaration:          : using ClientGUI ; 
  Test begin scope                : using System ; 
  using declar   : using System . Windows . Markup ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  using declar   : using System . Windows . Media ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  using declar   : using System . Windows . Media . Animation ; 
  Test begin scope                : using System . Diagnostics ; 
  Test end scope                  : using System . Diagnostics ; 
  Test preproc statement:         : using System . Diagnostics ; 
  Test namespace definition:      : using System . Diagnostics ; 
  using declar   : using System . Windows . Media . Effects ; 
  Test class definition:          : using System . Diagnostics ; 
  Test struct definition:         : using System . Diagnostics ; 
  Test C# function definition:    : using System . Diagnostics ; 
  Test control definition:        : using System . Diagnostics ; 
  using declar   : using System . Windows . Media . Imaging ; 
  Test C# declaration:            : using System . Diagnostics ; 
  Handle C# declaration:          : using System . Diagnostics ; 
  Test begin scope                : using System . Windows ; 
  Test end scope                  : using System . Windows ; 
  using declar   : using System . Windows . Media . Media3D ; 
  Test preproc statement:         : using System . Windows ; 
  Test namespace definition:      : using System . Windows ; 
  Test class definition:          : using System . Windows ; 
  Test struct definition:         : using System . Windows ; 
  using declar   : using System . Windows . Media . TextFormatting ; 
  Test C# function definition:    : using System . Windows ; 
  Test control definition:        : using System . Windows ; 
  Test C# declaration:            : using System . Windows ; 
  using declar   : using System . Windows . Navigation ; 
  Handle C# declaration:          : using System . Windows ; 
  Test begin scope                : using System . Windows . Automation ; 
  Test end scope                  : using System . Windows . Automation ; 
  Test preproc statement:         : using System . Windows . Automation ; 
  using declar   : using System . Windows . Shapes ; 
  Test namespace definition:      : using System . Windows . Automation ; 
  Test class definition:          : using System . Windows . Automation ; 
  Test struct definition:         : using System . Windows . Automation ; 
  using declar   : using System . Windows . Shell ; 
  Test C# function definition:    : using System . Windows . Automation ; 
  Test control definition:        : using System . Windows . Automation ; 
  Test C# declaration:            : using System . Windows . Automation ; 
  Handle C# declaration:          : using System . Windows . Automation ; 
  Test begin scope                : using System . Windows . Controls ; 
  Test end scope                  : using System . Windows . Controls ; 
  Test preproc statement:         : using System . Windows . Controls ; 
  Test namespace definition:      : using System . Windows . Controls ; 
  Test class definition:          : using System . Windows . Controls ; 
  Test struct definition:         : using System . Windows . Controls ; 
  Test C# function definition:    : using System . Windows . Controls ; 
  Test control definition:        : using System . Windows . Controls ; 
  Test C# declaration:            : using System . Windows . Controls ; 
  Handle C# declaration:          : using System . Windows . Controls ; 
  Test begin scope                : using System . Windows . Controls . Primitives ; 
  Test end scope                  : using System . Windows . Controls . Primitives ; 
  Test preproc statement:         : using System . Windows . Controls . Primitives ; 
  Test namespace definition:      : using System . Windows . Controls . Primitives ; 
  Test class definition:          : using System . Windows . Controls . Primitives ; 
  Test struct definition:         : using System . Windows . Controls . Primitives ; 
  Test C# function definition:    : using System . Windows . Controls . Primitives ; 
  Test control definition:        : using System . Windows . Controls . Primitives ; 
  Test C# declaration:            : using System . Windows . Controls . Primitives ; 
  Handle C# declaration:          : using System . Windows . Controls . Primitives ; 
  Test begin scope                : using System . Windows . Data ; 
  Test end scope                  : using System . Windows . Data ; 
  Test preproc statement:         : using System . Windows . Data ; 
  Test namespace definition:      : using System . Windows . Data ; 
  Test class definition:          : using System . Windows . Data ; 
  Test struct definition:         : using System . Windows . Data ; 
  Test C# function definition:    : using System . Windows . Data ; 
  Test control definition:        : using System . Windows . Data ; 
  Test C# declaration:            : using System . Windows . Data ; 
  Handle C# declaration:          : using System . Windows . Data ; 
  Test begin scope                : using System . Windows . Documents ; 
  Test end scope                  : using System . Windows . Documents ; 
  Test preproc statement:         : using System . Windows . Documents ; 
  Test namespace definition:      : using System . Windows . Documents ; 
  Test class definition:          : using System . Windows . Documents ; 
  Test struct definition:         : using System . Windows . Documents ; 
  Test C# function definition:    : using System . Windows . Documents ; 
  Test control definition:        : using System . Windows . Documents ; 
  Test C# declaration:            : using System . Windows . Documents ; 
  Handle C# declaration:          : using System . Windows . Documents ; 
  Test begin scope                : using System . Windows . Ink ; 
  Test end scope                  : using System . Windows . Ink ; 
  Test preproc statement:         : using System . Windows . Ink ; 
  Test namespace definition:      : using System . Windows . Ink ; 
  Test class definition:          : using System . Windows . Ink ; 
  Test struct definition:         : using System . Windows . Ink ; 
  Test C# function definition:    : using System . Windows . Ink ; 
  Test control definition:        : using System . Windows . Ink ; 
  Test C# declaration:            : using System . Windows . Ink ; 
  Handle C# declaration:          : using System . Windows . Ink ; 
  Test begin scope                : using System . Windows . Input ; 
  Test end scope                  : using System . Windows . Input ; 
  Test preproc statement:         : using System . Windows . Input ; 
  Test namespace definition:      : using System . Windows . Input ; 
  Test class definition:          : using System . Windows . Input ; 
  Test struct definition:         : using System . Windows . Input ; 
  Test C# function definition:    : using System . Windows . Input ; 
  Test control definition:        : using System . Windows . Input ; 
  Test C# declaration:            : using System . Windows . Input ; 
  Handle C# declaration:          : using System . Windows . Input ; 
  Test begin scope                : using System . Windows . Markup ; 
  Test end scope                  : using System . Windows . Markup ; 
  Test preproc statement:         : using System . Windows . Markup ; 
  Test namespace definition:      : using System . Windows . Markup ; 
  Test class definition:          : using System . Windows . Markup ; 
  Test struct definition:         : using System . Windows . Markup ; 
  Test C# function definition:    : using System . Windows . Markup ; 
  Test control definition:        : using System . Windows . Markup ; 
  Test C# declaration:            : using System . Windows . Markup ; 
  Handle C# declaration:          : using System . Windows . Markup ; 
  Test begin scope                : using System . Windows . Media ; 
  Test end scope                  : using System . Windows . Media ; 
  Test preproc statement:         : using System . Windows . Media ; 
  Test namespace definition:      : using System . Windows . Media ; 
  Test class definition:          : using System . Windows . Media ; 
  Test struct definition:         : using System . Windows . Media ; 
  Test C# function definition:    : using System . Windows . Media ; 
  Test control definition:        : using System . Windows . Media ; 
  Test C# declaration:            : using System . Windows . Media ; 
  Handle C# declaration:          : using System . Windows . Media ; 
  Test begin scope                : using System . Windows . Media . Animation ; 
  Test end scope                  : using System . Windows . Media . Animation ; 
  Test preproc statement:         : using System . Windows . Media . Animation ; 
  Test namespace definition:      : using System . Windows . Media . Animation ; 
  Test class definition:          : using System . Windows . Media . Animation ; 
  Test struct definition:         : using System . Windows . Media . Animation ; 
  Test C# function definition:    : using System . Windows . Media . Animation ; 
  Test control definition:        : using System . Windows . Media . Animation ; 
  Test C# declaration:            : using System . Windows . Media . Animation ; 
  Handle C# declaration:          : using System . Windows . Media . Animation ; 
  Test begin scope                : using System . Windows . Media . Effects ; 
  Test end scope                  : using System . Windows . Media . Effects ; 
  Test preproc statement:         : using System . Windows . Media . Effects ; 
  Test namespace definition:      : using System . Windows . Media . Effects ; 
  Test class definition:          : using System . Windows . Media . Effects ; 
  Test struct definition:         : using System . Windows . Media . Effects ; 
  Test C# function definition:    : using System . Windows . Media . Effects ; 
  Test control definition:        : using System . Windows . Media . Effects ; 
  Test C# declaration:            : using System . Windows . Media . Effects ; 
  Handle C# declaration:          : using System . Windows . Media . Effects ; 
  Test begin scope                : using System . Windows . Media . Imaging ; 
  Test end scope                  : using System . Windows . Media . Imaging ; 
  Test preproc statement:         : using System . Windows . Media . Imaging ; 
  Test namespace definition:      : using System . Windows . Media . Imaging ; 
  Test class definition:          : using System . Windows . Media . Imaging ; 
  Test struct definition:         : using System . Windows . Media . Imaging ; 
  Test C# function definition:    : using System . Windows . Media . Imaging ; 
  Test control definition:        : using System . Windows . Media . Imaging ; 
  Test C# declaration:            : using System . Windows . Media . Imaging ; 
  Handle C# declaration:          : using System . Windows . Media . Imaging ; 
  Test begin scope                : using System . Windows . Media . Media3D ; 
  Test end scope                  : using System . Windows . Media . Media3D ; 
  Test preproc statement:         : using System . Windows . Media . Media3D ; 
  Test namespace definition:      : using System . Windows . Media . Media3D ; 
  Test class definition:          : using System . Windows . Media . Media3D ; 
  Test struct definition:         : using System . Windows . Media . Media3D ; 
  Test C# function definition:    : using System . Windows . Media . Media3D ; 
  Test control definition:        : using System . Windows . Media . Media3D ; 
  Test C# declaration:            : using System . Windows . Media . Media3D ; 
  Handle C# declaration:          : using System . Windows . Media . Media3D ; 
  Test begin scope                : using System . Windows . Media . TextFormatting ; 
  Test end scope                  : using System . Windows . Media . TextFormatting ; 
  Test preproc statement:         : using System . Windows . Media . TextFormatting ; 
  Test namespace definition:      : using System . Windows . Media . TextFormatting ; 
  Test class definition:          : using System . Windows . Media . TextFormatting ; 
  Test struct definition:         : using System . Windows . Media . TextFormatting ; 
  Test C# function definition:    : using System . Windows . Media . TextFormatting ; 
  Test control definition:        : using System . Windows . Media . TextFormatting ; 
  Test C# declaration:            : using System . Windows . Media . TextFormatting ; 
  Handle C# declaration:          : using System . Windows . Media . TextFormatting ; 
  Test begin scope                : using System . Windows . Navigation ; 
  Test end scope                  : using System . Windows . Navigation ; 
  Test preproc statement:         : using System . Windows . Navigation ; 
  Test namespace definition:      : using System . Windows . Navigation ; 
  Test class definition:          : using System . Windows . Navigation ; 
  Test struct definition:         : using System . Windows . Navigation ; 
  Test C# function definition:    : using System . Windows . Navigation ; 
  Test control definition:        : using System . Windows . Navigation ; 
  Test C# declaration:            : using System . Windows . Navigation ; 
  Handle C# declaration:          : using System . Windows . Navigation ; 
  Test begin scope                : using System . Windows . Shapes ; 
  Test end scope                  : using System . Windows . Shapes ; 
  Test preproc statement:         : using System . Windows . Shapes ; 
  Test namespace definition:      : using System . Windows . Shapes ; 
  Test class definition:          : using System . Windows . Shapes ; 
  Test struct definition:         : using System . Windows . Shapes ; 
  Test C# function definition:    : using System . Windows . Shapes ; 
  Test control definition:        : using System . Windows . Shapes ; 
  Test C# declaration:            : using System . Windows . Shapes ; 
  Handle C# declaration:          : using System . Windows . Shapes ; 
  Test begin scope                : using System . Windows . Shell ; 
  Test end scope                  : using System . Windows . Shell ; 
  Test preproc statement:         : using System . Windows . Shell ; 
  Test namespace definition:      : using System . Windows . Shell ; 
  Test class definition:          : using System . Windows . Shell ; 
  Test struct definition:         : using System . Windows . Shell ; 
  Test C# function definition:    : using System . Windows . Shell ; 
  Test control definition:        : using System . Windows . Shell ; 
  Test C# declaration:            : using System . Windows . Shell ; 
  Handle C# declaration:          : using System . Windows . Shell ; 
  Test begin scope                : namespace ClientGUI { 
  handle begin scope              : namespace ClientGUI { 
--- stack size = 2 ---
  Test end scope                  : namespace ClientGUI { 
  namespace def  : namespace ClientGUI { 
  Test preproc statement:         : namespace ClientGUI { 
  Test namespace definition:      : namespace ClientGUI { 
  Handle namespace definition:    : namespace ClientGUI { 
  Test begin scope                : 
    public partial class MainWindow : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  handle begin scope              : 
    public partial class MainWindow : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
--- stack size = 3 ---
  Test end scope                  : 
    public partial class MainWindow : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  class def      : 
    public partial class MainWindow : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  Test preproc statement:         : 
    public partial class MainWindow : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  Preproc Stmt   : # line 15 "..\..\MainWindow.xaml" 
  Test namespace definition:      : 
    public partial class MainWindow : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  Test class definition:          : 
    public partial class MainWindow : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  Handle class definition:        : 
    public partial class MainWindow : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  Test begin scope                : # line 15 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 15 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 15 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 15 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  Preproc Stmt   : # line default 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  Preproc Stmt   : # line hidden 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  Preproc Stmt   : # line 16 "..\..\MainWindow.xaml" 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 16 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 16 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 16 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 16 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  Preproc Stmt   : # line default 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  Preproc Stmt   : # line hidden 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  Preproc Stmt   : # line 17 "..\..\MainWindow.xaml" 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  Preproc Stmt   : # line default 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  Preproc Stmt   : # line hidden 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  Preproc Stmt   : # line 19 "..\..\MainWindow.xaml" 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 17 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 17 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 17 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 17 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  Preproc Stmt   : # line default 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  Preproc Stmt   : # line hidden 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  Preproc Stmt   : # line 20 "..\..\MainWindow.xaml" 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  Preproc Stmt   : # line default 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  Preproc Stmt   : # line hidden 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  Preproc Stmt   : # line 21 "..\..\MainWindow.xaml" 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Test begin scope                : # line 19 "..\..\MainWindow.xaml" 
  Preproc Stmt   : # line default 
  Test end scope                  : # line 19 "..\..\MainWindow.xaml" 
  Preproc Stmt   : # line hidden 
  Test preproc statement:         : # line 19 "..\..\MainWindow.xaml" 
  Preproc Stmt   : # line 22 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 19 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  Preproc Stmt   : # line default 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  Preproc Stmt   : # line hidden 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  Preproc Stmt   : # line 23 "..\..\MainWindow.xaml" 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  function declar: 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  Preproc Stmt   : # line default 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  Preproc Stmt   : # line hidden 
  Test begin scope                : # line default 
  Preproc Stmt   : # line 24 "..\..\MainWindow.xaml" 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 20 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 20 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 20 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 20 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  Preproc Stmt   : # line default 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  Preproc Stmt   : # line hidden 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  Preproc Stmt   : # line 29 "..\..\MainWindow.xaml" 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  Preproc Stmt   : # line default 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  Preproc Stmt   : # line hidden 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  Preproc Stmt   : # line 30 "..\..\MainWindow.xaml" 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 21 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 21 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 21 "..\..\MainWindow.xaml" 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Handle preproc statement:       : # line 21 "..\..\MainWindow.xaml" 
  Preproc Stmt   : # line default 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Preproc Stmt   : # line hidden 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Preproc Stmt   : # line 31 "..\..\MainWindow.xaml" 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Preproc Stmt   : # line default 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Preproc Stmt   : # line hidden 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Preproc Stmt   : # line 32 "..\..\MainWindow.xaml" 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Handle preproc statement:       : # line hidden 
  Preproc Stmt   : # line default 
  Test begin scope                : # line 22 "..\..\MainWindow.xaml" 
  Preproc Stmt   : # line hidden 
  Test end scope                  : # line 22 "..\..\MainWindow.xaml" 
  Preproc Stmt   : # line 39 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 22 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 22 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Preproc Stmt   : # line default 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Preproc Stmt   : # line hidden 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Preproc Stmt   : # line 40 "..\..\MainWindow.xaml" 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 23 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 23 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 23 "..\..\MainWindow.xaml" 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Handle preproc statement:       : # line 23 "..\..\MainWindow.xaml" 
  Preproc Stmt   : # line default 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  Preproc Stmt   : # line hidden 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  Preproc Stmt   : # line 41 "..\..\MainWindow.xaml" 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  Preproc Stmt   : # line default 
  Handle C# declaration:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  Preproc Stmt   : # line hidden 
  Test begin scope                : # line default 
  data declar    : private bool _contentLoaded ; 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 24 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 24 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 24 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 24 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 29 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 29 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 29 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 29 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 30 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 30 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 30 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 30 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 31 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 31 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 31 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 31 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 32 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 32 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 32 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 32 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 39 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 39 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 39 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 39 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 40 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 40 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 40 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 40 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 41 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 41 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 41 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 41 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : private bool _contentLoaded ; 
  Test end scope                  : private bool _contentLoaded ; 
  Test preproc statement:         : private bool _contentLoaded ; 
  Test namespace definition:      : private bool _contentLoaded ; 
  Test class definition:          : private bool _contentLoaded ; 
  Test struct definition:         : private bool _contentLoaded ; 
  Test C# function definition:    : private bool _contentLoaded ; 
  Test control definition:        : private bool _contentLoaded ; 
  Test C# declaration:            : private bool _contentLoaded ; 
  Handle C# declaration:          : private bool _contentLoaded ; 
  Test begin scope                : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  handle begin scope              : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
--- stack size = 4 ---
  Test end scope                  : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test preproc statement:         : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  function def   : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test namespace definition:      : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test class definition:          : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test struct definition:         : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test C# function definition:    : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Handle C# function definition:  : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test begin scope                : if ( _contentLoaded ) { 
  handle begin scope              : if ( _contentLoaded ) { 
--- stack size = 5 ---
  Test end scope                  : if ( _contentLoaded ) { 
  Test preproc statement:         : if ( _contentLoaded ) { 
  control def    : if ( _contentLoaded ) { 
  Test namespace definition:      : if ( _contentLoaded ) { 
  Test class definition:          : if ( _contentLoaded ) { 
  default:       : return ; 
  Test struct definition:         : if ( _contentLoaded ) { 
--- stack size = 4 ---
  Test C# function definition:    : if ( _contentLoaded ) { 
  Test control definition:        : if ( _contentLoaded ) { 
  Handle control definition:      : if ( _contentLoaded ) { 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  executable     : _contentLoaded = true ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : _contentLoaded = true ; 
  Test end scope                  : _contentLoaded = true ; 
  Test preproc statement:         : _contentLoaded = true ; 
  Test namespace definition:      : _contentLoaded = true ; 
  executable     : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  Test class definition:          : _contentLoaded = true ; 
  Preproc Stmt   : # line 1 "..\..\MainWindow.xaml" 
  Test struct definition:         : _contentLoaded = true ; 
  Test C# function definition:    : _contentLoaded = true ; 
  Test control definition:        : _contentLoaded = true ; 
  Test C# declaration:            : _contentLoaded = true ; 
  Test C# executable:             : _contentLoaded = true ; 
  Handle C# executable:           : _contentLoaded = true ; 
  Test begin scope                : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  executable     : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test end scope                  : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  Preproc Stmt   : # line default 
  Test preproc statement:         : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  Preproc Stmt   : # line hidden 
  Test namespace definition:      : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
--- stack size = 3 ---
  Test class definition:          : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  Test struct definition:         : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  Test C# function definition:    : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  Test control definition:        : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  Test C# declaration:            : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  Test C# executable:             : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  Handle C# executable:           : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  Test begin scope                : # line 1 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 1 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 1 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 1 "..\..\MainWindow.xaml" 
  Test begin scope                : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test end scope                  : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test preproc statement:         : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test namespace definition:      : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test class definition:          : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test struct definition:         : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test C# function definition:    : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test control definition:        : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test C# declaration:            : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test C# executable:             : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Handle C# executable:           : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  handle begin scope              : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
--- stack size = 4 ---
  Test end scope                  : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test preproc statement:         : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  function def   : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test namespace definition:      : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test class definition:          : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test struct definition:         : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test C# function definition:    : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Handle C# function definition:  : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test begin scope                : switch ( connectionId ) { 
  handle begin scope              : switch ( connectionId ) { 
--- stack size = 5 ---
  Test end scope                  : switch ( connectionId ) { 
  Test preproc statement:         : switch ( connectionId ) { 
  control def    : switch ( connectionId ) { 
  Test namespace definition:      : switch ( connectionId ) { 
  Test class definition:          : switch ( connectionId ) { 
  Test struct definition:         : switch ( connectionId ) { 
  Test C# function definition:    : switch ( connectionId ) { 
  Test control definition:        : switch ( connectionId ) { 
  Handle control definition:      : switch ( connectionId ) { 
  Test begin scope                : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test end scope                  : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test preproc statement:         : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test namespace definition:      : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test class definition:          : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test struct definition:         : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# function definition:    : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  executable     : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test control definition:        : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Preproc Stmt   : # line 15 "..\..\MainWindow.xaml" 
  Test C# declaration:            : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# executable:             : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Handle C# executable:           : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test begin scope                : # line 15 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 15 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 15 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 15 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  executable     : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  Test end scope                  : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  Preproc Stmt   : # line default 
  Test preproc statement:         : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  Preproc Stmt   : # line hidden 
  Test namespace definition:      : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  default:       : return ; 
  Test class definition:          : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  Test struct definition:         : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  Test C# function definition:    : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  Test control definition:        : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  Test C# declaration:            : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  Test C# executable:             : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  Handle C# executable:           : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  executable     : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test begin scope                : # line default 
  Preproc Stmt   : # line 16 "..\..\MainWindow.xaml" 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  executable     : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  Test end scope                  : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Preproc Stmt   : # line default 
  Test preproc statement:         : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Preproc Stmt   : # line hidden 
  Test namespace definition:      : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  default:       : return ; 
  Test class definition:          : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test struct definition:         : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# function definition:    : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test control definition:        : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# declaration:            : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# executable:             : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Handle C# executable:           : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  executable     : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test begin scope                : # line 16 "..\..\MainWindow.xaml" 
  Preproc Stmt   : # line 17 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 16 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 16 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 16 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  Test end scope                  : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  Test preproc statement:         : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  Test namespace definition:      : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  Test class definition:          : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  executable     : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  Test struct definition:         : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  Preproc Stmt   : # line default 
  Test C# function definition:    : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  Preproc Stmt   : # line hidden 
  Test control definition:        : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  default:       : return ; 
  Test C# declaration:            : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  Test C# executable:             : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  Handle C# executable:           : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  executable     : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test begin scope                : return ; 
  Preproc Stmt   : # line 19 "..\..\MainWindow.xaml" 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test end scope                  : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test preproc statement:         : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test namespace definition:      : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test class definition:          : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  executable     : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  Test struct definition:         : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Preproc Stmt   : # line default 
  Test C# function definition:    : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Preproc Stmt   : # line hidden 
  Test control definition:        : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  default:       : return ; 
  Test C# declaration:            : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# executable:             : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Handle C# executable:           : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test begin scope                : # line 17 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 17 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 17 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 17 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  executable     : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test end scope                  : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  Preproc Stmt   : # line 20 "..\..\MainWindow.xaml" 
  Test preproc statement:         : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  Test namespace definition:      : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  Test class definition:          : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  Test struct definition:         : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  Test C# function definition:    : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  Test control definition:        : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  Test C# declaration:            : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  executable     : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Test C# executable:             : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  Preproc Stmt   : # line default 
  Handle C# executable:           : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  Preproc Stmt   : # line hidden 
  Test begin scope                : # line default 
  default:       : return ; 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  executable     : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test default:                   : return ; 
  default:       : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test end scope                  : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test preproc statement:         : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test namespace definition:      : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test class definition:          : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test struct definition:         : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# function definition:    : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test control definition:        : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# declaration:            : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# executable:             : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  executable     : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Handle C# executable:           : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Preproc Stmt   : # line 22 "..\..\MainWindow.xaml" 
  Test begin scope                : # line 19 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 19 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 19 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 19 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  Test end scope                  : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  Test preproc statement:         : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  Test namespace definition:      : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  Test class definition:          : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  Test struct definition:         : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  Test C# function definition:    : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  Test control definition:        : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  executable     : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  Test C# declaration:            : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  Preproc Stmt   : # line default 
  Test C# executable:             : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  Preproc Stmt   : # line hidden 
  Handle C# executable:           : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  default:       : return ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test end scope                  : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test preproc statement:         : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test namespace definition:      : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  executable     : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test class definition:          : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Preproc Stmt   : # line 23 "..\..\MainWindow.xaml" 
  Test struct definition:         : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# function definition:    : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test control definition:        : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# declaration:            : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# executable:             : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Handle C# executable:           : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test begin scope                : # line 20 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 20 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 20 "..\..\MainWindow.xaml" 
  executable     : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Handle preproc statement:       : # line 20 "..\..\MainWindow.xaml" 
  Preproc Stmt   : # line default 
  Test begin scope                : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Preproc Stmt   : # line hidden 
  Test end scope                  : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  default:       : return ; 
  Test preproc statement:         : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Test namespace definition:      : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Test class definition:          : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Test struct definition:         : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Test C# function definition:    : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Test control definition:        : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Test C# declaration:            : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Test C# executable:             : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Handle C# executable:           : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  executable     : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# declaration:            : return ; 
  Preproc Stmt   : # line 24 "..\..\MainWindow.xaml" 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test end scope                  : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test preproc statement:         : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test namespace definition:      : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test class definition:          : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test struct definition:         : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# function definition:    : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test control definition:        : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  executable     : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  Test C# declaration:            : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Preproc Stmt   : # line default 
  Test C# executable:             : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Preproc Stmt   : # line hidden 
  Handle C# executable:           : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  default:       : return ; 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test end scope                  : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test preproc statement:         : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test namespace definition:      : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  executable     : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test class definition:          : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Preproc Stmt   : # line 29 "..\..\MainWindow.xaml" 
  Test struct definition:         : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# function definition:    : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test control definition:        : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# declaration:            : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# executable:             : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Handle C# executable:           : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test begin scope                : # line 22 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 22 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 22 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 22 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  executable     : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
  Test end scope                  : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  Preproc Stmt   : # line default 
  Test preproc statement:         : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  Preproc Stmt   : # line hidden 
  Test namespace definition:      : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  default:       : return ; 
  Test class definition:          : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  Test struct definition:         : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  Test C# function definition:    : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  Test control definition:        : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  Test C# declaration:            : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  executable     : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# executable:             : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  Preproc Stmt   : # line 30 "..\..\MainWindow.xaml" 
  Handle C# executable:           : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  executable     : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
  Test control definition:        : return ; 
  Preproc Stmt   : # line default 
  Test C# declaration:            : return ; 
  Preproc Stmt   : # line hidden 
  Test C# executable:             : return ; 
  default:       : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test end scope                  : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test preproc statement:         : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test namespace definition:      : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test class definition:          : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test struct definition:         : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# function definition:    : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test control definition:        : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# declaration:            : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  executable     : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# executable:             : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  default:       : return ; 
  Handle C# executable:           : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test begin scope                : # line 23 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 23 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 23 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 23 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Test end scope                  : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Test preproc statement:         : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Test namespace definition:      : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Test class definition:          : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Test struct definition:         : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  executable     : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# function definition:    : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Preproc Stmt   : # line 32 "..\..\MainWindow.xaml" 
  Test control definition:        : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Test C# declaration:            : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Test C# executable:             : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Handle C# executable:           : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  executable     : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test begin scope                : return ; 
  Preproc Stmt   : # line default 
  Test end scope                  : return ; 
  Preproc Stmt   : # line hidden 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  default:       : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test end scope                  : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test preproc statement:         : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test namespace definition:      : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test class definition:          : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test struct definition:         : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# function definition:    : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  executable     : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test control definition:        : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  default:       : return ; 
  Test C# declaration:            : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# executable:             : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Handle C# executable:           : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test begin scope                : # line 24 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 24 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 24 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 24 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  Test end scope                  : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  Test preproc statement:         : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  Test namespace definition:      : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  Test class definition:          : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  executable     : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test struct definition:         : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  Preproc Stmt   : # line 40 "..\..\MainWindow.xaml" 
  Test C# function definition:    : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  Test control definition:        : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  Test C# declaration:            : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  Test C# executable:             : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  Handle C# executable:           : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  executable     : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test begin scope                : # line hidden 
  Preproc Stmt   : # line default 
  Test end scope                  : # line hidden 
  Preproc Stmt   : # line hidden 
  Test preproc statement:         : # line hidden 
  default:       : return ; 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test end scope                  : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test preproc statement:         : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test namespace definition:      : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  executable     : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test class definition:          : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Preproc Stmt   : # line 41 "..\..\MainWindow.xaml" 
  Test struct definition:         : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# function definition:    : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test control definition:        : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# declaration:            : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# executable:             : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Handle C# executable:           : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test begin scope                : # line 29 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 29 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 29 "..\..\MainWindow.xaml" 
  executable     : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Handle preproc statement:       : # line 29 "..\..\MainWindow.xaml" 
  Preproc Stmt   : # line default 
  Test begin scope                : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
  Preproc Stmt   : # line hidden 
  Test end scope                  : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
  default:       : return ; 
  Test preproc statement:         : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
--- stack size = 4 ---
  Test namespace definition:      : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
  Test class definition:          : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
  executable     : this . _contentLoaded = true ; 
  Test struct definition:         : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
--- stack size = 3 ---
  Test C# function definition:    : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
--- stack size = 2 ---
  Test control definition:        : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
--- stack size = 1 ---
  Test C# declaration:            : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
  Test C# executable:             : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
  Preproc Stmt   : 
    # pragma checksum "..\..\MainWindow.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "95DB21B878EFCDFEBBD7AFEC7D6754D5" 
  Handle C# executable:           : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
  using declar   : using ClientGUI ; 
  Test begin scope                : # line default 
  using declar   : using System ; 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  using declar   : using System . Diagnostics ; 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  using declar   : using System . Windows ; 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  using declar   : using System . Windows . Automation ; 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  using declar   : using System . Windows . Controls ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  using declar   : using System . Windows . Controls . Primitives ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  using declar   : using System . Windows . Data ; 
  Test end scope                  : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  using declar   : using System . Windows . Documents ; 
  Test preproc statement:         : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  using declar   : using System . Windows . Ink ; 
  Test namespace definition:      : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test class definition:          : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  using declar   : using System . Windows . Input ; 
  Test struct definition:         : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  using declar   : using System . Windows . Markup ; 
  Test C# function definition:    : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  using declar   : using System . Windows . Media ; 
  Test control definition:        : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# declaration:            : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  using declar   : using System . Windows . Media . Animation ; 
  Test C# executable:             : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  using declar   : using System . Windows . Media . Effects ; 
  Handle C# executable:           : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test begin scope                : # line 30 "..\..\MainWindow.xaml" 
  using declar   : using System . Windows . Media . Imaging ; 
  Test end scope                  : # line 30 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 30 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 30 "..\..\MainWindow.xaml" 
  using declar   : using System . Windows . Media . Media3D ; 
  Test begin scope                : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
  Test end scope                  : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
  using declar   : using System . Windows . Media . TextFormatting ; 
  Test preproc statement:         : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
  using declar   : using System . Windows . Navigation ; 
  Test namespace definition:      : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
  using declar   : using System . Windows . Shapes ; 
  Test class definition:          : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
  using declar   : using System . Windows . Shell ; 
  Test struct definition:         : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
  Test C# function definition:    : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
  Test control definition:        : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
  Test C# declaration:            : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
  Test C# executable:             : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
  Handle C# executable:           : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test end scope                  : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test preproc statement:         : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test namespace definition:      : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test class definition:          : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test struct definition:         : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# function definition:    : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test control definition:        : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# declaration:            : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# executable:             : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Handle C# executable:           : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test end scope                  : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test preproc statement:         : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test namespace definition:      : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test class definition:          : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test struct definition:         : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# function definition:    : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test control definition:        : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# declaration:            : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# executable:             : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Handle C# executable:           : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test begin scope                : # line 32 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 32 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 32 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 32 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test end scope                  : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test preproc statement:         : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test namespace definition:      : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test class definition:          : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test struct definition:         : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test C# function definition:    : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test control definition:        : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test C# declaration:            : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test C# executable:             : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Handle C# executable:           : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test end scope                  : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test preproc statement:         : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test namespace definition:      : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test class definition:          : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test struct definition:         : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test C# function definition:    : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test control definition:        : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test C# declaration:            : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test C# executable:             : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Handle C# executable:           : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test end scope                  : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test preproc statement:         : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test namespace definition:      : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test class definition:          : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test struct definition:         : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# function definition:    : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test control definition:        : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# declaration:            : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# executable:             : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Handle C# executable:           : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test begin scope                : # line 40 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 40 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 40 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 40 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test end scope                  : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test preproc statement:         : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test namespace definition:      : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test class definition:          : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test struct definition:         : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test C# function definition:    : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test control definition:        : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test C# declaration:            : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test C# executable:             : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Handle C# executable:           : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test end scope                  : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test preproc statement:         : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test namespace definition:      : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test class definition:          : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test struct definition:         : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# function definition:    : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test control definition:        : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# declaration:            : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# executable:             : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Handle C# executable:           : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test begin scope                : # line 41 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 41 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 41 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 41 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Test end scope                  : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Test preproc statement:         : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Test namespace definition:      : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Test class definition:          : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Test struct definition:         : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Test C# function definition:    : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Test control definition:        : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Test C# declaration:            : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Test C# executable:             : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Handle C# executable:           : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : this . _contentLoaded = true ; 
  Test end scope                  : this . _contentLoaded = true ; 
  Test preproc statement:         : this . _contentLoaded = true ; 
  Test namespace definition:      : this . _contentLoaded = true ; 
  Test class definition:          : this . _contentLoaded = true ; 
  Test struct definition:         : this . _contentLoaded = true ; 
  Test C# function definition:    : this . _contentLoaded = true ; 
  Test control definition:        : this . _contentLoaded = true ; 
  Test C# declaration:            : this . _contentLoaded = true ; 
  Test C# executable:             : this . _contentLoaded = true ; 
  Handle C# executable:           : this . _contentLoaded = true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    # pragma checksum "..\..\MainWindow.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "95DB21B878EFCDFEBBD7AFEC7D6754D5" 
  Test end scope                  : 
    # pragma checksum "..\..\MainWindow.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "95DB21B878EFCDFEBBD7AFEC7D6754D5" 
  Test preproc statement:         : 
    # pragma checksum "..\..\MainWindow.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "95DB21B878EFCDFEBBD7AFEC7D6754D5" 
  Handle preproc statement:       : 
    # pragma checksum "..\..\MainWindow.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "95DB21B878EFCDFEBBD7AFEC7D6754D5" 
  Test begin scope                : using ClientGUI ; 
  Test end scope                  : using ClientGUI ; 
  Test preproc statement:         : using ClientGUI ; 
  Test namespace definition:      : using ClientGUI ; 
  Test class definition:          : using ClientGUI ; 
  Test struct definition:         : using ClientGUI ; 
  Test C# function definition:    : using ClientGUI ; 
  Test control definition:        : using ClientGUI ; 
  Test C# declaration:            : using ClientGUI ; 
  Handle C# declaration:          : using ClientGUI ; 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Diagnostics ; 
  Test end scope                  : using System . Diagnostics ; 
  Test preproc statement:         : using System . Diagnostics ; 
  Test namespace definition:      : using System . Diagnostics ; 
  Test class definition:          : using System . Diagnostics ; 
  Test struct definition:         : using System . Diagnostics ; 
  Test C# function definition:    : using System . Diagnostics ; 
  Test control definition:        : using System . Diagnostics ; 
  Test C# declaration:            : using System . Diagnostics ; 
  Handle C# declaration:          : using System . Diagnostics ; 
  Test begin scope                : using System . Windows ; 
  Test end scope                  : using System . Windows ; 
  Test preproc statement:         : using System . Windows ; 
  Test namespace definition:      : using System . Windows ; 
  Test class definition:          : using System . Windows ; 
  Test struct definition:         : using System . Windows ; 
  Test C# function definition:    : using System . Windows ; 
  Test control definition:        : using System . Windows ; 
  Test C# declaration:            : using System . Windows ; 
  Handle C# declaration:          : using System . Windows ; 
  Test begin scope                : using System . Windows . Automation ; 
  Test end scope                  : using System . Windows . Automation ; 
  Test preproc statement:         : using System . Windows . Automation ; 
  Test namespace definition:      : using System . Windows . Automation ; 
  Test class definition:          : using System . Windows . Automation ; 
  Test struct definition:         : using System . Windows . Automation ; 
  Test C# function definition:    : using System . Windows . Automation ; 
  Test control definition:        : using System . Windows . Automation ; 
  Test C# declaration:            : using System . Windows . Automation ; 
  Handle C# declaration:          : using System . Windows . Automation ; 
  Test begin scope                : using System . Windows . Controls ; 
  Test end scope                  : using System . Windows . Controls ; 
  Test preproc statement:         : using System . Windows . Controls ; 
  Test namespace definition:      : using System . Windows . Controls ; 
  Test class definition:          : using System . Windows . Controls ; 
  Test struct definition:         : using System . Windows . Controls ; 
  Test C# function definition:    : using System . Windows . Controls ; 
  Test control definition:        : using System . Windows . Controls ; 
  Test C# declaration:            : using System . Windows . Controls ; 
  Handle C# declaration:          : using System . Windows . Controls ; 
  Test begin scope                : using System . Windows . Controls . Primitives ; 
  Test end scope                  : using System . Windows . Controls . Primitives ; 
  Test preproc statement:         : using System . Windows . Controls . Primitives ; 
  Test namespace definition:      : using System . Windows . Controls . Primitives ; 
  Test class definition:          : using System . Windows . Controls . Primitives ; 
  Test struct definition:         : using System . Windows . Controls . Primitives ; 
  Test C# function definition:    : using System . Windows . Controls . Primitives ; 
  Test control definition:        : using System . Windows . Controls . Primitives ; 
  Test C# declaration:            : using System . Windows . Controls . Primitives ; 
  Handle C# declaration:          : using System . Windows . Controls . Primitives ; 
  Test begin scope                : using System . Windows . Data ; 
  Test end scope                  : using System . Windows . Data ; 
  Test preproc statement:         : using System . Windows . Data ; 
  Test namespace definition:      : using System . Windows . Data ; 
  Test class definition:          : using System . Windows . Data ; 
  Test struct definition:         : using System . Windows . Data ; 
  Test C# function definition:    : using System . Windows . Data ; 
  Test control definition:        : using System . Windows . Data ; 
  Test C# declaration:            : using System . Windows . Data ; 
  Handle C# declaration:          : using System . Windows . Data ; 
  Test begin scope                : using System . Windows . Documents ; 
  Test end scope                  : using System . Windows . Documents ; 
  Test preproc statement:         : using System . Windows . Documents ; 
  Test namespace definition:      : using System . Windows . Documents ; 
  Test class definition:          : using System . Windows . Documents ; 
  Test struct definition:         : using System . Windows . Documents ; 
  Test C# function definition:    : using System . Windows . Documents ; 
  Test control definition:        : using System . Windows . Documents ; 
  Test C# declaration:            : using System . Windows . Documents ; 
  Handle C# declaration:          : using System . Windows . Documents ; 
  Test begin scope                : using System . Windows . Ink ; 
  Test end scope                  : using System . Windows . Ink ; 
  Test preproc statement:         : using System . Windows . Ink ; 
  Test namespace definition:      : using System . Windows . Ink ; 
  Test class definition:          : using System . Windows . Ink ; 
  Test struct definition:         : using System . Windows . Ink ; 
  Test C# function definition:    : using System . Windows . Ink ; 
  Test control definition:        : using System . Windows . Ink ; 
  Test C# declaration:            : using System . Windows . Ink ; 
  Handle C# declaration:          : using System . Windows . Ink ; 
  Test begin scope                : using System . Windows . Input ; 
  Test end scope                  : using System . Windows . Input ; 
  Test preproc statement:         : using System . Windows . Input ; 
  Test namespace definition:      : using System . Windows . Input ; 
  Test class definition:          : using System . Windows . Input ; 
  Test struct definition:         : using System . Windows . Input ; 
  Test C# function definition:    : using System . Windows . Input ; 
  Test control definition:        : using System . Windows . Input ; 
  Test C# declaration:            : using System . Windows . Input ; 
  Handle C# declaration:          : using System . Windows . Input ; 
  Test begin scope                : using System . Windows . Markup ; 
  Test end scope                  : using System . Windows . Markup ; 
  Test preproc statement:         : using System . Windows . Markup ; 
  Test namespace definition:      : using System . Windows . Markup ; 
  Test class definition:          : using System . Windows . Markup ; 
  Test struct definition:         : using System . Windows . Markup ; 
  Test C# function definition:    : using System . Windows . Markup ; 
  Test control definition:        : using System . Windows . Markup ; 
  Test C# declaration:            : using System . Windows . Markup ; 
  Handle C# declaration:          : using System . Windows . Markup ; 
  Test begin scope                : using System . Windows . Media ; 
  Test end scope                  : using System . Windows . Media ; 
  Test preproc statement:         : using System . Windows . Media ; 
  Test namespace definition:      : using System . Windows . Media ; 
  Test class definition:          : using System . Windows . Media ; 
  Test struct definition:         : using System . Windows . Media ; 
  Test C# function definition:    : using System . Windows . Media ; 
  Test control definition:        : using System . Windows . Media ; 
  Test C# declaration:            : using System . Windows . Media ; 
  Handle C# declaration:          : using System . Windows . Media ; 
  Test begin scope                : using System . Windows . Media . Animation ; 
  Test end scope                  : using System . Windows . Media . Animation ; 
  Test preproc statement:         : using System . Windows . Media . Animation ; 
  Test namespace definition:      : using System . Windows . Media . Animation ; 
  Test class definition:          : using System . Windows . Media . Animation ; 
  Test struct definition:         : using System . Windows . Media . Animation ; 
  Test C# function definition:    : using System . Windows . Media . Animation ; 
  Test control definition:        : using System . Windows . Media . Animation ; 
  Test C# declaration:            : using System . Windows . Media . Animation ; 
  Handle C# declaration:          : using System . Windows . Media . Animation ; 
  Test begin scope                : using System . Windows . Media . Effects ; 
  Test end scope                  : using System . Windows . Media . Effects ; 
  Test preproc statement:         : using System . Windows . Media . Effects ; 
  Test namespace definition:      : using System . Windows . Media . Effects ; 
  Test class definition:          : using System . Windows . Media . Effects ; 
  Test struct definition:         : using System . Windows . Media . Effects ; 
  Test C# function definition:    : using System . Windows . Media . Effects ; 
  Test control definition:        : using System . Windows . Media . Effects ; 
  Test C# declaration:            : using System . Windows . Media . Effects ; 
  Handle C# declaration:          : using System . Windows . Media . Effects ; 
  Test begin scope                : using System . Windows . Media . Imaging ; 
  Test end scope                  : using System . Windows . Media . Imaging ; 
  Test preproc statement:         : using System . Windows . Media . Imaging ; 
  Test namespace definition:      : using System . Windows . Media . Imaging ; 
  Test class definition:          : using System . Windows . Media . Imaging ; 
  Test struct definition:         : using System . Windows . Media . Imaging ; 
  Test C# function definition:    : using System . Windows . Media . Imaging ; 
  Test control definition:        : using System . Windows . Media . Imaging ; 
  Test C# declaration:            : using System . Windows . Media . Imaging ; 
  Handle C# declaration:          : using System . Windows . Media . Imaging ; 
  Test begin scope                : using System . Windows . Media . Media3D ; 
  Test end scope                  : using System . Windows . Media . Media3D ; 
  Test preproc statement:         : using System . Windows . Media . Media3D ; 
  Test namespace definition:      : using System . Windows . Media . Media3D ; 
  Test class definition:          : using System . Windows . Media . Media3D ; 
  Test struct definition:         : using System . Windows . Media . Media3D ; 
  Test C# function definition:    : using System . Windows . Media . Media3D ; 
  Test control definition:        : using System . Windows . Media . Media3D ; 
  Test C# declaration:            : using System . Windows . Media . Media3D ; 
  Handle C# declaration:          : using System . Windows . Media . Media3D ; 
  Test begin scope                : using System . Windows . Media . TextFormatting ; 
  Test end scope                  : using System . Windows . Media . TextFormatting ; 
  Test preproc statement:         : using System . Windows . Media . TextFormatting ; 
  Test namespace definition:      : using System . Windows . Media . TextFormatting ; 
  Test class definition:          : using System . Windows . Media . TextFormatting ; 
  Test struct definition:         : using System . Windows . Media . TextFormatting ; 
  Test C# function definition:    : using System . Windows . Media . TextFormatting ; 
  Test control definition:        : using System . Windows . Media . TextFormatting ; 
  Test C# declaration:            : using System . Windows . Media . TextFormatting ; 
  Handle C# declaration:          : using System . Windows . Media . TextFormatting ; 
  Test begin scope                : using System . Windows . Navigation ; 
  Test end scope                  : using System . Windows . Navigation ; 
  Test preproc statement:         : using System . Windows . Navigation ; 
  Test namespace definition:      : using System . Windows . Navigation ; 
  Test class definition:          : using System . Windows . Navigation ; 
  Test struct definition:         : using System . Windows . Navigation ; 
  Test C# function definition:    : using System . Windows . Navigation ; 
  Test control definition:        : using System . Windows . Navigation ; 
  Test C# declaration:            : using System . Windows . Navigation ; 
  Handle C# declaration:          : using System . Windows . Navigation ; 
  Test begin scope                : using System . Windows . Shapes ; 
  Test end scope                  : using System . Windows . Shapes ; 
  Test preproc statement:         : using System . Windows . Shapes ; 
  Test namespace definition:      : using System . Windows . Shapes ; 
  Test class definition:          : using System . Windows . Shapes ; 
  Test struct definition:         : using System . Windows . Shapes ; 
  Test C# function definition:    : using System . Windows . Shapes ; 
  Test control definition:        : using System . Windows . Shapes ; 
  Test C# declaration:            : using System . Windows . Shapes ; 
  Handle C# declaration:          : using System . Windows . Shapes ; 
  Test begin scope                : using System . Windows . Shell ; 
  Test end scope                  : using System . Windows . Shell ; 
  Test preproc statement:         : using System . Windows . Shell ; 
  Test namespace definition:      : using System . Windows . Shell ; 
  Test class definition:          : using System . Windows . Shell ; 
  Test struct definition:         : using System . Windows . Shell ; 
  Test C# function definition:    : using System . Windows . Shell ; 
  Test control definition:        : using System . Windows . Shell ; 
  Test C# declaration:            : using System . Windows . Shell ; 
  Handle C# declaration:          : using System . Windows . Shell ; 
  Test begin scope                : namespace ClientGUI { 
  handle begin scope              : namespace ClientGUI { 
--- stack size = 2 ---
  Test end scope                  : namespace ClientGUI { 
  Test preproc statement:         : namespace ClientGUI { 
  namespace def  : namespace ClientGUI { 
  Test namespace definition:      : namespace ClientGUI { 
  Handle namespace definition:    : namespace ClientGUI { 
  Test begin scope                : 
    public partial class MainWindow : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  handle begin scope              : 
    public partial class MainWindow : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
--- stack size = 3 ---
  Test end scope                  : 
    public partial class MainWindow : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  Test preproc statement:         : 
    public partial class MainWindow : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  class def      : 
    public partial class MainWindow : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  Test namespace definition:      : 
    public partial class MainWindow : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  Preproc Stmt   : # line 15 "..\..\MainWindow.xaml" 
  Test class definition:          : 
    public partial class MainWindow : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  Handle class definition:        : 
    public partial class MainWindow : System . Windows . Window , System . Windows . Markup . IComponentConnector { 
  Test begin scope                : # line 15 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 15 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 15 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 15 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  Preproc Stmt   : # line default 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  Preproc Stmt   : # line hidden 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  Preproc Stmt   : # line 16 "..\..\MainWindow.xaml" 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createtest ; 
  Preproc Stmt   : # line default 
  Test begin scope                : # line default 
  Preproc Stmt   : # line hidden 
  Test end scope                  : # line default 
  Preproc Stmt   : # line 17 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 16 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 16 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 16 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 16 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  Preproc Stmt   : # line default 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  Preproc Stmt   : # line hidden 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  Preproc Stmt   : # line 19 "..\..\MainWindow.xaml" 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button createrequest ; 
  Preproc Stmt   : # line default 
  Test begin scope                : # line default 
  Preproc Stmt   : # line hidden 
  Test end scope                  : # line default 
  Preproc Stmt   : # line 20 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 17 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 17 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 17 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 17 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  Preproc Stmt   : # line default 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  Preproc Stmt   : # line hidden 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  Preproc Stmt   : # line 21 "..\..\MainWindow.xaml" 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  Preproc Stmt   : # line default 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processrequest ; 
  Preproc Stmt   : # line hidden 
  Test begin scope                : # line default 
  Preproc Stmt   : # line 22 "..\..\MainWindow.xaml" 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 19 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 19 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 19 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 19 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  Preproc Stmt   : # line default 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  Preproc Stmt   : # line hidden 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  Preproc Stmt   : # line 23 "..\..\MainWindow.xaml" 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  function declar: 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  Preproc Stmt   : # line default 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  Preproc Stmt   : # line hidden 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  Preproc Stmt   : # line 24 "..\..\MainWindow.xaml" 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repo ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Preproc Stmt   : # line default 
  Test begin scope                : # line 20 "..\..\MainWindow.xaml" 
  Preproc Stmt   : # line hidden 
  Test end scope                  : # line 20 "..\..\MainWindow.xaml" 
  Preproc Stmt   : # line 29 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 20 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 20 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  Preproc Stmt   : # line default 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  Preproc Stmt   : # line hidden 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  Preproc Stmt   : # line 30 "..\..\MainWindow.xaml" 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button browse ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 21 "..\..\MainWindow.xaml" 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Test end scope                  : # line 21 "..\..\MainWindow.xaml" 
  Preproc Stmt   : # line default 
  Test preproc statement:         : # line 21 "..\..\MainWindow.xaml" 
  Preproc Stmt   : # line hidden 
  Handle preproc statement:       : # line 21 "..\..\MainWindow.xaml" 
  Preproc Stmt   : # line 31 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Preproc Stmt   : # line default 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Preproc Stmt   : # line hidden 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Preproc Stmt   : # line 32 "..\..\MainWindow.xaml" 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox test ; 
  Test begin scope                : # line default 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Test end scope                  : # line default 
  Preproc Stmt   : # line default 
  Test preproc statement:         : # line default 
  Preproc Stmt   : # line hidden 
  Handle preproc statement:       : # line default 
  Preproc Stmt   : # line 39 "..\..\MainWindow.xaml" 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 22 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 22 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 22 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 22 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Preproc Stmt   : # line default 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Preproc Stmt   : # line hidden 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Preproc Stmt   : # line 40 "..\..\MainWindow.xaml" 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox request ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 23 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 23 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 23 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 23 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  Preproc Stmt   : # line default 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  Preproc Stmt   : # line hidden 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  Preproc Stmt   : # line 41 "..\..\MainWindow.xaml" 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  Handle C# declaration:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button delete ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 24 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 24 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 24 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 24 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  executable     : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Preproc Stmt   : # line default 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Preproc Stmt   : # line hidden 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  data declar    : private bool _contentLoaded ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteCs ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 29 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 29 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 29 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 29 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox repoXml ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 30 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 30 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 30 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 30 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button processExisting ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 31 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 31 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 31 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 31 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . ListBox notification ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 32 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 32 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 32 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 32 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button deleteExisting ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 39 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 39 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 39 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 39 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . TextBox process ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 40 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 40 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 40 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 40 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button initiateComponents ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : # line 41 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 41 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 41 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 41 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test end scope                  : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test preproc statement:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test namespace definition:      : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test class definition:          : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test struct definition:         : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test C# function definition:    : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test control definition:        : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test C# declaration:            : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test C# executable:             : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Handle C# executable:           : 
    [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1823:AvoidUnusedPrivateFields" ) ] internal System . Windows . Controls . Button kill ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : private bool _contentLoaded ; 
  Test end scope                  : private bool _contentLoaded ; 
  Test preproc statement:         : private bool _contentLoaded ; 
  Test namespace definition:      : private bool _contentLoaded ; 
  Test class definition:          : private bool _contentLoaded ; 
  Test struct definition:         : private bool _contentLoaded ; 
  Test C# function definition:    : private bool _contentLoaded ; 
  Test control definition:        : private bool _contentLoaded ; 
  Test C# declaration:            : private bool _contentLoaded ; 
  Handle C# declaration:          : private bool _contentLoaded ; 
  Test begin scope                : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  handle begin scope              : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
--- stack size = 4 ---
  Test end scope                  : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test preproc statement:         : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test namespace definition:      : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test class definition:          : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test struct definition:         : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  function def   : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test C# function definition:    : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Handle C# function definition:  : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] public void InitializeComponent ( ) { 
  Test begin scope                : if ( _contentLoaded ) { 
  handle begin scope              : if ( _contentLoaded ) { 
--- stack size = 5 ---
  Test end scope                  : if ( _contentLoaded ) { 
  Test preproc statement:         : if ( _contentLoaded ) { 
  control def    : if ( _contentLoaded ) { 
  Test namespace definition:      : if ( _contentLoaded ) { 
  Test class definition:          : if ( _contentLoaded ) { 
  default:       : return ; 
  Test struct definition:         : if ( _contentLoaded ) { 
--- stack size = 4 ---
  Test C# function definition:    : if ( _contentLoaded ) { 
  Test control definition:        : if ( _contentLoaded ) { 
  Handle control definition:      : if ( _contentLoaded ) { 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  executable     : _contentLoaded = true ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : _contentLoaded = true ; 
  Test end scope                  : _contentLoaded = true ; 
  Test preproc statement:         : _contentLoaded = true ; 
  Test namespace definition:      : _contentLoaded = true ; 
  Test class definition:          : _contentLoaded = true ; 
  Test struct definition:         : _contentLoaded = true ; 
  Test C# function definition:    : _contentLoaded = true ; 
  Test control definition:        : _contentLoaded = true ; 
  Test C# declaration:            : _contentLoaded = true ; 
  Test C# executable:             : _contentLoaded = true ; 
  Handle C# executable:           : _contentLoaded = true ; 
  Test begin scope                : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  executable     : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  Test end scope                  : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  Preproc Stmt   : # line 1 "..\..\MainWindow.xaml" 
  Test preproc statement:         : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  Test namespace definition:      : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  Test class definition:          : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  Test struct definition:         : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  Test C# function definition:    : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  Test control definition:        : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  Test C# declaration:            : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  executable     : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test C# executable:             : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  Preproc Stmt   : # line default 
  Handle C# executable:           : 
    System . Uri resourceLocater = new System . Uri ( "/ClientGUI;component/mainwindow.xaml" , System . UriKind . Relative ) ; 
  Preproc Stmt   : # line hidden 
  Test begin scope                : # line 1 "..\..\MainWindow.xaml" 
--- stack size = 3 ---
  Test end scope                  : # line 1 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 1 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 1 "..\..\MainWindow.xaml" 
  Test begin scope                : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test end scope                  : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test preproc statement:         : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test namespace definition:      : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test class definition:          : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test struct definition:         : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test C# function definition:    : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test control definition:        : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test C# declaration:            : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test C# executable:             : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Handle C# executable:           : System . Windows . Application . LoadComponent ( this , resourceLocater ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  handle begin scope              : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
--- stack size = 4 ---
  Test end scope                  : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test preproc statement:         : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test namespace definition:      : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  function def   : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test class definition:          : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test struct definition:         : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test C# function definition:    : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Handle C# function definition:  : 
    [ System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ System . CodeDom . Compiler . GeneratedCodeAttribute ( "PresentationBuildTasks" , "4.0.0.0" ) ] [ System . ComponentModel . EditorBrowsableAttribute ( System . ComponentModel . EditorBrowsableState . Never ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Design" , "CA1033:InterfaceMethodsShouldBeCallableByChildTypes" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Maintainability" , "CA1502:AvoidExcessiveComplexity" ) ] [ System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1800:DoNotCastUnnecessarily" ) ] void System . Windows . Markup . IComponentConnector . Connect ( int connectionId , object target ) { 
  Test begin scope                : switch ( connectionId ) { 
  handle begin scope              : switch ( connectionId ) { 
--- stack size = 5 ---
  Test end scope                  : switch ( connectionId ) { 
  Test preproc statement:         : switch ( connectionId ) { 
  control def    : switch ( connectionId ) { 
  Test namespace definition:      : switch ( connectionId ) { 
  Test class definition:          : switch ( connectionId ) { 
  Test struct definition:         : switch ( connectionId ) { 
  Test C# function definition:    : switch ( connectionId ) { 
  Test control definition:        : switch ( connectionId ) { 
  Handle control definition:      : switch ( connectionId ) { 
  Test begin scope                : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test end scope                  : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test preproc statement:         : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test namespace definition:      : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test class definition:          : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test struct definition:         : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# function definition:    : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test control definition:        : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# declaration:            : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# executable:             : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  executable     : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Handle C# executable:           : 
    case 1 : this . createtest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Preproc Stmt   : # line 15 "..\..\MainWindow.xaml" 
  Test begin scope                : # line 15 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 15 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 15 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 15 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  Test end scope                  : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  Test preproc statement:         : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  Test namespace definition:      : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  Test class definition:          : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  Test struct definition:         : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  Test C# function definition:    : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  Test control definition:        : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  Test C# declaration:            : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  executable     : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  Test C# executable:             : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  Preproc Stmt   : # line default 
  Handle C# executable:           : 
    this . createtest . Click += new System . Windows . RoutedEventHandler ( this . Createtest ) ; 
  Preproc Stmt   : # line hidden 
  Test begin scope                : # line default 
  default:       : return ; 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test end scope                  : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  executable     : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test preproc statement:         : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Preproc Stmt   : # line 16 "..\..\MainWindow.xaml" 
  Test namespace definition:      : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test class definition:          : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test struct definition:         : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# function definition:    : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test control definition:        : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# declaration:            : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# executable:             : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Handle C# executable:           : 
    case 2 : this . createrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test begin scope                : # line 16 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 16 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 16 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 16 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  Test end scope                  : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  Test preproc statement:         : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  executable     : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  Test namespace definition:      : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  Preproc Stmt   : # line default 
  Test class definition:          : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  Preproc Stmt   : # line hidden 
  Test struct definition:         : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  default:       : return ; 
  Test C# function definition:    : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  Test control definition:        : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  Test C# declaration:            : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  Test C# executable:             : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  Handle C# executable:           : 
    this . createrequest . Click += new System . Windows . RoutedEventHandler ( this . Createrequest ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  executable     : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test end scope                  : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Preproc Stmt   : # line 17 "..\..\MainWindow.xaml" 
  Test preproc statement:         : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test namespace definition:      : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test class definition:          : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test struct definition:         : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# function definition:    : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test control definition:        : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# declaration:            : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# executable:             : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Handle C# executable:           : 
    case 3 : this . processrequest = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test begin scope                : # line 17 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 17 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 17 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 17 "..\..\MainWindow.xaml" 
  executable     : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  Test begin scope                : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  Preproc Stmt   : # line default 
  Test end scope                  : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  Preproc Stmt   : # line hidden 
  Test preproc statement:         : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  default:       : return ; 
  Test namespace definition:      : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  Test class definition:          : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  Test struct definition:         : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  Test C# function definition:    : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  Test control definition:        : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  Test C# declaration:            : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  Test C# executable:             : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  Handle C# executable:           : 
    this . processrequest . Click += new System . Windows . RoutedEventHandler ( this . processRequest ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  executable     : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test preproc statement:         : # line default 
  Preproc Stmt   : # line 19 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test end scope                  : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test preproc statement:         : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test namespace definition:      : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test class definition:          : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  executable     : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  Test struct definition:         : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Preproc Stmt   : # line default 
  Test C# function definition:    : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Preproc Stmt   : # line hidden 
  Test control definition:        : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  default:       : return ; 
  Test C# declaration:            : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# executable:             : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Handle C# executable:           : 
    case 4 : this . repo = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test begin scope                : # line 19 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 19 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 19 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 19 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  Test end scope                  : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  Test preproc statement:         : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  Test namespace definition:      : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  Test class definition:          : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  Test struct definition:         : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  executable     : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# function definition:    : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  Test control definition:        : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  Preproc Stmt   : # line 20 "..\..\MainWindow.xaml" 
  Test C# declaration:            : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  Test C# executable:             : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  Handle C# executable:           : 
    this . repo . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . Repo_MouseDoubleClick ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  executable     : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Test C# function definition:    : return ; 
  Preproc Stmt   : # line default 
  Test control definition:        : return ; 
  Preproc Stmt   : # line hidden 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  default:       : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test end scope                  : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test preproc statement:         : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test namespace definition:      : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test class definition:          : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test struct definition:         : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# function definition:    : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test control definition:        : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# declaration:            : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# executable:             : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Handle C# executable:           : 
    case 5 : this . browse = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  executable     : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test begin scope                : # line 20 "..\..\MainWindow.xaml" 
  default:       : return ; 
  Test end scope                  : # line 20 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 20 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 20 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Test end scope                  : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Test preproc statement:         : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Test namespace definition:      : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Test class definition:          : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Test struct definition:         : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Test C# function definition:    : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Test control definition:        : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  executable     : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# declaration:            : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Preproc Stmt   : # line 22 "..\..\MainWindow.xaml" 
  Test C# executable:             : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Handle C# executable:           : 
    this . browse . Click += new System . Windows . RoutedEventHandler ( this . Browse ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  executable     : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  Handle default:                 : return ; 
  Preproc Stmt   : # line default 
  Test begin scope                : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Preproc Stmt   : # line hidden 
  Test end scope                  : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  default:       : return ; 
  Test preproc statement:         : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test namespace definition:      : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test class definition:          : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test struct definition:         : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# function definition:    : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test control definition:        : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# declaration:            : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# executable:             : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Handle C# executable:           : 
    case 6 : this . test = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  executable     : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test begin scope                : return ; 
  Preproc Stmt   : # line 23 "..\..\MainWindow.xaml" 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test end scope                  : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test preproc statement:         : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test namespace definition:      : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  executable     : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Test class definition:          : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Preproc Stmt   : # line default 
  Test struct definition:         : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Preproc Stmt   : # line hidden 
  Test C# function definition:    : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  default:       : return ; 
  Test control definition:        : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# declaration:            : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# executable:             : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Handle C# executable:           : 
    case 7 : this . request = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test begin scope                : # line 22 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 22 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 22 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 22 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  Test end scope                  : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  executable     : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test preproc statement:         : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  Preproc Stmt   : # line 24 "..\..\MainWindow.xaml" 
  Test namespace definition:      : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  Test class definition:          : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  Test struct definition:         : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  Test C# function definition:    : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  Test control definition:        : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  executable     : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  Test C# declaration:            : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  Preproc Stmt   : # line default 
  Test C# executable:             : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  Preproc Stmt   : # line hidden 
  Handle C# executable:           : 
    this . request . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . NewReq_MouseDoubleClick ) ; 
  default:       : return ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  executable     : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# executable:             : return ; 
  Preproc Stmt   : # line 29 "..\..\MainWindow.xaml" 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test end scope                  : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test preproc statement:         : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test namespace definition:      : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test class definition:          : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test struct definition:         : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# function definition:    : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test control definition:        : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  executable     : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
  Test C# declaration:            : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Preproc Stmt   : # line default 
  Test C# executable:             : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Preproc Stmt   : # line hidden 
  Handle C# executable:           : 
    case 8 : this . delete = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  default:       : return ; 
  Test begin scope                : # line 23 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 23 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 23 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 23 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Test end scope                  : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Test preproc statement:         : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Test namespace definition:      : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Test class definition:          : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Test struct definition:         : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  executable     : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# function definition:    : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Preproc Stmt   : # line 30 "..\..\MainWindow.xaml" 
  Test control definition:        : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Test C# declaration:            : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Test C# executable:             : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Handle C# executable:           : 
    this . delete . Click += new System . Windows . RoutedEventHandler ( this . DeleteNew ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  executable     : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
  Test end scope                  : # line hidden 
  Preproc Stmt   : # line default 
  Test preproc statement:         : # line hidden 
  Preproc Stmt   : # line hidden 
  Handle preproc statement:       : # line hidden 
  default:       : return ; 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test end scope                  : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test preproc statement:         : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test namespace definition:      : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test class definition:          : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  executable     : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test struct definition:         : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  default:       : return ; 
  Test C# function definition:    : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test control definition:        : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# declaration:            : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# executable:             : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Handle C# executable:           : 
    case 9 : this . deleteCs = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test begin scope                : # line 24 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 24 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 24 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 24 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  executable     : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test end scope                  : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  Preproc Stmt   : # line 32 "..\..\MainWindow.xaml" 
  Test preproc statement:         : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  Test namespace definition:      : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  Test class definition:          : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  Test struct definition:         : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  Test C# function definition:    : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  Test control definition:        : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  Test C# declaration:            : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  executable     : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test C# executable:             : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  Preproc Stmt   : # line default 
  Handle C# executable:           : 
    this . deleteCs . Click += new System . Windows . RoutedEventHandler ( this . DeleteCs ) ; 
  Preproc Stmt   : # line hidden 
  Test begin scope                : # line default 
  default:       : return ; 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  executable     : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test end scope                  : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test preproc statement:         : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  default:       : return ; 
  Test namespace definition:      : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test class definition:          : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test struct definition:         : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# function definition:    : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test control definition:        : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# declaration:            : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# executable:             : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Handle C# executable:           : 
    case 10 : this . repoXml = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test begin scope                : # line 29 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 29 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 29 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 29 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
  executable     : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test end scope                  : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
  Preproc Stmt   : # line 40 "..\..\MainWindow.xaml" 
  Test preproc statement:         : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
  Test namespace definition:      : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
  Test class definition:          : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
  Test struct definition:         : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
  Test C# function definition:    : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
  Test control definition:        : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
  Test C# declaration:            : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
  executable     : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test C# executable:             : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
  Preproc Stmt   : # line default 
  Handle C# executable:           : 
    this . repoXml . MouseDoubleClick += new System . Windows . Input . MouseButtonEventHandler ( this . OldReq_MouseDoubleClick ) ; 
  Preproc Stmt   : # line hidden 
  Test begin scope                : # line default 
  default:       : return ; 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test end scope                  : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  executable     : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test preproc statement:         : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Preproc Stmt   : # line 41 "..\..\MainWindow.xaml" 
  Test namespace definition:      : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test class definition:          : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test struct definition:         : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# function definition:    : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test control definition:        : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# declaration:            : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# executable:             : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  executable     : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Handle C# executable:           : 
    case 11 : this . processExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Preproc Stmt   : # line default 
  Test begin scope                : # line 30 "..\..\MainWindow.xaml" 
  Preproc Stmt   : # line hidden 
  Test end scope                  : # line 30 "..\..\MainWindow.xaml" 
  default:       : return ; 
  Test preproc statement:         : # line 30 "..\..\MainWindow.xaml" 
--- stack size = 4 ---
  Handle preproc statement:       : # line 30 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
  Test end scope                  : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
  Test preproc statement:         : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
  executable     : this . _contentLoaded = true ; 
  Test namespace definition:      : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
--- stack size = 3 ---
  Test class definition:          : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
--- stack size = 2 ---
  Test struct definition:         : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
--- stack size = 1 ---
  Test C# function definition:    : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
  Test control definition:        : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
  Test C# declaration:            : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
  Test C# executable:             : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
  Handle C# executable:           : 
    this . processExisting . Click += new System . Windows . RoutedEventHandler ( this . ProcessExisting ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  using declar   : using System . Reflection ; 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  using declar   : using System . Resources ; 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  using declar   : using System . Runtime . CompilerServices ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test end scope                  : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test preproc statement:         : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  using declar   : using System . Runtime . InteropServices ; 
  Test namespace definition:      : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  using declar   : using System . Windows ; 
  Test class definition:          : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test struct definition:         : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# function definition:    : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test control definition:        : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# declaration:            : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test C# executable:             : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Handle C# executable:           : 
    case 12 : this . notification = ( ( System . Windows . Controls . ListBox ) ( target ) ) ; 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test end scope                  : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test preproc statement:         : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test namespace definition:      : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test class definition:          : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test struct definition:         : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# function definition:    : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test control definition:        : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# declaration:            : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# executable:             : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Handle C# executable:           : 
    case 13 : this . deleteExisting = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test begin scope                : # line 32 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 32 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 32 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 32 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test end scope                  : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test preproc statement:         : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test namespace definition:      : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test class definition:          : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test struct definition:         : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test C# function definition:    : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test control definition:        : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test C# declaration:            : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test C# executable:             : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Handle C# executable:           : 
    this . deleteExisting . Click += new System . Windows . RoutedEventHandler ( this . DeleteExisting ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test end scope                  : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test preproc statement:         : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test namespace definition:      : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test class definition:          : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test struct definition:         : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test C# function definition:    : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test control definition:        : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test C# declaration:            : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test C# executable:             : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Handle C# executable:           : 
    case 14 : this . process = ( ( System . Windows . Controls . TextBox ) ( target ) ) ; 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test end scope                  : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test preproc statement:         : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test namespace definition:      : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test class definition:          : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test struct definition:         : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# function definition:    : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test control definition:        : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# declaration:            : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# executable:             : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Handle C# executable:           : 
    case 15 : this . initiateComponents = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test begin scope                : # line 40 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 40 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 40 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 40 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test end scope                  : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test preproc statement:         : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test namespace definition:      : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test class definition:          : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test struct definition:         : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test C# function definition:    : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test control definition:        : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test C# declaration:            : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test C# executable:             : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Handle C# executable:           : 
    this . initiateComponents . Click += new System . Windows . RoutedEventHandler ( this . InitiateComponents ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test end scope                  : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test preproc statement:         : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test namespace definition:      : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test class definition:          : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test struct definition:         : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# function definition:    : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test control definition:        : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# declaration:            : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test C# executable:             : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Handle C# executable:           : 
    case 16 : this . kill = ( ( System . Windows . Controls . Button ) ( target ) ) ; 
  Test begin scope                : # line 41 "..\..\MainWindow.xaml" 
  Test end scope                  : # line 41 "..\..\MainWindow.xaml" 
  Test preproc statement:         : # line 41 "..\..\MainWindow.xaml" 
  Handle preproc statement:       : # line 41 "..\..\MainWindow.xaml" 
  Test begin scope                : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Test end scope                  : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Test preproc statement:         : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Test namespace definition:      : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Test class definition:          : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Test struct definition:         : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Test C# function definition:    : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Test control definition:        : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Test C# declaration:            : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Test C# executable:             : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Handle C# executable:           : 
    this . kill . Click += new System . Windows . RoutedEventHandler ( this . Kill ) ; 
  Test begin scope                : # line default 
  Test end scope                  : # line default 
  Test preproc statement:         : # line default 
  Handle preproc statement:       : # line default 
  Test begin scope                : # line hidden 
  Test end scope                  : # line hidden 
  Test preproc statement:         : # line hidden 
  Handle preproc statement:       : # line hidden 
  Test begin scope                : return ; 
  Test end scope                  : return ; 
  Test preproc statement:         : return ; 
  Test namespace definition:      : return ; 
  Test class definition:          : return ; 
  Test struct definition:         : return ; 
  Test C# function definition:    : return ; 
  Test control definition:        : return ; 
  Test C# declaration:            : return ; 
  Test C# executable:             : return ; 
  Test default:                   : return ; 
  Handle default:                 : return ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : this . _contentLoaded = true ; 
  Test end scope                  : this . _contentLoaded = true ; 
  Test preproc statement:         : this . _contentLoaded = true ; 
  Test namespace definition:      : this . _contentLoaded = true ; 
  Test class definition:          : this . _contentLoaded = true ; 
  Test struct definition:         : this . _contentLoaded = true ; 
  Test C# function definition:    : this . _contentLoaded = true ; 
  Test control definition:        : this . _contentLoaded = true ; 
  Test C# declaration:            : this . _contentLoaded = true ; 
  Test C# executable:             : this . _contentLoaded = true ; 
  Handle C# executable:           : this . _contentLoaded = true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System . Reflection ; 
  Test end scope                  : using System . Reflection ; 
  Test preproc statement:         : using System . Reflection ; 
  Test namespace definition:      : using System . Reflection ; 
  Test class definition:          : using System . Reflection ; 
  Test struct definition:         : using System . Reflection ; 
  Test C# function definition:    : using System . Reflection ; 
  Test control definition:        : using System . Reflection ; 
  Test C# declaration:            : using System . Reflection ; 
  Handle C# declaration:          : using System . Reflection ; 
  Test begin scope                : using System . Resources ; 
  Test end scope                  : using System . Resources ; 
  Test preproc statement:         : using System . Resources ; 
  Test namespace definition:      : using System . Resources ; 
  Test class definition:          : using System . Resources ; 
  Test struct definition:         : using System . Resources ; 
  Test C# function definition:    : using System . Resources ; 
  Test control definition:        : using System . Resources ; 
  Test C# declaration:            : using System . Resources ; 
  Handle C# declaration:          : using System . Resources ; 
  Test begin scope                : using System . Runtime . CompilerServices ; 
  Test end scope                  : using System . Runtime . CompilerServices ; 
  Test preproc statement:         : using System . Runtime . CompilerServices ; 
  Test namespace definition:      : using System . Runtime . CompilerServices ; 
  Test class definition:          : using System . Runtime . CompilerServices ; 
  Test struct definition:         : using System . Runtime . CompilerServices ; 
  Test C# function definition:    : using System . Runtime . CompilerServices ; 
  Test control definition:        : using System . Runtime . CompilerServices ; 
  Test C# declaration:            : using System . Runtime . CompilerServices ; 
  Handle C# declaration:          : using System . Runtime . CompilerServices ; 
  Test begin scope                : using System . Runtime . InteropServices ; 
  Test end scope                  : using System . Runtime . InteropServices ; 
  Test preproc statement:         : using System . Runtime . InteropServices ; 
  Test namespace definition:      : using System . Runtime . InteropServices ; 
  Test class definition:          : using System . Runtime . InteropServices ; 
  Test struct definition:         : using System . Runtime . InteropServices ; 
  Test C# function definition:    : using System . Runtime . InteropServices ; 
  Test control definition:        : using System . Runtime . InteropServices ; 
  Test C# declaration:            : using System . Runtime . InteropServices ; 
  Handle C# declaration:          : using System . Runtime . InteropServices ; 
  Test begin scope                : using System . Windows ; 
  Test end scope                  : using System . Windows ; 
  Test preproc statement:         : using System . Windows ; 
  Test namespace definition:      : using System . Windows ; 
  Test class definition:          : using System . Windows ; 
  Test struct definition:         : using System . Windows ; 
  Test C# function definition:    : using System . Windows ; 
  Test control definition:        : using System . Windows ; 
  Test C# declaration:            : using System . Windows ; 
  Handle C# declaration:          : using System . Windows ; 
  Test begin scope                : namespace ClientGUI . Properties { 
  handle begin scope              : namespace ClientGUI . Properties { 
--- stack size = 2 ---
  Test end scope                  : namespace ClientGUI . Properties { 
  namespace def  : namespace ClientGUI . Properties { 
  Test preproc statement:         : namespace ClientGUI . Properties { 
  Test namespace definition:      : namespace ClientGUI . Properties { 
  Handle namespace definition:    : namespace ClientGUI . Properties { 
  Test begin scope                : 
    [ global :: System . CodeDom . Compiler . GeneratedCodeAttribute ( "System.Resources.Tools.StronglyTypedResourceBuilder" , "4.0.0.0" ) ] [ global :: System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ global :: System . Runtime . CompilerServices . CompilerGeneratedAttribute ( ) ] internal class Resources { 
  handle begin scope              : 
    [ global :: System . CodeDom . Compiler . GeneratedCodeAttribute ( "System.Resources.Tools.StronglyTypedResourceBuilder" , "4.0.0.0" ) ] [ global :: System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ global :: System . Runtime . CompilerServices . CompilerGeneratedAttribute ( ) ] internal class Resources { 
--- stack size = 3 ---
  Test end scope                  : 
    [ global :: System . CodeDom . Compiler . GeneratedCodeAttribute ( "System.Resources.Tools.StronglyTypedResourceBuilder" , "4.0.0.0" ) ] [ global :: System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ global :: System . Runtime . CompilerServices . CompilerGeneratedAttribute ( ) ] internal class Resources { 
  Test preproc statement:         : 
    [ global :: System . CodeDom . Compiler . GeneratedCodeAttribute ( "System.Resources.Tools.StronglyTypedResourceBuilder" , "4.0.0.0" ) ] [ global :: System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ global :: System . Runtime . CompilerServices . CompilerGeneratedAttribute ( ) ] internal class Resources { 
  class def      : 
    [ global :: System . CodeDom . Compiler . GeneratedCodeAttribute ( "System.Resources.Tools.StronglyTypedResourceBuilder" , "4.0.0.0" ) ] [ global :: System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ global :: System . Runtime . CompilerServices . CompilerGeneratedAttribute ( ) ] internal class Resources { 
  Test namespace definition:      : 
    [ global :: System . CodeDom . Compiler . GeneratedCodeAttribute ( "System.Resources.Tools.StronglyTypedResourceBuilder" , "4.0.0.0" ) ] [ global :: System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ global :: System . Runtime . CompilerServices . CompilerGeneratedAttribute ( ) ] internal class Resources { 
  executable     : private static global :: System . Resources . ResourceManager resourceMan ; 
  Test class definition:          : 
    [ global :: System . CodeDom . Compiler . GeneratedCodeAttribute ( "System.Resources.Tools.StronglyTypedResourceBuilder" , "4.0.0.0" ) ] [ global :: System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ global :: System . Runtime . CompilerServices . CompilerGeneratedAttribute ( ) ] internal class Resources { 
  Handle class definition:        : 
    [ global :: System . CodeDom . Compiler . GeneratedCodeAttribute ( "System.Resources.Tools.StronglyTypedResourceBuilder" , "4.0.0.0" ) ] [ global :: System . Diagnostics . DebuggerNonUserCodeAttribute ( ) ] [ global :: System . Runtime . CompilerServices . CompilerGeneratedAttribute ( ) ] internal class Resources { 
  executable     : private static global :: System . Globalization . CultureInfo resourceCulture ; 
  Test begin scope                : private static global :: System . Resources . ResourceManager resourceMan ; 
  Test end scope                  : private static global :: System . Resources . ResourceManager resourceMan ; 
  Test preproc statement:         : private static global :: System . Resources . ResourceManager resourceMan ; 
  Test namespace definition:      : private static global :: System . Resources . ResourceManager resourceMan ; 
  Test class definition:          : private static global :: System . Resources . ResourceManager resourceMan ; 
  Test struct definition:         : private static global :: System . Resources . ResourceManager resourceMan ; 
  Test C# function definition:    : private static global :: System . Resources . ResourceManager resourceMan ; 
  Test control definition:        : private static global :: System . Resources . ResourceManager resourceMan ; 
  Test C# declaration:            : private static global :: System . Resources . ResourceManager resourceMan ; 
  Test C# executable:             : private static global :: System . Resources . ResourceManager resourceMan ; 
  Handle C# executable:           : private static global :: System . Resources . ResourceManager resourceMan ; 
  Test begin scope                : private static global :: System . Globalization . CultureInfo resourceCulture ; 
  Test end scope                  : private static global :: System . Globalization . CultureInfo resourceCulture ; 
  Test preproc statement:         : private static global :: System . Globalization . CultureInfo resourceCulture ; 
  Test namespace definition:      : private static global :: System . Globalization . CultureInfo resourceCulture ; 
  Test class definition:          : private static global :: System . Globalization . CultureInfo resourceCulture ; 
  Test struct definition:         : private static global :: System . Globalization . CultureInfo resourceCulture ; 
  Test C# function definition:    : private static global :: System . Globalization . CultureInfo resourceCulture ; 
  Test control definition:        : private static global :: System . Globalization . CultureInfo resourceCulture ; 
  Test C# declaration:            : private static global :: System . Globalization . CultureInfo resourceCulture ; 
  Test C# executable:             : private static global :: System . Globalization . CultureInfo resourceCulture ; 
  Handle C# executable:           : private static global :: System . Globalization . CultureInfo resourceCulture ; 
  Test begin scope                : 
    [ global :: System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1811:AvoidUncalledPrivateCode" ) ] internal Resources ( ) { 
  handle begin scope              : 
    [ global :: System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1811:AvoidUncalledPrivateCode" ) ] internal Resources ( ) { 
--- stack size = 4 ---
  Test end scope                  : 
    [ global :: System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1811:AvoidUncalledPrivateCode" ) ] internal Resources ( ) { 
  Test preproc statement:         : 
    [ global :: System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1811:AvoidUncalledPrivateCode" ) ] internal Resources ( ) { 
  function def   : 
    [ global :: System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1811:AvoidUncalledPrivateCode" ) ] internal Resources ( ) { 
  Test namespace definition:      : 
    [ global :: System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1811:AvoidUncalledPrivateCode" ) ] internal Resources ( ) { 
--- stack size = 3 ---
  Test class definition:          : 
    [ global :: System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1811:AvoidUncalledPrivateCode" ) ] internal Resources ( ) { 
  Test struct definition:         : 
    [ global :: System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1811:AvoidUncalledPrivateCode" ) ] internal Resources ( ) { 
  Test C# function definition:    : 
    [ global :: System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1811:AvoidUncalledPrivateCode" ) ] internal Resources ( ) { 
  Handle C# function definition:  : 
    [ global :: System . Diagnostics . CodeAnalysis . SuppressMessageAttribute ( "Microsoft.Performance" , "CA1811:AvoidUncalledPrivateCode" ) ] internal Resources ( ) { 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    [ global :: System . ComponentModel . EditorBrowsableAttribute ( global :: System . ComponentModel . EditorBrowsableState . Advanced ) ] internal static global :: System . Resources . ResourceManager ResourceManager { 
  handle begin scope              : 
    [ global :: System . ComponentModel . EditorBrowsableAttribute ( global :: System . ComponentModel . EditorBrowsableState . Advanced ) ] internal static global :: System . Resources . ResourceManager ResourceManager { 
--- stack size = 4 ---
  Test end scope                  : 
    [ global :: System . ComponentModel . EditorBrowsableAttribute ( global :: System . ComponentModel . EditorBrowsableState . Advanced ) ] internal static global :: System . Resources . ResourceManager ResourceManager { 
  Test preproc statement:         : 
    [ global :: System . ComponentModel . EditorBrowsableAttribute ( global :: System . ComponentModel . EditorBrowsableState . Advanced ) ] internal static global :: System . Resources . ResourceManager ResourceManager { 
  Test namespace definition:      : 
    [ global :: System . ComponentModel . EditorBrowsableAttribute ( global :: System . ComponentModel . EditorBrowsableState . Advanced ) ] internal static global :: System . Resources . ResourceManager ResourceManager { 
  function def   : 
    [ global :: System . ComponentModel . EditorBrowsableAttribute ( global :: System . ComponentModel . EditorBrowsableState . Advanced ) ] internal static global :: System . Resources . ResourceManager ResourceManager { 
  Test class definition:          : 
    [ global :: System . ComponentModel . EditorBrowsableAttribute ( global :: System . ComponentModel . EditorBrowsableState . Advanced ) ] internal static global :: System . Resources . ResourceManager ResourceManager { 
  Test struct definition:         : 
    [ global :: System . ComponentModel . EditorBrowsableAttribute ( global :: System . ComponentModel . EditorBrowsableState . Advanced ) ] internal static global :: System . Resources . ResourceManager ResourceManager { 
  Test C# function definition:    : 
    [ global :: System . ComponentModel . EditorBrowsableAttribute ( global :: System . ComponentModel . EditorBrowsableState . Advanced ) ] internal static global :: System . Resources . ResourceManager ResourceManager { 
  Handle C# function definition:  : 
    [ global :: System . ComponentModel . EditorBrowsableAttribute ( global :: System . ComponentModel . EditorBrowsableState . Advanced ) ] internal static global :: System . Resources . ResourceManager ResourceManager { 
  Test begin scope                : get { 
  handle begin scope              : get { 
--- stack size = 5 ---
  Test end scope                  : get { 
  Test preproc statement:         : get { 
  default:       : get { 
  Test namespace definition:      : get { 
  Test class definition:          : get { 
  Test struct definition:         : get { 
  Test C# function definition:    : get { 
  Test control definition:        : get { 
  Test C# declaration:            : get { 
  Test C# executable:             : get { 
  Test default:                   : get { 
  Handle default:                 : get { 
  Test begin scope                : if ( ( resourceMan == null ) ) { 
  handle begin scope              : if ( ( resourceMan == null ) ) { 
--- stack size = 6 ---
  Test end scope                  : if ( ( resourceMan == null ) ) { 
  Test preproc statement:         : if ( ( resourceMan == null ) ) { 
  Test namespace definition:      : if ( ( resourceMan == null ) ) { 
  Test class definition:          : if ( ( resourceMan == null ) ) { 
  control def    : if ( ( resourceMan == null ) ) { 
  Test struct definition:         : if ( ( resourceMan == null ) ) { 
  Test C# function definition:    : if ( ( resourceMan == null ) ) { 
  Test control definition:        : if ( ( resourceMan == null ) ) { 
  Handle control definition:      : if ( ( resourceMan == null ) ) { 
  Test begin scope                : 
    global :: System . Resources . ResourceManager temp = new global :: System . Resources . ResourceManager ( "ClientGUI.Properties.Resources" , typeof ( Resources ) . Assembly ) ; 
  Test end scope                  : 
    global :: System . Resources . ResourceManager temp = new global :: System . Resources . ResourceManager ( "ClientGUI.Properties.Resources" , typeof ( Resources ) . Assembly ) ; 
  Test preproc statement:         : 
    global :: System . Resources . ResourceManager temp = new global :: System . Resources . ResourceManager ( "ClientGUI.Properties.Resources" , typeof ( Resources ) . Assembly ) ; 
  Test namespace definition:      : 
    global :: System . Resources . ResourceManager temp = new global :: System . Resources . ResourceManager ( "ClientGUI.Properties.Resources" , typeof ( Resources ) . Assembly ) ; 
  Test class definition:          : 
    global :: System . Resources . ResourceManager temp = new global :: System . Resources . ResourceManager ( "ClientGUI.Properties.Resources" , typeof ( Resources ) . Assembly ) ; 
  Test struct definition:         : 
    global :: System . Resources . ResourceManager temp = new global :: System . Resources . ResourceManager ( "ClientGUI.Properties.Resources" , typeof ( Resources ) . Assembly ) ; 
  Test C# function definition:    : 
    global :: System . Resources . ResourceManager temp = new global :: System . Resources . ResourceManager ( "ClientGUI.Properties.Resources" , typeof ( Resources ) . Assembly ) ; 
  Test control definition:        : 
    global :: System . Resources . ResourceManager temp = new global :: System . Resources . ResourceManager ( "ClientGUI.Properties.Resources" , typeof ( Resources ) . Assembly ) ; 
  Test C# declaration:            : 
    global :: System . Resources . ResourceManager temp = new global :: System . Resources . ResourceManager ( "ClientGUI.Properties.Resources" , typeof ( Resources ) . Assembly ) ; 
  executable     : 
    global :: System . Resources . ResourceManager temp = new global :: System . Resources . ResourceManager ( "ClientGUI.Properties.Resources" , typeof ( Resources ) . Assembly ) ; 
  Test C# executable:             : 
    global :: System . Resources . ResourceManager temp = new global :: System . Resources . ResourceManager ( "ClientGUI.Properties.Resources" , typeof ( Resources ) . Assembly ) ; 
  executable     : resourceMan = temp ; 
  Handle C# executable:           : 
    global :: System . Resources . ResourceManager temp = new global :: System . Resources . ResourceManager ( "ClientGUI.Properties.Resources" , typeof ( Resources ) . Assembly ) ; 
--- stack size = 5 ---
  Test begin scope                : resourceMan = temp ; 
  Test end scope                  : resourceMan = temp ; 
  Test preproc statement:         : resourceMan = temp ; 
  Test namespace definition:      : resourceMan = temp ; 
  Test class definition:          : resourceMan = temp ; 
  executable     : return resourceMan ; 
  Test struct definition:         : resourceMan = temp ; 
--- stack size = 4 ---
  Test C# function definition:    : resourceMan = temp ; 
--- stack size = 3 ---
  Test control definition:        : resourceMan = temp ; 
  Test C# declaration:            : resourceMan = temp ; 
  Test C# executable:             : resourceMan = temp ; 
  Handle C# executable:           : resourceMan = temp ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : return resourceMan ; 
  Test end scope                  : return resourceMan ; 
  Test preproc statement:         : return resourceMan ; 
  Test namespace definition:      : return resourceMan ; 
  Test class definition:          : return resourceMan ; 
  Test struct definition:         : return resourceMan ; 
  Test C# function definition:    : return resourceMan ; 
  Test control definition:        : return resourceMan ; 
  Test C# declaration:            : return resourceMan ; 
  Test C# executable:             : return resourceMan ; 
  Handle C# executable:           : return resourceMan ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    [ global :: System . ComponentModel . EditorBrowsableAttribute ( global :: System . ComponentModel . EditorBrowsableState . Advanced ) ] internal static global :: System . Globalization . CultureInfo Culture { 
  handle begin scope              : 
    [ global :: System . ComponentModel . EditorBrowsableAttribute ( global :: System . ComponentModel . EditorBrowsableState . Advanced ) ] internal static global :: System . Globalization . CultureInfo Culture { 
--- stack size = 4 ---
  Test end scope                  : 
    [ global :: System . ComponentModel . EditorBrowsableAttribute ( global :: System . ComponentModel . EditorBrowsableState . Advanced ) ] internal static global :: System . Globalization . CultureInfo Culture { 
  Test preproc statement:         : 
    [ global :: System . ComponentModel . EditorBrowsableAttribute ( global :: System . ComponentModel . EditorBrowsableState . Advanced ) ] internal static global :: System . Globalization . CultureInfo Culture { 
  Test namespace definition:      : 
    [ global :: System . ComponentModel . EditorBrowsableAttribute ( global :: System . ComponentModel . EditorBrowsableState . Advanced ) ] internal static global :: System . Globalization . CultureInfo Culture { 
  function def   : 
    [ global :: System . ComponentModel . EditorBrowsableAttribute ( global :: System . ComponentModel . EditorBrowsableState . Advanced ) ] internal static global :: System . Globalization . CultureInfo Culture { 
  Test class definition:          : 
    [ global :: System . ComponentModel . EditorBrowsableAttribute ( global :: System . ComponentModel . EditorBrowsableState . Advanced ) ] internal static global :: System . Globalization . CultureInfo Culture { 
  Test struct definition:         : 
    [ global :: System . ComponentModel . EditorBrowsableAttribute ( global :: System . ComponentModel . EditorBrowsableState . Advanced ) ] internal static global :: System . Globalization . CultureInfo Culture { 
  Test C# function definition:    : 
    [ global :: System . ComponentModel . EditorBrowsableAttribute ( global :: System . ComponentModel . EditorBrowsableState . Advanced ) ] internal static global :: System . Globalization . CultureInfo Culture { 
  Handle C# function definition:  : 
    [ global :: System . ComponentModel . EditorBrowsableAttribute ( global :: System . ComponentModel . EditorBrowsableState . Advanced ) ] internal static global :: System . Globalization . CultureInfo Culture { 
  Test begin scope                : get { 
  handle begin scope              : get { 
--- stack size = 5 ---
  Test end scope                  : get { 
  Test preproc statement:         : get { 
  Test namespace definition:      : get { 
  default:       : get { 
  Test class definition:          : get { 
  Test struct definition:         : get { 
  Test C# function definition:    : get { 
  Test control definition:        : get { 
  executable     : return resourceCulture ; 
  Test C# declaration:            : get { 
--- stack size = 4 ---
  Test C# executable:             : get { 
  Test default:                   : get { 
  Handle default:                 : get { 
  Test begin scope                : return resourceCulture ; 
  Test end scope                  : return resourceCulture ; 
  Test preproc statement:         : return resourceCulture ; 
  Test namespace definition:      : return resourceCulture ; 
  Test class definition:          : return resourceCulture ; 
  Test struct definition:         : return resourceCulture ; 
  Test C# function definition:    : return resourceCulture ; 
  Test control definition:        : return resourceCulture ; 
  Test C# declaration:            : return resourceCulture ; 
  Test C# executable:             : return resourceCulture ; 
  Handle C# executable:           : return resourceCulture ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : set { 
  handle begin scope              : set { 
--- stack size = 5 ---
  Test end scope                  : set { 
  Test preproc statement:         : set { 
  Test namespace definition:      : set { 
  default:       : set { 
  Test class definition:          : set { 
  Test struct definition:         : set { 
  Test C# function definition:    : set { 
  Test control definition:        : set { 
  Test C# declaration:            : set { 
  Test C# executable:             : set { 
  Test default:                   : set { 
  executable     : resourceCulture = value ; 
  Handle default:                 : set { 
--- stack size = 4 ---
  Test begin scope                : resourceCulture = value ; 
  Test end scope                  : resourceCulture = value ; 
--- stack size = 3 ---
  Test preproc statement:         : resourceCulture = value ; 
--- stack size = 2 ---
  Test namespace definition:      : resourceCulture = value ; 
--- stack size = 1 ---
  Test class definition:          : resourceCulture = value ; 
  Test struct definition:         : resourceCulture = value ; 
  Test C# function definition:    : resourceCulture = value ; 
  Test control definition:        : resourceCulture = value ; 
  Test C# declaration:            : resourceCulture = value ; 
  Test C# executable:             : resourceCulture = value ; 
  Handle C# executable:           : resourceCulture = value ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : namespace ClientGUI . Properties { 
  handle begin scope              : namespace ClientGUI . Properties { 
--- stack size = 2 ---
  Test end scope                  : namespace ClientGUI . Properties { 
  namespace def  : namespace ClientGUI . Properties { 
  Test preproc statement:         : namespace ClientGUI . Properties { 
  Test namespace definition:      : namespace ClientGUI . Properties { 
  Handle namespace definition:    : namespace ClientGUI . Properties { 
  Test begin scope                : 
    [ global :: System . Runtime . CompilerServices . CompilerGeneratedAttribute ( ) ] [ global :: System . CodeDom . Compiler . GeneratedCodeAttribute ( "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator" , "11.0.0.0" ) ] internal sealed partial class Settings : global :: System . Configuration . ApplicationSettingsBase { 
  handle begin scope              : 
    [ global :: System . Runtime . CompilerServices . CompilerGeneratedAttribute ( ) ] [ global :: System . CodeDom . Compiler . GeneratedCodeAttribute ( "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator" , "11.0.0.0" ) ] internal sealed partial class Settings : global :: System . Configuration . ApplicationSettingsBase { 
--- stack size = 3 ---
  Test end scope                  : 
    [ global :: System . Runtime . CompilerServices . CompilerGeneratedAttribute ( ) ] [ global :: System . CodeDom . Compiler . GeneratedCodeAttribute ( "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator" , "11.0.0.0" ) ] internal sealed partial class Settings : global :: System . Configuration . ApplicationSettingsBase { 
  class def      : 
    [ global :: System . Runtime . CompilerServices . CompilerGeneratedAttribute ( ) ] [ global :: System . CodeDom . Compiler . GeneratedCodeAttribute ( "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator" , "11.0.0.0" ) ] internal sealed partial class Settings : global :: System . Configuration . ApplicationSettingsBase { 
  Test preproc statement:         : 
    [ global :: System . Runtime . CompilerServices . CompilerGeneratedAttribute ( ) ] [ global :: System . CodeDom . Compiler . GeneratedCodeAttribute ( "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator" , "11.0.0.0" ) ] internal sealed partial class Settings : global :: System . Configuration . ApplicationSettingsBase { 
  Test namespace definition:      : 
    [ global :: System . Runtime . CompilerServices . CompilerGeneratedAttribute ( ) ] [ global :: System . CodeDom . Compiler . GeneratedCodeAttribute ( "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator" , "11.0.0.0" ) ] internal sealed partial class Settings : global :: System . Configuration . ApplicationSettingsBase { 
  Test class definition:          : 
    [ global :: System . Runtime . CompilerServices . CompilerGeneratedAttribute ( ) ] [ global :: System . CodeDom . Compiler . GeneratedCodeAttribute ( "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator" , "11.0.0.0" ) ] internal sealed partial class Settings : global :: System . Configuration . ApplicationSettingsBase { 
  Handle class definition:        : 
    [ global :: System . Runtime . CompilerServices . CompilerGeneratedAttribute ( ) ] [ global :: System . CodeDom . Compiler . GeneratedCodeAttribute ( "Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator" , "11.0.0.0" ) ] internal sealed partial class Settings : global :: System . Configuration . ApplicationSettingsBase { 
  Test begin scope                : 
    private static Settings defaultInstance = ( ( Settings ) ( global :: System . Configuration . ApplicationSettingsBase . Synchronized ( new Settings ( ) ) ) ) ; 
  Test end scope                  : 
    private static Settings defaultInstance = ( ( Settings ) ( global :: System . Configuration . ApplicationSettingsBase . Synchronized ( new Settings ( ) ) ) ) ; 
  Test preproc statement:         : 
    private static Settings defaultInstance = ( ( Settings ) ( global :: System . Configuration . ApplicationSettingsBase . Synchronized ( new Settings ( ) ) ) ) ; 
  Test namespace definition:      : 
    private static Settings defaultInstance = ( ( Settings ) ( global :: System . Configuration . ApplicationSettingsBase . Synchronized ( new Settings ( ) ) ) ) ; 
  Test class definition:          : 
    private static Settings defaultInstance = ( ( Settings ) ( global :: System . Configuration . ApplicationSettingsBase . Synchronized ( new Settings ( ) ) ) ) ; 
  data declar    : 
    private static Settings defaultInstance = ( ( Settings ) ( global :: System . Configuration . ApplicationSettingsBase . Synchronized ( new Settings ( ) ) ) ) ; 
  Test struct definition:         : 
    private static Settings defaultInstance = ( ( Settings ) ( global :: System . Configuration . ApplicationSettingsBase . Synchronized ( new Settings ( ) ) ) ) ; 
  Test C# function definition:    : 
    private static Settings defaultInstance = ( ( Settings ) ( global :: System . Configuration . ApplicationSettingsBase . Synchronized ( new Settings ( ) ) ) ) ; 
  Test control definition:        : 
    private static Settings defaultInstance = ( ( Settings ) ( global :: System . Configuration . ApplicationSettingsBase . Synchronized ( new Settings ( ) ) ) ) ; 
  Test C# declaration:            : 
    private static Settings defaultInstance = ( ( Settings ) ( global :: System . Configuration . ApplicationSettingsBase . Synchronized ( new Settings ( ) ) ) ) ; 
  Handle C# declaration:          : 
    private static Settings defaultInstance = ( ( Settings ) ( global :: System . Configuration . ApplicationSettingsBase . Synchronized ( new Settings ( ) ) ) ) ; 
  Test begin scope                : public static Settings Default { 
  handle begin scope              : public static Settings Default { 
--- stack size = 4 ---
  Test end scope                  : public static Settings Default { 
  Test preproc statement:         : public static Settings Default { 
  Test namespace definition:      : public static Settings Default { 
  Test class definition:          : public static Settings Default { 
  default:       : public static Settings Default { 
  Test struct definition:         : public static Settings Default { 
  Test C# function definition:    : public static Settings Default { 
  Test control definition:        : public static Settings Default { 
  Test C# declaration:            : public static Settings Default { 
  Test C# executable:             : public static Settings Default { 
  Test default:                   : public static Settings Default { 
  Handle default:                 : public static Settings Default { 
  Test begin scope                : get { 
  handle begin scope              : get { 
--- stack size = 5 ---
  Test end scope                  : get { 
  Test preproc statement:         : get { 
  Test namespace definition:      : get { 
  default:       : get { 
  Test class definition:          : get { 
  Test struct definition:         : get { 
  Test C# function definition:    : get { 
  Test control definition:        : get { 
  executable     : return defaultInstance ; 
  Test C# declaration:            : get { 
--- stack size = 4 ---
  Test C# executable:             : get { 
  Test default:                   : get { 
--- stack size = 3 ---
  Handle default:                 : get { 
  Test begin scope                : return defaultInstance ; 
--- stack size = 2 ---
  Test end scope                  : return defaultInstance ; 
--- stack size = 1 ---
  Test preproc statement:         : return defaultInstance ; 
  Test namespace definition:      : return defaultInstance ; 
  Test class definition:          : return defaultInstance ; 
  Test struct definition:         : return defaultInstance ; 
  Test C# function definition:    : return defaultInstance ; 
  using declar   : using System ; 
  Test control definition:        : return defaultInstance ; 
  Test C# declaration:            : return defaultInstance ; 
  Test C# executable:             : return defaultInstance ; 
  using declar   : using System . Collections . Generic ; 
  Handle C# executable:           : return defaultInstance ; 
  Test begin scope                : } 
  using declar   : using System . Linq ; 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  using declar   : using System . Text ; 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System . Threading . Tasks ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Collections . Generic ; 
  Test end scope                  : using System . Collections . Generic ; 
  Test preproc statement:         : using System . Collections . Generic ; 
  Test namespace definition:      : using System . Collections . Generic ; 
  Test class definition:          : using System . Collections . Generic ; 
  Test struct definition:         : using System . Collections . Generic ; 
  Test C# function definition:    : using System . Collections . Generic ; 
  Test control definition:        : using System . Collections . Generic ; 
  Test C# declaration:            : using System . Collections . Generic ; 
  Handle C# declaration:          : using System . Collections . Generic ; 
  Test begin scope                : using System . Linq ; 
  Test end scope                  : using System . Linq ; 
  Test preproc statement:         : using System . Linq ; 
  Test namespace definition:      : using System . Linq ; 
  Test class definition:          : using System . Linq ; 
  Test struct definition:         : using System . Linq ; 
  Test C# function definition:    : using System . Linq ; 
  Test control definition:        : using System . Linq ; 
  Test C# declaration:            : using System . Linq ; 
  Handle C# declaration:          : using System . Linq ; 
  Test begin scope                : using System . Text ; 
  Test end scope                  : using System . Text ; 
  Test preproc statement:         : using System . Text ; 
  Test namespace definition:      : using System . Text ; 
  Test class definition:          : using System . Text ; 
  Test struct definition:         : using System . Text ; 
  Test C# function definition:    : using System . Text ; 
  Test control definition:        : using System . Text ; 
  Test C# declaration:            : using System . Text ; 
  Handle C# declaration:          : using System . Text ; 
  Test begin scope                : using System . Threading . Tasks ; 
  Test end scope                  : using System . Threading . Tasks ; 
  Test preproc statement:         : using System . Threading . Tasks ; 
  Test namespace definition:      : using System . Threading . Tasks ; 
  Test class definition:          : using System . Threading . Tasks ; 
  Test struct definition:         : using System . Threading . Tasks ; 
  Test C# function definition:    : using System . Threading . Tasks ; 
  Test control definition:        : using System . Threading . Tasks ; 
  Test C# declaration:            : using System . Threading . Tasks ; 
  Handle C# declaration:          : using System . Threading . Tasks ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Dependency { 
  handle begin scope              : public class Dependency { 
--- stack size = 3 ---
  Test end scope                  : public class Dependency { 
  class def      : public class Dependency { 
  Test preproc statement:         : public class Dependency { 
  Test namespace definition:      : public class Dependency { 
  Test class definition:          : public class Dependency { 
  Handle class definition:        : public class Dependency { 
  Test begin scope                : public int Multiply ( int a , int b ) { 
  handle begin scope              : public int Multiply ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Multiply ( int a , int b ) { 
  Test preproc statement:         : public int Multiply ( int a , int b ) { 
  Test namespace definition:      : public int Multiply ( int a , int b ) { 
  Test class definition:          : public int Multiply ( int a , int b ) { 
  function def   : public int Multiply ( int a , int b ) { 
  Test struct definition:         : public int Multiply ( int a , int b ) { 
  Test C# function definition:    : public int Multiply ( int a , int b ) { 
  Handle C# function definition:  : public int Multiply ( int a , int b ) { 
  default:       : return a * b ; 
  Test begin scope                : return a * b ; 
--- stack size = 3 ---
  Test end scope                  : return a * b ; 
  Test preproc statement:         : return a * b ; 
  Test namespace definition:      : return a * b ; 
  Test class definition:          : return a * b ; 
  Test struct definition:         : return a * b ; 
  Test C# function definition:    : return a * b ; 
  Test control definition:        : return a * b ; 
  Test C# declaration:            : return a * b ; 
  Test C# executable:             : return a * b ; 
  Test default:                   : return a * b ; 
  Handle default:                 : return a * b ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public int Addition ( int a , int b ) { 
  handle begin scope              : public int Addition ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Addition ( int a , int b ) { 
  Test preproc statement:         : public int Addition ( int a , int b ) { 
  Test namespace definition:      : public int Addition ( int a , int b ) { 
  Test class definition:          : public int Addition ( int a , int b ) { 
  function def   : public int Addition ( int a , int b ) { 
  Test struct definition:         : public int Addition ( int a , int b ) { 
  Test C# function definition:    : public int Addition ( int a , int b ) { 
  Handle C# function definition:  : public int Addition ( int a , int b ) { 
  Test begin scope                : return a + b ; 
  Test end scope                  : return a + b ; 
  Test preproc statement:         : return a + b ; 
  executable     : return a + b ; 
  Test namespace definition:      : return a + b ; 
--- stack size = 3 ---
  Test class definition:          : return a + b ; 
--- stack size = 2 ---
  Test struct definition:         : return a + b ; 
--- stack size = 1 ---
  Test C# function definition:    : return a + b ; 
  Test control definition:        : return a + b ; 
  Test C# declaration:            : return a + b ; 
  Test C# executable:             : return a + b ; 
  Handle C# executable:           : return a + b ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  using declar   : using System ; 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  using declar   : using System . Collections . Generic ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  using declar   : using System . Linq ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  using declar   : using System . Text ; 
  Test begin scope                : using System . Collections . Generic ; 
  Test end scope                  : using System . Collections . Generic ; 
  Test preproc statement:         : using System . Collections . Generic ; 
  Test namespace definition:      : using System . Collections . Generic ; 
  using declar   : using System . Threading . Tasks ; 
  Test class definition:          : using System . Collections . Generic ; 
  Test struct definition:         : using System . Collections . Generic ; 
  Test C# function definition:    : using System . Collections . Generic ; 
  Test control definition:        : using System . Collections . Generic ; 
  Test C# declaration:            : using System . Collections . Generic ; 
  Handle C# declaration:          : using System . Collections . Generic ; 
  Test begin scope                : using System . Linq ; 
  Test end scope                  : using System . Linq ; 
  Test preproc statement:         : using System . Linq ; 
  Test namespace definition:      : using System . Linq ; 
  Test class definition:          : using System . Linq ; 
  Test struct definition:         : using System . Linq ; 
  Test C# function definition:    : using System . Linq ; 
  Test control definition:        : using System . Linq ; 
  Test C# declaration:            : using System . Linq ; 
  Handle C# declaration:          : using System . Linq ; 
  Test begin scope                : using System . Text ; 
  Test end scope                  : using System . Text ; 
  Test preproc statement:         : using System . Text ; 
  Test namespace definition:      : using System . Text ; 
  Test class definition:          : using System . Text ; 
  Test struct definition:         : using System . Text ; 
  Test C# function definition:    : using System . Text ; 
  Test control definition:        : using System . Text ; 
  Test C# declaration:            : using System . Text ; 
  Handle C# declaration:          : using System . Text ; 
  Test begin scope                : using System . Threading . Tasks ; 
  Test end scope                  : using System . Threading . Tasks ; 
  Test preproc statement:         : using System . Threading . Tasks ; 
  Test namespace definition:      : using System . Threading . Tasks ; 
  Test class definition:          : using System . Threading . Tasks ; 
  Test struct definition:         : using System . Threading . Tasks ; 
  Test C# function definition:    : using System . Threading . Tasks ; 
  Test control definition:        : using System . Threading . Tasks ; 
  Test C# declaration:            : using System . Threading . Tasks ; 
  Handle C# declaration:          : using System . Threading . Tasks ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Dependency { 
  handle begin scope              : public class Dependency { 
--- stack size = 3 ---
  Test end scope                  : public class Dependency { 
  class def      : public class Dependency { 
  Test preproc statement:         : public class Dependency { 
  Test namespace definition:      : public class Dependency { 
  Test class definition:          : public class Dependency { 
  Handle class definition:        : public class Dependency { 
  Test begin scope                : public int Multiply ( int a , int b ) { 
  handle begin scope              : public int Multiply ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Multiply ( int a , int b ) { 
  Test preproc statement:         : public int Multiply ( int a , int b ) { 
  Test namespace definition:      : public int Multiply ( int a , int b ) { 
  function def   : public int Multiply ( int a , int b ) { 
  Test class definition:          : public int Multiply ( int a , int b ) { 
  Test struct definition:         : public int Multiply ( int a , int b ) { 
  Test C# function definition:    : public int Multiply ( int a , int b ) { 
  default:       : return a * b ; 
  Handle C# function definition:  : public int Multiply ( int a , int b ) { 
--- stack size = 3 ---
  Test begin scope                : return a * b ; 
  Test end scope                  : return a * b ; 
  Test preproc statement:         : return a * b ; 
  Test namespace definition:      : return a * b ; 
  Test class definition:          : return a * b ; 
  Test struct definition:         : return a * b ; 
  Test C# function definition:    : return a * b ; 
  Test control definition:        : return a * b ; 
  Test C# declaration:            : return a * b ; 
  Test C# executable:             : return a * b ; 
  Test default:                   : return a * b ; 
  Handle default:                 : return a * b ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public int Addition ( int a , int b ) { 
  handle begin scope              : public int Addition ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Addition ( int a , int b ) { 
  Test preproc statement:         : public int Addition ( int a , int b ) { 
  Test namespace definition:      : public int Addition ( int a , int b ) { 
  function def   : public int Addition ( int a , int b ) { 
  Test class definition:          : public int Addition ( int a , int b ) { 
  Test struct definition:         : public int Addition ( int a , int b ) { 
  Test C# function definition:    : public int Addition ( int a , int b ) { 
  executable     : return a + b ; 
  Handle C# function definition:  : public int Addition ( int a , int b ) { 
--- stack size = 3 ---
  Test begin scope                : return a + b ; 
--- stack size = 2 ---
  Test end scope                  : return a + b ; 
--- stack size = 1 ---
  Test preproc statement:         : return a + b ; 
  Test namespace definition:      : return a + b ; 
  Test class definition:          : return a + b ; 
  Test struct definition:         : return a + b ; 
  Test C# function definition:    : return a + b ; 
  Test control definition:        : return a + b ; 
  Test C# declaration:            : return a + b ; 
  Test C# executable:             : return a + b ; 
  Handle C# executable:           : return a + b ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  using declar   : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  using declar   : using System . Collections . Generic ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Collections . Generic ; 
  Test end scope                  : using System . Collections . Generic ; 
  Test preproc statement:         : using System . Collections . Generic ; 
  Test namespace definition:      : using System . Collections . Generic ; 
  using declar   : using System . Linq ; 
  Test class definition:          : using System . Collections . Generic ; 
  Test struct definition:         : using System . Collections . Generic ; 
  using declar   : using System . Text ; 
  Test C# function definition:    : using System . Collections . Generic ; 
  Test control definition:        : using System . Collections . Generic ; 
  Test C# declaration:            : using System . Collections . Generic ; 
  using declar   : using System . Threading . Tasks ; 
  Handle C# declaration:          : using System . Collections . Generic ; 
  Test begin scope                : using System . Linq ; 
  Test end scope                  : using System . Linq ; 
  Test preproc statement:         : using System . Linq ; 
  Test namespace definition:      : using System . Linq ; 
  Test class definition:          : using System . Linq ; 
  Test struct definition:         : using System . Linq ; 
  Test C# function definition:    : using System . Linq ; 
  Test control definition:        : using System . Linq ; 
  Test C# declaration:            : using System . Linq ; 
  Handle C# declaration:          : using System . Linq ; 
  Test begin scope                : using System . Text ; 
  Test end scope                  : using System . Text ; 
  Test preproc statement:         : using System . Text ; 
  Test namespace definition:      : using System . Text ; 
  Test class definition:          : using System . Text ; 
  Test struct definition:         : using System . Text ; 
  Test C# function definition:    : using System . Text ; 
  Test control definition:        : using System . Text ; 
  Test C# declaration:            : using System . Text ; 
  Handle C# declaration:          : using System . Text ; 
  Test begin scope                : using System . Threading . Tasks ; 
  Test end scope                  : using System . Threading . Tasks ; 
  Test preproc statement:         : using System . Threading . Tasks ; 
  Test namespace definition:      : using System . Threading . Tasks ; 
  Test class definition:          : using System . Threading . Tasks ; 
  Test struct definition:         : using System . Threading . Tasks ; 
  Test C# function definition:    : using System . Threading . Tasks ; 
  Test control definition:        : using System . Threading . Tasks ; 
  Test C# declaration:            : using System . Threading . Tasks ; 
  Handle C# declaration:          : using System . Threading . Tasks ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Dependency { 
  handle begin scope              : public class Dependency { 
--- stack size = 3 ---
  Test end scope                  : public class Dependency { 
  class def      : public class Dependency { 
  Test preproc statement:         : public class Dependency { 
  Test namespace definition:      : public class Dependency { 
  Test class definition:          : public class Dependency { 
  Handle class definition:        : public class Dependency { 
  Test begin scope                : public int Multiply ( int a , int b ) { 
  handle begin scope              : public int Multiply ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Multiply ( int a , int b ) { 
  Test preproc statement:         : public int Multiply ( int a , int b ) { 
  Test namespace definition:      : public int Multiply ( int a , int b ) { 
  function def   : public int Multiply ( int a , int b ) { 
  Test class definition:          : public int Multiply ( int a , int b ) { 
  Test struct definition:         : public int Multiply ( int a , int b ) { 
  Test C# function definition:    : public int Multiply ( int a , int b ) { 
  Handle C# function definition:  : public int Multiply ( int a , int b ) { 
  default:       : return a * b ; 
  Test begin scope                : return a * b ; 
--- stack size = 3 ---
  Test end scope                  : return a * b ; 
  Test preproc statement:         : return a * b ; 
  Test namespace definition:      : return a * b ; 
  Test class definition:          : return a * b ; 
  Test struct definition:         : return a * b ; 
  Test C# function definition:    : return a * b ; 
  Test control definition:        : return a * b ; 
  Test C# declaration:            : return a * b ; 
  Test C# executable:             : return a * b ; 
  Test default:                   : return a * b ; 
  Handle default:                 : return a * b ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public int Addition ( int a , int b ) { 
  handle begin scope              : public int Addition ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Addition ( int a , int b ) { 
  Test preproc statement:         : public int Addition ( int a , int b ) { 
  Test namespace definition:      : public int Addition ( int a , int b ) { 
  Test class definition:          : public int Addition ( int a , int b ) { 
  Test struct definition:         : public int Addition ( int a , int b ) { 
  function def   : public int Addition ( int a , int b ) { 
  Test C# function definition:    : public int Addition ( int a , int b ) { 
  Handle C# function definition:  : public int Addition ( int a , int b ) { 
  Test begin scope                : return a + b ; 
  Test end scope                  : return a + b ; 
  Test preproc statement:         : return a + b ; 
  executable     : return a + b ; 
  Test namespace definition:      : return a + b ; 
--- stack size = 3 ---
  Test class definition:          : return a + b ; 
  Test struct definition:         : return a + b ; 
  Test C# function definition:    : return a + b ; 
  Test control definition:        : return a + b ; 
  Test C# declaration:            : return a + b ; 
  Test C# executable:             : return a + b ; 
  Handle C# executable:           : return a + b ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public int Divide ( int a , int b ) { 
  handle begin scope              : public int Divide ( int a , int b ) { 
--- stack size = 4 ---
  Test end scope                  : public int Divide ( int a , int b ) { 
  Test preproc statement:         : public int Divide ( int a , int b ) { 
  Test namespace definition:      : public int Divide ( int a , int b ) { 
  Test class definition:          : public int Divide ( int a , int b ) { 
  Test struct definition:         : public int Divide ( int a , int b ) { 
  function def   : public int Divide ( int a , int b ) { 
  Test C# function definition:    : public int Divide ( int a , int b ) { 
  Handle C# function definition:  : public int Divide ( int a , int b ) { 
  Test begin scope                : return a / b ; 
  Test end scope                  : return a / b ; 
  Test preproc statement:         : return a / b ; 
  Test namespace definition:      : return a / b ; 
  Test class definition:          : return a / b ; 
  Test struct definition:         : return a / b ; 
  Test C# function definition:    : return a / b ; 
  Test control definition:        : return a / b ; 
  executable     : return a / b ; 
  Test C# declaration:            : return a / b ; 
--- stack size = 3 ---
  Test C# executable:             : return a / b ; 
  Handle C# executable:           : return a / b ; 
--- stack size = 2 ---
  Test begin scope                : } 
--- stack size = 1 ---
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  using declar   : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  namespace def  : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public interface IDriver { 
  handle begin scope              : public interface IDriver { 
--- stack size = 3 ---
  Test end scope                  : public interface IDriver { 
  Test preproc statement:         : public interface IDriver { 
  Test namespace definition:      : public interface IDriver { 
  interface def  : public interface IDriver { 
  Test class definition:          : public interface IDriver { 
  Handle class definition:        : public interface IDriver { 
  Test begin scope                : void display ( ) ; 
  Test end scope                  : void display ( ) ; 
  function declar: void display ( ) ; 
  Test preproc statement:         : void display ( ) ; 
  function declar: bool test ( ) ; 
  Test namespace definition:      : void display ( ) ; 
--- stack size = 2 ---
  Test class definition:          : void display ( ) ; 
  Test struct definition:         : void display ( ) ; 
  Test C# function definition:    : void display ( ) ; 
  Test control definition:        : void display ( ) ; 
  Test C# declaration:            : void display ( ) ; 
  Handle C# declaration:          : void display ( ) ; 
  Test begin scope                : bool test ( ) ; 
  Test end scope                  : bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
  Test namespace definition:      : bool test ( ) ; 
  Test class definition:          : bool test ( ) ; 
  Test struct definition:         : bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
  Test control definition:        : bool test ( ) ; 
  Test C# declaration:            : bool test ( ) ; 
  Handle C# declaration:          : bool test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public interface ITestCode { 
  handle begin scope              : public interface ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public interface ITestCode { 
  Test preproc statement:         : public interface ITestCode { 
  interface def  : public interface ITestCode { 
  Test namespace definition:      : public interface ITestCode { 
  Test class definition:          : public interface ITestCode { 
  Handle class definition:        : public interface ITestCode { 
  function declar: bool test ( ) ; 
  Test begin scope                : bool test ( ) ; 
--- stack size = 2 ---
  Test end scope                  : bool test ( ) ; 
--- stack size = 1 ---
  Test preproc statement:         : bool test ( ) ; 
  Test namespace definition:      : bool test ( ) ; 
  Test class definition:          : bool test ( ) ; 
  Test struct definition:         : bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
  Test control definition:        : bool test ( ) ; 
  Test C# declaration:            : bool test ( ) ; 
  Handle C# declaration:          : bool test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  using declar   : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  namespace def  : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public interface IDriver { 
  handle begin scope              : public interface IDriver { 
--- stack size = 3 ---
  interface def  : public interface IDriver { 
  Test end scope                  : public interface IDriver { 
  Test preproc statement:         : public interface IDriver { 
  function declar: void display ( ) ; 
  Test namespace definition:      : public interface IDriver { 
  Test class definition:          : public interface IDriver { 
  Handle class definition:        : public interface IDriver { 
  Test begin scope                : void display ( ) ; 
  Test end scope                  : void display ( ) ; 
  Test preproc statement:         : void display ( ) ; 
  function declar: bool test ( ) ; 
  Test namespace definition:      : void display ( ) ; 
--- stack size = 2 ---
  Test class definition:          : void display ( ) ; 
  Test struct definition:         : void display ( ) ; 
  Test C# function definition:    : void display ( ) ; 
  Test control definition:        : void display ( ) ; 
  Test C# declaration:            : void display ( ) ; 
  Handle C# declaration:          : void display ( ) ; 
  Test begin scope                : bool test ( ) ; 
  Test end scope                  : bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
  Test namespace definition:      : bool test ( ) ; 
  Test class definition:          : bool test ( ) ; 
  Test struct definition:         : bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
  Test control definition:        : bool test ( ) ; 
  Test C# declaration:            : bool test ( ) ; 
  Handle C# declaration:          : bool test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public interface ITestCode { 
  handle begin scope              : public interface ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public interface ITestCode { 
  Test preproc statement:         : public interface ITestCode { 
  Test namespace definition:      : public interface ITestCode { 
  Test class definition:          : public interface ITestCode { 
  Handle class definition:        : public interface ITestCode { 
  Test begin scope                : bool test ( ) ; 
  Test end scope                  : bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
  Test namespace definition:      : bool test ( ) ; 
  interface def  : public interface ITestCode { 
  Test class definition:          : bool test ( ) ; 
  Test struct definition:         : bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
  Test control definition:        : bool test ( ) ; 
  function declar: bool test ( ) ; 
  Test C# declaration:            : bool test ( ) ; 
--- stack size = 2 ---
  Handle C# declaration:          : bool test ( ) ; 
  Test begin scope                : } 
--- stack size = 1 ---
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  using declar   : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public interface IDriver { 
  handle begin scope              : public interface IDriver { 
--- stack size = 3 ---
  Test end scope                  : public interface IDriver { 
  interface def  : public interface IDriver { 
  Test preproc statement:         : public interface IDriver { 
  Test namespace definition:      : public interface IDriver { 
  Test class definition:          : public interface IDriver { 
  Handle class definition:        : public interface IDriver { 
  Test begin scope                : void display ( ) ; 
  Test end scope                  : void display ( ) ; 
  Test preproc statement:         : void display ( ) ; 
  Test namespace definition:      : void display ( ) ; 
  Test class definition:          : void display ( ) ; 
  Test struct definition:         : void display ( ) ; 
  Test C# function definition:    : void display ( ) ; 
  Test control definition:        : void display ( ) ; 
  Test C# declaration:            : void display ( ) ; 
  Handle C# declaration:          : void display ( ) ; 
  function declar: void display ( ) ; 
  Test begin scope                : bool test ( ) ; 
  Test end scope                  : bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
  Test namespace definition:      : bool test ( ) ; 
  Test class definition:          : bool test ( ) ; 
  Test struct definition:         : bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
  Test control definition:        : bool test ( ) ; 
  Test C# declaration:            : bool test ( ) ; 
  Handle C# declaration:          : bool test ( ) ; 
  function declar: bool test ( ) ; 
  Test begin scope                : } 
--- stack size = 2 ---
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public interface ITestCode { 
  handle begin scope              : public interface ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public interface ITestCode { 
  Test preproc statement:         : public interface ITestCode { 
  Test namespace definition:      : public interface ITestCode { 
  interface def  : public interface ITestCode { 
  Test class definition:          : public interface ITestCode { 
  Handle class definition:        : public interface ITestCode { 
  Test begin scope                : bool test ( ) ; 
  Test end scope                  : bool test ( ) ; 
  Test preproc statement:         : bool test ( ) ; 
  Test namespace definition:      : bool test ( ) ; 
  Test class definition:          : bool test ( ) ; 
  Test struct definition:         : bool test ( ) ; 
  Test C# function definition:    : bool test ( ) ; 
  function declar: bool test ( ) ; 
  Test control definition:        : bool test ( ) ; 
--- stack size = 2 ---
  Test C# declaration:            : bool test ( ) ; 
  Handle C# declaration:          : bool test ( ) ; 
--- stack size = 1 ---
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  using declar   : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Tested : ITestCode { 
  handle begin scope              : public class Tested : ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public class Tested : ITestCode { 
  Test preproc statement:         : public class Tested : ITestCode { 
  class def      : public class Tested : ITestCode { 
  Test namespace definition:      : public class Tested : ITestCode { 
  Test class definition:          : public class Tested : ITestCode { 
  Handle class definition:        : public class Tested : ITestCode { 
  Test begin scope                : public Tested ( ) { 
  handle begin scope              : public Tested ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Tested ( ) { 
  Test preproc statement:         : public Tested ( ) { 
  Test namespace definition:      : public Tested ( ) { 
  function def   : public Tested ( ) { 
  Test class definition:          : public Tested ( ) { 
  Test struct definition:         : public Tested ( ) { 
  Test C# function definition:    : public Tested ( ) { 
  Handle C# function definition:  : public Tested ( ) { 
  Test begin scope                : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test end scope                  : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test preproc statement:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test namespace definition:      : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test class definition:          : Console . Write ( "\n    constructing instance of Test code" ) ; 
  executable     : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test struct definition:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
--- stack size = 3 ---
  Test C# function definition:    : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test control definition:        : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# declaration:            : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# executable:             : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Handle C# executable:           : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public bool test ( ) { 
  handle begin scope              : public bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public bool test ( ) { 
  Test preproc statement:         : public bool test ( ) { 
  Test namespace definition:      : public bool test ( ) { 
  Test class definition:          : public bool test ( ) { 
  Test struct definition:         : public bool test ( ) { 
  Test C# function definition:    : public bool test ( ) { 
  function def   : public bool test ( ) { 
  Handle C# function definition:  : public bool test ( ) { 
  Test begin scope                : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test end scope                  : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test class definition:          : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test struct definition:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test control definition:        : Console . Write ( "\n    Production code - TestedLib" ) ; 
  data declar    : Dependency tld = new Dependency ( ) ; 
  Test C# declaration:            : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# executable:             : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test begin scope                : Dependency tld = new Dependency ( ) ; 
  Test end scope                  : Dependency tld = new Dependency ( ) ; 
  executable     : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test preproc statement:         : Dependency tld = new Dependency ( ) ; 
  Test namespace definition:      : Dependency tld = new Dependency ( ) ; 
  Test class definition:          : Dependency tld = new Dependency ( ) ; 
  Test struct definition:         : Dependency tld = new Dependency ( ) ; 
  Test C# function definition:    : Dependency tld = new Dependency ( ) ; 
  Test control definition:        : Dependency tld = new Dependency ( ) ; 
  Test C# declaration:            : Dependency tld = new Dependency ( ) ; 
  Handle C# declaration:          : Dependency tld = new Dependency ( ) ; 
  Test begin scope                : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test end scope                  : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test class definition:          : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test struct definition:         : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  data declar    : int result = tld . Multiply ( 20 , 11 ) ; 
  Test C# function definition:    : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test control definition:        : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test C# executable:             : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test begin scope                : int result = tld . Multiply ( 20 , 11 ) ; 
  Test end scope                  : int result = tld . Multiply ( 20 , 11 ) ; 
  Test preproc statement:         : int result = tld . Multiply ( 20 , 11 ) ; 
  Test namespace definition:      : int result = tld . Multiply ( 20 , 11 ) ; 
  Test class definition:          : int result = tld . Multiply ( 20 , 11 ) ; 
  Test struct definition:         : int result = tld . Multiply ( 20 , 11 ) ; 
  executable     : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test C# function definition:    : int result = tld . Multiply ( 20 , 11 ) ; 
  Test control definition:        : int result = tld . Multiply ( 20 , 11 ) ; 
  Test C# declaration:            : int result = tld . Multiply ( 20 , 11 ) ; 
  Handle C# declaration:          : int result = tld . Multiply ( 20 , 11 ) ; 
  Test begin scope                : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test end scope                  : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test preproc statement:         : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test namespace definition:      : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test class definition:          : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test struct definition:         : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test C# function definition:    : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test control definition:        : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test C# declaration:            : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test C# executable:             : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Handle C# executable:           : 
    Console . Write ( "Expected result: " , 20 * 10 , "  Actual result: " , result , "\n" ) ; 
  Test begin scope                : if ( result == 200 ) { 
  handle begin scope              : if ( result == 200 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( result == 200 ) { 
  Test preproc statement:         : if ( result == 200 ) { 
  Test namespace definition:      : if ( result == 200 ) { 
  Test class definition:          : if ( result == 200 ) { 
  control def    : if ( result == 200 ) { 
  Test struct definition:         : if ( result == 200 ) { 
  Test C# function definition:    : if ( result == 200 ) { 
  Test control definition:        : if ( result == 200 ) { 
  Handle control definition:      : if ( result == 200 ) { 
  executable     : return true ; 
  Test begin scope                : return true ; 
--- stack size = 4 ---
  Test end scope                  : return true ; 
  Test preproc statement:         : return true ; 
  Test namespace definition:      : return true ; 
  Test class definition:          : return true ; 
  Test struct definition:         : return true ; 
  Test C# function definition:    : return true ; 
  Test control definition:        : return true ; 
  Test C# declaration:            : return true ; 
  Test C# executable:             : return true ; 
  Handle C# executable:           : return true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  control def    : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : return false ; 
  Test end scope                  : return false ; 
  executable     : return false ; 
  Test preproc statement:         : return false ; 
--- stack size = 4 ---
  Test namespace definition:      : return false ; 
--- stack size = 3 ---
  Test class definition:          : return false ; 
--- stack size = 2 ---
  Test struct definition:         : return false ; 
--- stack size = 1 ---
  Test C# function definition:    : return false ; 
  Test control definition:        : return false ; 
  Test C# declaration:            : return false ; 
  Test C# executable:             : return false ; 
  Handle C# executable:           : return false ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  using declar   : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  namespace def  : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Tested : ITestCode { 
  handle begin scope              : public class Tested : ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public class Tested : ITestCode { 
  Test preproc statement:         : public class Tested : ITestCode { 
  class def      : public class Tested : ITestCode { 
  Test namespace definition:      : public class Tested : ITestCode { 
  Test class definition:          : public class Tested : ITestCode { 
  Handle class definition:        : public class Tested : ITestCode { 
  Test begin scope                : public Tested ( ) { 
  handle begin scope              : public Tested ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Tested ( ) { 
  Test preproc statement:         : public Tested ( ) { 
  Test namespace definition:      : public Tested ( ) { 
  function def   : public Tested ( ) { 
  Test class definition:          : public Tested ( ) { 
  Test struct definition:         : public Tested ( ) { 
  Test C# function definition:    : public Tested ( ) { 
  Handle C# function definition:  : public Tested ( ) { 
  Test begin scope                : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test end scope                  : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test preproc statement:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test namespace definition:      : Console . Write ( "\n    constructing instance of Test code" ) ; 
  executable     : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test class definition:          : Console . Write ( "\n    constructing instance of Test code" ) ; 
--- stack size = 3 ---
  Test struct definition:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# function definition:    : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test control definition:        : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# declaration:            : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# executable:             : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Handle C# executable:           : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public bool test ( ) { 
  handle begin scope              : public bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public bool test ( ) { 
  Test preproc statement:         : public bool test ( ) { 
  Test namespace definition:      : public bool test ( ) { 
  Test class definition:          : public bool test ( ) { 
  function def   : public bool test ( ) { 
  Test struct definition:         : public bool test ( ) { 
  Test C# function definition:    : public bool test ( ) { 
  Handle C# function definition:  : public bool test ( ) { 
  Test begin scope                : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test end scope                  : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test class definition:          : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test struct definition:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test control definition:        : Console . Write ( "\n    Production code - TestedLib" ) ; 
  data declar    : Dependency tld = new Dependency ( ) ; 
  Test C# declaration:            : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# executable:             : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test begin scope                : Dependency tld = new Dependency ( ) ; 
  Test end scope                  : Dependency tld = new Dependency ( ) ; 
  Test preproc statement:         : Dependency tld = new Dependency ( ) ; 
  executable     : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test namespace definition:      : Dependency tld = new Dependency ( ) ; 
  Test class definition:          : Dependency tld = new Dependency ( ) ; 
  Test struct definition:         : Dependency tld = new Dependency ( ) ; 
  Test C# function definition:    : Dependency tld = new Dependency ( ) ; 
  Test control definition:        : Dependency tld = new Dependency ( ) ; 
  Test C# declaration:            : Dependency tld = new Dependency ( ) ; 
  Handle C# declaration:          : Dependency tld = new Dependency ( ) ; 
  Test begin scope                : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test end scope                  : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  data declar    : int result = tld . Multiply ( 20 , 11 ) ; 
  Test preproc statement:         : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test class definition:          : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test struct definition:         : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test control definition:        : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test C# executable:             : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Testing Multiplication: 20*10:" ) ; 
  Test begin scope                : int result = tld . Multiply ( 20 , 11 ) ; 
  Test end scope                  : int result = tld . Multiply ( 20 , 11 ) ; 
  executable     : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test preproc statement:         : int result = tld . Multiply ( 20 , 11 ) ; 
  Test namespace definition:      : int result = tld . Multiply ( 20 , 11 ) ; 
  Test class definition:          : int result = tld . Multiply ( 20 , 11 ) ; 
  Test struct definition:         : int result = tld . Multiply ( 20 , 11 ) ; 
  Test C# function definition:    : int result = tld . Multiply ( 20 , 11 ) ; 
  Test control definition:        : int result = tld . Multiply ( 20 , 11 ) ; 
  Test C# declaration:            : int result = tld . Multiply ( 20 , 11 ) ; 
  Handle C# declaration:          : int result = tld . Multiply ( 20 , 11 ) ; 
  Test begin scope                : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test end scope                  : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test preproc statement:         : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test namespace definition:      : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test class definition:          : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test struct definition:         : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# function definition:    : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test control definition:        : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# declaration:            : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# executable:             : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Handle C# executable:           : 
    Console . Write ( "Expected result: " + ( 20 * 10 ) + "  Actual result: " + result + "\n" ) ; 
  Test begin scope                : if ( result == 200 ) { 
  handle begin scope              : if ( result == 200 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( result == 200 ) { 
  Test preproc statement:         : if ( result == 200 ) { 
  Test namespace definition:      : if ( result == 200 ) { 
  Test class definition:          : if ( result == 200 ) { 
  Test struct definition:         : if ( result == 200 ) { 
  control def    : if ( result == 200 ) { 
  Test C# function definition:    : if ( result == 200 ) { 
  Test control definition:        : if ( result == 200 ) { 
  Handle control definition:      : if ( result == 200 ) { 
  executable     : return true ; 
  Test begin scope                : return true ; 
--- stack size = 4 ---
  Test end scope                  : return true ; 
  Test preproc statement:         : return true ; 
  Test namespace definition:      : return true ; 
  Test class definition:          : return true ; 
  Test struct definition:         : return true ; 
  Test C# function definition:    : return true ; 
  Test control definition:        : return true ; 
  Test C# declaration:            : return true ; 
  Test C# executable:             : return true ; 
  Handle C# executable:           : return true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  control def    : else { 
  Test C# function definition:    : else { 
  executable     : return false ; 
  Test control definition:        : else { 
--- stack size = 4 ---
  Handle control definition:      : else { 
  Test begin scope                : return false ; 
--- stack size = 3 ---
  Test end scope                  : return false ; 
  Test preproc statement:         : return false ; 
--- stack size = 2 ---
  Test namespace definition:      : return false ; 
  Test class definition:          : return false ; 
--- stack size = 1 ---
  Test struct definition:         : return false ; 
  Test C# function definition:    : return false ; 
  Test control definition:        : return false ; 
  Test C# declaration:            : return false ; 
  Test C# executable:             : return false ; 
  Handle C# executable:           : return false ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  using declar   : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Tested : ITestCode { 
  handle begin scope              : public class Tested : ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public class Tested : ITestCode { 
  Test preproc statement:         : public class Tested : ITestCode { 
  Test namespace definition:      : public class Tested : ITestCode { 
  Test class definition:          : public class Tested : ITestCode { 
  class def      : public class Tested : ITestCode { 
  Handle class definition:        : public class Tested : ITestCode { 
  Test begin scope                : public Tested ( ) { 
  handle begin scope              : public Tested ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Tested ( ) { 
  Test preproc statement:         : public Tested ( ) { 
  function def   : public Tested ( ) { 
  Test namespace definition:      : public Tested ( ) { 
  Test class definition:          : public Tested ( ) { 
  Test struct definition:         : public Tested ( ) { 
  Test C# function definition:    : public Tested ( ) { 
  Handle C# function definition:  : public Tested ( ) { 
  Test begin scope                : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test end scope                  : Console . Write ( "\n    constructing instance of Test code" ) ; 
  executable     : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test preproc statement:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
--- stack size = 3 ---
  Test namespace definition:      : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test class definition:          : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test struct definition:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# function definition:    : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test control definition:        : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# declaration:            : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# executable:             : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Handle C# executable:           : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public bool test ( ) { 
  handle begin scope              : public bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public bool test ( ) { 
  Test preproc statement:         : public bool test ( ) { 
  function def   : public bool test ( ) { 
  Test namespace definition:      : public bool test ( ) { 
  Test class definition:          : public bool test ( ) { 
  Test struct definition:         : public bool test ( ) { 
  Test C# function definition:    : public bool test ( ) { 
  Handle C# function definition:  : public bool test ( ) { 
  Test begin scope                : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test end scope                  : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test class definition:          : Console . Write ( "\n    Production code - TestedLib" ) ; 
  data declar    : Dependency tld = new Dependency ( ) ; 
  Test struct definition:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test control definition:        : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test C# executable:             : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test begin scope                : Dependency tld = new Dependency ( ) ; 
  Test end scope                  : Dependency tld = new Dependency ( ) ; 
  Test preproc statement:         : Dependency tld = new Dependency ( ) ; 
  Test namespace definition:      : Dependency tld = new Dependency ( ) ; 
  data declar    : int result = tld . Addition ( 50 , 50 ) ; 
  Test class definition:          : Dependency tld = new Dependency ( ) ; 
  Test struct definition:         : Dependency tld = new Dependency ( ) ; 
  Test C# function definition:    : Dependency tld = new Dependency ( ) ; 
  Test control definition:        : Dependency tld = new Dependency ( ) ; 
  Test C# declaration:            : Dependency tld = new Dependency ( ) ; 
  Handle C# declaration:          : Dependency tld = new Dependency ( ) ; 
  Test begin scope                : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test end scope                  : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test class definition:          : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test struct definition:         : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  executable     : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test control definition:        : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test C# executable:             : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Testing Addition: 50+50:" ) ; 
  Test begin scope                : int result = tld . Addition ( 50 , 50 ) ; 
  Test end scope                  : int result = tld . Addition ( 50 , 50 ) ; 
  Test preproc statement:         : int result = tld . Addition ( 50 , 50 ) ; 
  Test namespace definition:      : int result = tld . Addition ( 50 , 50 ) ; 
  Test class definition:          : int result = tld . Addition ( 50 , 50 ) ; 
  Test struct definition:         : int result = tld . Addition ( 50 , 50 ) ; 
  Test C# function definition:    : int result = tld . Addition ( 50 , 50 ) ; 
  Test control definition:        : int result = tld . Addition ( 50 , 50 ) ; 
  Test C# declaration:            : int result = tld . Addition ( 50 , 50 ) ; 
  Handle C# declaration:          : int result = tld . Addition ( 50 , 50 ) ; 
  Test begin scope                : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test end scope                  : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test preproc statement:         : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test namespace definition:      : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test class definition:          : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test struct definition:         : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# function definition:    : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test control definition:        : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# declaration:            : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test C# executable:             : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Handle C# executable:           : 
    Console . Write ( "Expected result: " + ( 50 + 50 ) + "  Actual result: " + result + "\n" ) ; 
  Test begin scope                : if ( result == 100 ) { 
  handle begin scope              : if ( result == 100 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( result == 100 ) { 
  Test preproc statement:         : if ( result == 100 ) { 
  Test namespace definition:      : if ( result == 100 ) { 
  Test class definition:          : if ( result == 100 ) { 
  control def    : if ( result == 100 ) { 
  Test struct definition:         : if ( result == 100 ) { 
  Test C# function definition:    : if ( result == 100 ) { 
  Test control definition:        : if ( result == 100 ) { 
  executable     : return true ; 
  Handle control definition:      : if ( result == 100 ) { 
--- stack size = 4 ---
  Test begin scope                : return true ; 
  Test end scope                  : return true ; 
  Test preproc statement:         : return true ; 
  Test namespace definition:      : return true ; 
  Test class definition:          : return true ; 
  Test struct definition:         : return true ; 
  Test C# function definition:    : return true ; 
  Test control definition:        : return true ; 
  Test C# declaration:            : return true ; 
  Test C# executable:             : return true ; 
  Handle C# executable:           : return true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  executable     : return false ; 
  Test control definition:        : else { 
--- stack size = 4 ---
  Handle control definition:      : else { 
  Test begin scope                : return false ; 
--- stack size = 3 ---
  Test end scope                  : return false ; 
--- stack size = 2 ---
  Test preproc statement:         : return false ; 
--- stack size = 1 ---
  Test namespace definition:      : return false ; 
  Test class definition:          : return false ; 
  Test struct definition:         : return false ; 
  Test C# function definition:    : return false ; 
  Test control definition:        : return false ; 
  Test C# declaration:            : return false ; 
  Test C# executable:             : return false ; 
  Handle C# executable:           : return false ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  using declar   : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  namespace def  : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Tested : ITestCode { 
  handle begin scope              : public class Tested : ITestCode { 
--- stack size = 3 ---
  Test end scope                  : public class Tested : ITestCode { 
  Test preproc statement:         : public class Tested : ITestCode { 
  class def      : public class Tested : ITestCode { 
  Test namespace definition:      : public class Tested : ITestCode { 
  Test class definition:          : public class Tested : ITestCode { 
  Handle class definition:        : public class Tested : ITestCode { 
  Test begin scope                : public Tested ( ) { 
  handle begin scope              : public Tested ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Tested ( ) { 
  Test preproc statement:         : public Tested ( ) { 
  Test namespace definition:      : public Tested ( ) { 
  function def   : public Tested ( ) { 
  Test class definition:          : public Tested ( ) { 
  Test struct definition:         : public Tested ( ) { 
  Test C# function definition:    : public Tested ( ) { 
  Handle C# function definition:  : public Tested ( ) { 
  Test begin scope                : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test end scope                  : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test preproc statement:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  executable     : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test namespace definition:      : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test class definition:          : Console . Write ( "\n    constructing instance of Test code" ) ; 
--- stack size = 3 ---
  Test struct definition:         : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# function definition:    : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test control definition:        : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# declaration:            : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test C# executable:             : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Handle C# executable:           : Console . Write ( "\n    constructing instance of Test code" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public bool test ( ) { 
  handle begin scope              : public bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public bool test ( ) { 
  Test preproc statement:         : public bool test ( ) { 
  Test namespace definition:      : public bool test ( ) { 
  function def   : public bool test ( ) { 
  Test class definition:          : public bool test ( ) { 
  Test struct definition:         : public bool test ( ) { 
  Test C# function definition:    : public bool test ( ) { 
  Handle C# function definition:  : public bool test ( ) { 
  Test begin scope                : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test end scope                  : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  executable     : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test class definition:          : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test struct definition:         : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Production code - TestedLib" ) ; 
  data declar    : Dependency tld = new Dependency ( ) ; 
  Test control definition:        : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test C# executable:             : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Production code - TestedLib" ) ; 
  Test begin scope                : Dependency tld = new Dependency ( ) ; 
  Test end scope                  : Dependency tld = new Dependency ( ) ; 
  executable     : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test preproc statement:         : Dependency tld = new Dependency ( ) ; 
  Test namespace definition:      : Dependency tld = new Dependency ( ) ; 
  Test class definition:          : Dependency tld = new Dependency ( ) ; 
  Test struct definition:         : Dependency tld = new Dependency ( ) ; 
  Test C# function definition:    : Dependency tld = new Dependency ( ) ; 
  Test control definition:        : Dependency tld = new Dependency ( ) ; 
  Test C# declaration:            : Dependency tld = new Dependency ( ) ; 
  data declar    : int result = tld . Divide ( 10 , 0 ) ; 
  Handle C# declaration:          : Dependency tld = new Dependency ( ) ; 
  Test begin scope                : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test end scope                  : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test preproc statement:         : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test namespace definition:      : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test class definition:          : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test struct definition:         : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test C# function definition:    : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test control definition:        : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test C# declaration:            : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Test C# executable:             : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  Handle C# executable:           : Console . Write ( "\n    Testing Division: 10/1:" ) ; 
  executable     : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test begin scope                : int result = tld . Divide ( 10 , 0 ) ; 
  Test end scope                  : int result = tld . Divide ( 10 , 0 ) ; 
  Test preproc statement:         : int result = tld . Divide ( 10 , 0 ) ; 
  Test namespace definition:      : int result = tld . Divide ( 10 , 0 ) ; 
  Test class definition:          : int result = tld . Divide ( 10 , 0 ) ; 
  Test struct definition:         : int result = tld . Divide ( 10 , 0 ) ; 
  Test C# function definition:    : int result = tld . Divide ( 10 , 0 ) ; 
  Test control definition:        : int result = tld . Divide ( 10 , 0 ) ; 
  Test C# declaration:            : int result = tld . Divide ( 10 , 0 ) ; 
  Handle C# declaration:          : int result = tld . Divide ( 10 , 0 ) ; 
  Test begin scope                : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test end scope                  : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test preproc statement:         : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test namespace definition:      : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test class definition:          : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test struct definition:         : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test C# function definition:    : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test control definition:        : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test C# declaration:            : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test C# executable:             : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Handle C# executable:           : 
    Console . Write ( "Expected result: " , 10 / 1 , "  Actual result: " , result , "\n" ) ; 
  Test begin scope                : if ( result == 10 ) { 
  handle begin scope              : if ( result == 10 ) { 
--- stack size = 5 ---
  Test end scope                  : if ( result == 10 ) { 
  Test preproc statement:         : if ( result == 10 ) { 
  Test namespace definition:      : if ( result == 10 ) { 
  control def    : if ( result == 10 ) { 
  Test class definition:          : if ( result == 10 ) { 
  Test struct definition:         : if ( result == 10 ) { 
  Test C# function definition:    : if ( result == 10 ) { 
  executable     : return true ; 
  Test control definition:        : if ( result == 10 ) { 
--- stack size = 4 ---
  Handle control definition:      : if ( result == 10 ) { 
  Test begin scope                : return true ; 
  Test end scope                  : return true ; 
  Test preproc statement:         : return true ; 
  Test namespace definition:      : return true ; 
  Test class definition:          : return true ; 
  Test struct definition:         : return true ; 
  Test C# function definition:    : return true ; 
  Test control definition:        : return true ; 
  Test C# declaration:            : return true ; 
  Test C# executable:             : return true ; 
  Handle C# executable:           : return true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  Test namespace definition:      : else { 
  control def    : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  executable     : return false ; 
  Test begin scope                : return false ; 
--- stack size = 4 ---
  Test end scope                  : return false ; 
--- stack size = 3 ---
  Test preproc statement:         : return false ; 
  Test namespace definition:      : return false ; 
--- stack size = 2 ---
  Test class definition:          : return false ; 
--- stack size = 1 ---
  Test struct definition:         : return false ; 
  Test C# function definition:    : return false ; 
  Test control definition:        : return false ; 
  Test C# declaration:            : return false ; 
  Test C# executable:             : return false ; 
  Handle C# executable:           : return false ; 
  Test begin scope                : } 
  using declar   : using System ; 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System . Reflection ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System . IO ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Reflection ; 
  Test end scope                  : using System . Reflection ; 
  Test preproc statement:         : using System . Reflection ; 
  Test namespace definition:      : using System . Reflection ; 
  Test class definition:          : using System . Reflection ; 
  Test struct definition:         : using System . Reflection ; 
  Test C# function definition:    : using System . Reflection ; 
  Test control definition:        : using System . Reflection ; 
  Test C# declaration:            : using System . Reflection ; 
  Handle C# declaration:          : using System . Reflection ; 
  Test begin scope                : using System . IO ; 
  Test end scope                  : using System . IO ; 
  Test preproc statement:         : using System . IO ; 
  Test namespace definition:      : using System . IO ; 
  Test class definition:          : using System . IO ; 
  Test struct definition:         : using System . IO ; 
  Test C# function definition:    : using System . IO ; 
  Test control definition:        : using System . IO ; 
  Test C# declaration:            : using System . IO ; 
  Handle C# declaration:          : using System . IO ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Test : IDriver { 
  handle begin scope              : public class Test : IDriver { 
--- stack size = 3 ---
  Test end scope                  : public class Test : IDriver { 
  Test preproc statement:         : public class Test : IDriver { 
  class def      : public class Test : IDriver { 
  Test namespace definition:      : public class Test : IDriver { 
  Test class definition:          : public class Test : IDriver { 
  Handle class definition:        : public class Test : IDriver { 
  Test begin scope                : public Test ( ) { 
  handle begin scope              : public Test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Test ( ) { 
  Test preproc statement:         : public Test ( ) { 
  Test namespace definition:      : public Test ( ) { 
  function def   : public Test ( ) { 
  Test class definition:          : public Test ( ) { 
  Test struct definition:         : public Test ( ) { 
  Test C# function definition:    : public Test ( ) { 
  Handle C# function definition:  : public Test ( ) { 
  Test begin scope                : Console . Write ( "\n  constructing instance of Test1" ) ; 
  executable     : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test end scope                  : Console . Write ( "\n  constructing instance of Test1" ) ; 
--- stack size = 3 ---
  Test preproc statement:         : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test namespace definition:      : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test class definition:          : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test struct definition:         : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test C# function definition:    : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test control definition:        : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test C# declaration:            : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test C# executable:             : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Handle C# executable:           : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual void display ( ) { 
  handle begin scope              : public virtual void display ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual void display ( ) { 
  Test preproc statement:         : public virtual void display ( ) { 
  Test namespace definition:      : public virtual void display ( ) { 
  function def   : public virtual void display ( ) { 
  Test class definition:          : public virtual void display ( ) { 
  Test struct definition:         : public virtual void display ( ) { 
  Test C# function definition:    : public virtual void display ( ) { 
  Handle C# function definition:  : public virtual void display ( ) { 
  Test begin scope                : Console . Write ( "\n  Test #1:" ) ; 
  Test end scope                  : Console . Write ( "\n  Test #1:" ) ; 
  Test preproc statement:         : Console . Write ( "\n  Test #1:" ) ; 
  executable     : Console . Write ( "\n  Test #1:" ) ; 
  Test namespace definition:      : Console . Write ( "\n  Test #1:" ) ; 
--- stack size = 3 ---
  Test class definition:          : Console . Write ( "\n  Test #1:" ) ; 
  Test struct definition:         : Console . Write ( "\n  Test #1:" ) ; 
  Test C# function definition:    : Console . Write ( "\n  Test #1:" ) ; 
  Test control definition:        : Console . Write ( "\n  Test #1:" ) ; 
  Test C# declaration:            : Console . Write ( "\n  Test #1:" ) ; 
  Test C# executable:             : Console . Write ( "\n  Test #1:" ) ; 
  Handle C# executable:           : Console . Write ( "\n  Test #1:" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private ITestCode getTested ( ) { 
  handle begin scope              : private ITestCode getTested ( ) { 
--- stack size = 4 ---
  Test end scope                  : private ITestCode getTested ( ) { 
  Test preproc statement:         : private ITestCode getTested ( ) { 
  Test namespace definition:      : private ITestCode getTested ( ) { 
  Test class definition:          : private ITestCode getTested ( ) { 
  function def   : private ITestCode getTested ( ) { 
  Test struct definition:         : private ITestCode getTested ( ) { 
  Test C# function definition:    : private ITestCode getTested ( ) { 
  Handle C# function definition:  : private ITestCode getTested ( ) { 
  data declar    : Tested tested = new Tested ( ) ; 
  Test begin scope                : Tested tested = new Tested ( ) ; 
  Test end scope                  : Tested tested = new Tested ( ) ; 
  executable     : return tested ; 
  Test preproc statement:         : Tested tested = new Tested ( ) ; 
--- stack size = 3 ---
  Test namespace definition:      : Tested tested = new Tested ( ) ; 
  Test class definition:          : Tested tested = new Tested ( ) ; 
  Test struct definition:         : Tested tested = new Tested ( ) ; 
  Test C# function definition:    : Tested tested = new Tested ( ) ; 
  Test control definition:        : Tested tested = new Tested ( ) ; 
  Test C# declaration:            : Tested tested = new Tested ( ) ; 
  Handle C# declaration:          : Tested tested = new Tested ( ) ; 
  Test begin scope                : return tested ; 
  Test end scope                  : return tested ; 
  Test preproc statement:         : return tested ; 
  Test namespace definition:      : return tested ; 
  Test class definition:          : return tested ; 
  Test struct definition:         : return tested ; 
  Test C# function definition:    : return tested ; 
  Test control definition:        : return tested ; 
  Test C# declaration:            : return tested ; 
  Test C# executable:             : return tested ; 
  Handle C# executable:           : return tested ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual bool test ( ) { 
  handle begin scope              : public virtual bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual bool test ( ) { 
  Test preproc statement:         : public virtual bool test ( ) { 
  Test namespace definition:      : public virtual bool test ( ) { 
  function def   : public virtual bool test ( ) { 
  Test class definition:          : public virtual bool test ( ) { 
  Test struct definition:         : public virtual bool test ( ) { 
  Test C# function definition:    : public virtual bool test ( ) { 
  Handle C# function definition:  : public virtual bool test ( ) { 
  Test begin scope                : ITestCode tested = getTested ( ) ; 
  data declar    : ITestCode tested = getTested ( ) ; 
  Test end scope                  : ITestCode tested = getTested ( ) ; 
  Test preproc statement:         : ITestCode tested = getTested ( ) ; 
  Test namespace definition:      : ITestCode tested = getTested ( ) ; 
  executable     : return tested . test ( ) ; 
  Test class definition:          : ITestCode tested = getTested ( ) ; 
--- stack size = 3 ---
  Test struct definition:         : ITestCode tested = getTested ( ) ; 
--- stack size = 2 ---
  Test C# function definition:    : ITestCode tested = getTested ( ) ; 
--- stack size = 1 ---
  Test control definition:        : ITestCode tested = getTested ( ) ; 
  Test C# declaration:            : ITestCode tested = getTested ( ) ; 
  Handle C# declaration:          : ITestCode tested = getTested ( ) ; 
  Test begin scope                : return tested . test ( ) ; 
  Test end scope                  : return tested . test ( ) ; 
  Test preproc statement:         : return tested . test ( ) ; 
  Test namespace definition:      : return tested . test ( ) ; 
  Test class definition:          : return tested . test ( ) ; 
  Test struct definition:         : return tested . test ( ) ; 
  Test C# function definition:    : return tested . test ( ) ; 
  Test control definition:        : return tested . test ( ) ; 
  Test C# declaration:            : return tested . test ( ) ; 
  Test C# executable:             : return tested . test ( ) ; 
  Handle C# executable:           : return tested . test ( ) ; 
  Test begin scope                : } 
  using declar   : using System ; 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  using declar   : using System . Reflection ; 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  using declar   : using System . IO ; 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Reflection ; 
  Test end scope                  : using System . Reflection ; 
  Test preproc statement:         : using System . Reflection ; 
  Test namespace definition:      : using System . Reflection ; 
  Test class definition:          : using System . Reflection ; 
  Test struct definition:         : using System . Reflection ; 
  Test C# function definition:    : using System . Reflection ; 
  Test control definition:        : using System . Reflection ; 
  Test C# declaration:            : using System . Reflection ; 
  Handle C# declaration:          : using System . Reflection ; 
  Test begin scope                : using System . IO ; 
  Test end scope                  : using System . IO ; 
  Test preproc statement:         : using System . IO ; 
  Test namespace definition:      : using System . IO ; 
  Test class definition:          : using System . IO ; 
  Test struct definition:         : using System . IO ; 
  Test C# function definition:    : using System . IO ; 
  Test control definition:        : using System . IO ; 
  Test C# declaration:            : using System . IO ; 
  Handle C# declaration:          : using System . IO ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Test : IDriver { 
  handle begin scope              : public class Test : IDriver { 
--- stack size = 3 ---
  Test end scope                  : public class Test : IDriver { 
  Test preproc statement:         : public class Test : IDriver { 
  class def      : public class Test : IDriver { 
  Test namespace definition:      : public class Test : IDriver { 
  Test class definition:          : public class Test : IDriver { 
  Handle class definition:        : public class Test : IDriver { 
  Test begin scope                : public Test ( ) { 
  handle begin scope              : public Test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Test ( ) { 
  Test preproc statement:         : public Test ( ) { 
  function def   : public Test ( ) { 
  Test namespace definition:      : public Test ( ) { 
  Test class definition:          : public Test ( ) { 
  Test struct definition:         : public Test ( ) { 
  Test C# function definition:    : public Test ( ) { 
  Handle C# function definition:  : public Test ( ) { 
  Test begin scope                : Console . Write ( "\n  constructing instance of Test1" ) ; 
  executable     : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test end scope                  : Console . Write ( "\n  constructing instance of Test1" ) ; 
--- stack size = 3 ---
  Test preproc statement:         : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test namespace definition:      : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test class definition:          : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test struct definition:         : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test C# function definition:    : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test control definition:        : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test C# declaration:            : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test C# executable:             : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Handle C# executable:           : Console . Write ( "\n  constructing instance of Test1" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual void display ( ) { 
  handle begin scope              : public virtual void display ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual void display ( ) { 
  Test preproc statement:         : public virtual void display ( ) { 
  Test namespace definition:      : public virtual void display ( ) { 
  function def   : public virtual void display ( ) { 
  Test class definition:          : public virtual void display ( ) { 
  Test struct definition:         : public virtual void display ( ) { 
  Test C# function definition:    : public virtual void display ( ) { 
  Handle C# function definition:  : public virtual void display ( ) { 
  Test begin scope                : Console . Write ( "\n  Test #1:" ) ; 
  Test end scope                  : Console . Write ( "\n  Test #1:" ) ; 
  executable     : Console . Write ( "\n  Test #1:" ) ; 
  Test preproc statement:         : Console . Write ( "\n  Test #1:" ) ; 
--- stack size = 3 ---
  Test namespace definition:      : Console . Write ( "\n  Test #1:" ) ; 
  Test class definition:          : Console . Write ( "\n  Test #1:" ) ; 
  Test struct definition:         : Console . Write ( "\n  Test #1:" ) ; 
  Test C# function definition:    : Console . Write ( "\n  Test #1:" ) ; 
  Test control definition:        : Console . Write ( "\n  Test #1:" ) ; 
  Test C# declaration:            : Console . Write ( "\n  Test #1:" ) ; 
  Test C# executable:             : Console . Write ( "\n  Test #1:" ) ; 
  Handle C# executable:           : Console . Write ( "\n  Test #1:" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private ITestCode getTested ( ) { 
  handle begin scope              : private ITestCode getTested ( ) { 
--- stack size = 4 ---
  Test end scope                  : private ITestCode getTested ( ) { 
  Test preproc statement:         : private ITestCode getTested ( ) { 
  function def   : private ITestCode getTested ( ) { 
  Test namespace definition:      : private ITestCode getTested ( ) { 
  Test class definition:          : private ITestCode getTested ( ) { 
  Test struct definition:         : private ITestCode getTested ( ) { 
  Test C# function definition:    : private ITestCode getTested ( ) { 
  Handle C# function definition:  : private ITestCode getTested ( ) { 
  Test begin scope                : Tested tested = new Tested ( ) ; 
  Test end scope                  : Tested tested = new Tested ( ) ; 
  Test preproc statement:         : Tested tested = new Tested ( ) ; 
  data declar    : Tested tested = new Tested ( ) ; 
  Test namespace definition:      : Tested tested = new Tested ( ) ; 
  Test class definition:          : Tested tested = new Tested ( ) ; 
  executable     : return tested ; 
  Test struct definition:         : Tested tested = new Tested ( ) ; 
--- stack size = 3 ---
  Test C# function definition:    : Tested tested = new Tested ( ) ; 
  Test control definition:        : Tested tested = new Tested ( ) ; 
  Test C# declaration:            : Tested tested = new Tested ( ) ; 
  Handle C# declaration:          : Tested tested = new Tested ( ) ; 
  Test begin scope                : return tested ; 
  Test end scope                  : return tested ; 
  Test preproc statement:         : return tested ; 
  Test namespace definition:      : return tested ; 
  Test class definition:          : return tested ; 
  Test struct definition:         : return tested ; 
  Test C# function definition:    : return tested ; 
  Test control definition:        : return tested ; 
  Test C# declaration:            : return tested ; 
  Test C# executable:             : return tested ; 
  Handle C# executable:           : return tested ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual bool test ( ) { 
  handle begin scope              : public virtual bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual bool test ( ) { 
  Test preproc statement:         : public virtual bool test ( ) { 
  function def   : public virtual bool test ( ) { 
  Test namespace definition:      : public virtual bool test ( ) { 
  Test class definition:          : public virtual bool test ( ) { 
  Test struct definition:         : public virtual bool test ( ) { 
  Test C# function definition:    : public virtual bool test ( ) { 
  Handle C# function definition:  : public virtual bool test ( ) { 
  Test begin scope                : ITestCode tested = getTested ( ) ; 
  data declar    : ITestCode tested = getTested ( ) ; 
  Test end scope                  : ITestCode tested = getTested ( ) ; 
  Test preproc statement:         : ITestCode tested = getTested ( ) ; 
  Test namespace definition:      : ITestCode tested = getTested ( ) ; 
  Test class definition:          : ITestCode tested = getTested ( ) ; 
  Test struct definition:         : ITestCode tested = getTested ( ) ; 
  Test C# function definition:    : ITestCode tested = getTested ( ) ; 
  executable     : return tested . test ( ) ; 
  Test control definition:        : ITestCode tested = getTested ( ) ; 
--- stack size = 3 ---
  Test C# declaration:            : ITestCode tested = getTested ( ) ; 
--- stack size = 2 ---
  Handle C# declaration:          : ITestCode tested = getTested ( ) ; 
--- stack size = 1 ---
  Test begin scope                : return tested . test ( ) ; 
  Test end scope                  : return tested . test ( ) ; 
  Test preproc statement:         : return tested . test ( ) ; 
  Test namespace definition:      : return tested . test ( ) ; 
  Test class definition:          : return tested . test ( ) ; 
  Test struct definition:         : return tested . test ( ) ; 
  Test C# function definition:    : return tested . test ( ) ; 
  Test control definition:        : return tested . test ( ) ; 
  Test C# declaration:            : return tested . test ( ) ; 
  Test C# executable:             : return tested . test ( ) ; 
  Handle C# executable:           : return tested . test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  using declar   : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  using declar   : using System . Reflection ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  using declar   : using System . IO ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Reflection ; 
  Test end scope                  : using System . Reflection ; 
  Test preproc statement:         : using System . Reflection ; 
  Test namespace definition:      : using System . Reflection ; 
  Test class definition:          : using System . Reflection ; 
  Test struct definition:         : using System . Reflection ; 
  Test C# function definition:    : using System . Reflection ; 
  Test control definition:        : using System . Reflection ; 
  Test C# declaration:            : using System . Reflection ; 
  Handle C# declaration:          : using System . Reflection ; 
  Test begin scope                : using System . IO ; 
  Test end scope                  : using System . IO ; 
  Test preproc statement:         : using System . IO ; 
  Test namespace definition:      : using System . IO ; 
  Test class definition:          : using System . IO ; 
  Test struct definition:         : using System . IO ; 
  Test C# function definition:    : using System . IO ; 
  Test control definition:        : using System . IO ; 
  Test C# declaration:            : using System . IO ; 
  Handle C# declaration:          : using System . IO ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Test : IDriver { 
  handle begin scope              : public class Test : IDriver { 
--- stack size = 3 ---
  Test end scope                  : public class Test : IDriver { 
  Test preproc statement:         : public class Test : IDriver { 
  class def      : public class Test : IDriver { 
  Test namespace definition:      : public class Test : IDriver { 
  Test class definition:          : public class Test : IDriver { 
  Handle class definition:        : public class Test : IDriver { 
  Test begin scope                : public Test ( ) { 
  handle begin scope              : public Test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Test ( ) { 
  Test preproc statement:         : public Test ( ) { 
  Test namespace definition:      : public Test ( ) { 
  function def   : public Test ( ) { 
  Test class definition:          : public Test ( ) { 
  Test struct definition:         : public Test ( ) { 
  Test C# function definition:    : public Test ( ) { 
  Handle C# function definition:  : public Test ( ) { 
  Test begin scope                : Console . Write ( "\n  constructing instance of Test2" ) ; 
  executable     : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test end scope                  : Console . Write ( "\n  constructing instance of Test2" ) ; 
--- stack size = 3 ---
  Test preproc statement:         : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test namespace definition:      : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test class definition:          : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test struct definition:         : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test C# function definition:    : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test control definition:        : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test C# declaration:            : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test C# executable:             : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Handle C# executable:           : Console . Write ( "\n  constructing instance of Test2" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual void display ( ) { 
  handle begin scope              : public virtual void display ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual void display ( ) { 
  Test preproc statement:         : public virtual void display ( ) { 
  Test namespace definition:      : public virtual void display ( ) { 
  function def   : public virtual void display ( ) { 
  Test class definition:          : public virtual void display ( ) { 
  Test struct definition:         : public virtual void display ( ) { 
  Test C# function definition:    : public virtual void display ( ) { 
  Handle C# function definition:  : public virtual void display ( ) { 
  executable     : Console . Write ( "\n  Test #2:" ) ; 
  Test begin scope                : Console . Write ( "\n  Test #2:" ) ; 
--- stack size = 3 ---
  Test end scope                  : Console . Write ( "\n  Test #2:" ) ; 
  Test preproc statement:         : Console . Write ( "\n  Test #2:" ) ; 
  Test namespace definition:      : Console . Write ( "\n  Test #2:" ) ; 
  Test class definition:          : Console . Write ( "\n  Test #2:" ) ; 
  Test struct definition:         : Console . Write ( "\n  Test #2:" ) ; 
  Test C# function definition:    : Console . Write ( "\n  Test #2:" ) ; 
  Test control definition:        : Console . Write ( "\n  Test #2:" ) ; 
  Test C# declaration:            : Console . Write ( "\n  Test #2:" ) ; 
  Test C# executable:             : Console . Write ( "\n  Test #2:" ) ; 
  Handle C# executable:           : Console . Write ( "\n  Test #2:" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private ITestCode getTested ( ) { 
  handle begin scope              : private ITestCode getTested ( ) { 
--- stack size = 4 ---
  Test end scope                  : private ITestCode getTested ( ) { 
  Test preproc statement:         : private ITestCode getTested ( ) { 
  Test namespace definition:      : private ITestCode getTested ( ) { 
  Test class definition:          : private ITestCode getTested ( ) { 
  function def   : private ITestCode getTested ( ) { 
  Test struct definition:         : private ITestCode getTested ( ) { 
  Test C# function definition:    : private ITestCode getTested ( ) { 
  Handle C# function definition:  : private ITestCode getTested ( ) { 
  Test begin scope                : Tested tested = new Tested ( ) ; 
  Test end scope                  : Tested tested = new Tested ( ) ; 
  data declar    : Tested tested = new Tested ( ) ; 
  Test preproc statement:         : Tested tested = new Tested ( ) ; 
  Test namespace definition:      : Tested tested = new Tested ( ) ; 
  Test class definition:          : Tested tested = new Tested ( ) ; 
  executable     : return tested ; 
  Test struct definition:         : Tested tested = new Tested ( ) ; 
--- stack size = 3 ---
  Test C# function definition:    : Tested tested = new Tested ( ) ; 
  Test control definition:        : Tested tested = new Tested ( ) ; 
  Test C# declaration:            : Tested tested = new Tested ( ) ; 
  Handle C# declaration:          : Tested tested = new Tested ( ) ; 
  Test begin scope                : return tested ; 
  Test end scope                  : return tested ; 
  Test preproc statement:         : return tested ; 
  Test namespace definition:      : return tested ; 
  Test class definition:          : return tested ; 
  Test struct definition:         : return tested ; 
  Test C# function definition:    : return tested ; 
  Test control definition:        : return tested ; 
  Test C# declaration:            : return tested ; 
  Test C# executable:             : return tested ; 
  Handle C# executable:           : return tested ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual bool test ( ) { 
  handle begin scope              : public virtual bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual bool test ( ) { 
  Test preproc statement:         : public virtual bool test ( ) { 
  Test namespace definition:      : public virtual bool test ( ) { 
  function def   : public virtual bool test ( ) { 
  Test class definition:          : public virtual bool test ( ) { 
  Test struct definition:         : public virtual bool test ( ) { 
  Test C# function definition:    : public virtual bool test ( ) { 
  Handle C# function definition:  : public virtual bool test ( ) { 
  Test begin scope                : ITestCode tested = getTested ( ) ; 
  data declar    : ITestCode tested = getTested ( ) ; 
  Test end scope                  : ITestCode tested = getTested ( ) ; 
  Test preproc statement:         : ITestCode tested = getTested ( ) ; 
  Test namespace definition:      : ITestCode tested = getTested ( ) ; 
  executable     : return tested . test ( ) ; 
  Test class definition:          : ITestCode tested = getTested ( ) ; 
--- stack size = 3 ---
  Test struct definition:         : ITestCode tested = getTested ( ) ; 
--- stack size = 2 ---
  Test C# function definition:    : ITestCode tested = getTested ( ) ; 
--- stack size = 1 ---
  Test control definition:        : ITestCode tested = getTested ( ) ; 
  Test C# declaration:            : ITestCode tested = getTested ( ) ; 
  Handle C# declaration:          : ITestCode tested = getTested ( ) ; 
  Test begin scope                : return tested . test ( ) ; 
  Test end scope                  : return tested . test ( ) ; 
  Test preproc statement:         : return tested . test ( ) ; 
  Test namespace definition:      : return tested . test ( ) ; 
  Test class definition:          : return tested . test ( ) ; 
  Test struct definition:         : return tested . test ( ) ; 
  Test C# function definition:    : return tested . test ( ) ; 
  using declar   : using System ; 
  Test control definition:        : return tested . test ( ) ; 
  Test C# declaration:            : return tested . test ( ) ; 
  using declar   : using System . Reflection ; 
  Test C# executable:             : return tested . test ( ) ; 
  Handle C# executable:           : return tested . test ( ) ; 
  using declar   : using System . IO ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Reflection ; 
  Test end scope                  : using System . Reflection ; 
  Test preproc statement:         : using System . Reflection ; 
  Test namespace definition:      : using System . Reflection ; 
  Test class definition:          : using System . Reflection ; 
  Test struct definition:         : using System . Reflection ; 
  Test C# function definition:    : using System . Reflection ; 
  Test control definition:        : using System . Reflection ; 
  Test C# declaration:            : using System . Reflection ; 
  Handle C# declaration:          : using System . Reflection ; 
  Test begin scope                : using System . IO ; 
  Test end scope                  : using System . IO ; 
  Test preproc statement:         : using System . IO ; 
  Test namespace definition:      : using System . IO ; 
  Test class definition:          : using System . IO ; 
  Test struct definition:         : using System . IO ; 
  Test C# function definition:    : using System . IO ; 
  Test control definition:        : using System . IO ; 
  Test C# declaration:            : using System . IO ; 
  Handle C# declaration:          : using System . IO ; 
  Test begin scope                : namespace Test { 
  handle begin scope              : namespace Test { 
--- stack size = 2 ---
  Test end scope                  : namespace Test { 
  namespace def  : namespace Test { 
  Test preproc statement:         : namespace Test { 
  Test namespace definition:      : namespace Test { 
  Handle namespace definition:    : namespace Test { 
  Test begin scope                : public class Test : IDriver { 
  handle begin scope              : public class Test : IDriver { 
--- stack size = 3 ---
  Test end scope                  : public class Test : IDriver { 
  Test preproc statement:         : public class Test : IDriver { 
  class def      : public class Test : IDriver { 
  Test namespace definition:      : public class Test : IDriver { 
  Test class definition:          : public class Test : IDriver { 
  Handle class definition:        : public class Test : IDriver { 
  Test begin scope                : public Test ( ) { 
  handle begin scope              : public Test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public Test ( ) { 
  Test preproc statement:         : public Test ( ) { 
  Test namespace definition:      : public Test ( ) { 
  function def   : public Test ( ) { 
  Test class definition:          : public Test ( ) { 
  Test struct definition:         : public Test ( ) { 
  Test C# function definition:    : public Test ( ) { 
  Handle C# function definition:  : public Test ( ) { 
  Test begin scope                : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test end scope                  : Console . Write ( "\n  constructing instance of Test3" ) ; 
  executable     : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test preproc statement:         : Console . Write ( "\n  constructing instance of Test3" ) ; 
--- stack size = 3 ---
  Test namespace definition:      : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test class definition:          : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test struct definition:         : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test C# function definition:    : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test control definition:        : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test C# declaration:            : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test C# executable:             : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Handle C# executable:           : Console . Write ( "\n  constructing instance of Test3" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual void display ( ) { 
  handle begin scope              : public virtual void display ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual void display ( ) { 
  Test preproc statement:         : public virtual void display ( ) { 
  Test namespace definition:      : public virtual void display ( ) { 
  function def   : public virtual void display ( ) { 
  Test class definition:          : public virtual void display ( ) { 
  Test struct definition:         : public virtual void display ( ) { 
  Test C# function definition:    : public virtual void display ( ) { 
  Handle C# function definition:  : public virtual void display ( ) { 
  executable     : Console . Write ( "\n  Test #3:" ) ; 
  Test begin scope                : Console . Write ( "\n  Test #3:" ) ; 
--- stack size = 3 ---
  Test end scope                  : Console . Write ( "\n  Test #3:" ) ; 
  Test preproc statement:         : Console . Write ( "\n  Test #3:" ) ; 
  Test namespace definition:      : Console . Write ( "\n  Test #3:" ) ; 
  Test class definition:          : Console . Write ( "\n  Test #3:" ) ; 
  Test struct definition:         : Console . Write ( "\n  Test #3:" ) ; 
  Test C# function definition:    : Console . Write ( "\n  Test #3:" ) ; 
  Test control definition:        : Console . Write ( "\n  Test #3:" ) ; 
  Test C# declaration:            : Console . Write ( "\n  Test #3:" ) ; 
  Test C# executable:             : Console . Write ( "\n  Test #3:" ) ; 
  Handle C# executable:           : Console . Write ( "\n  Test #3:" ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private ITestCode getTested ( ) { 
  handle begin scope              : private ITestCode getTested ( ) { 
--- stack size = 4 ---
  Test end scope                  : private ITestCode getTested ( ) { 
  Test preproc statement:         : private ITestCode getTested ( ) { 
  function def   : private ITestCode getTested ( ) { 
  Test namespace definition:      : private ITestCode getTested ( ) { 
  Test class definition:          : private ITestCode getTested ( ) { 
  Test struct definition:         : private ITestCode getTested ( ) { 
  Test C# function definition:    : private ITestCode getTested ( ) { 
  Handle C# function definition:  : private ITestCode getTested ( ) { 
  data declar    : Tested tested = new Tested ( ) ; 
  Test begin scope                : Tested tested = new Tested ( ) ; 
  Test end scope                  : Tested tested = new Tested ( ) ; 
  executable     : return tested ; 
  Test preproc statement:         : Tested tested = new Tested ( ) ; 
--- stack size = 3 ---
  Test namespace definition:      : Tested tested = new Tested ( ) ; 
  Test class definition:          : Tested tested = new Tested ( ) ; 
  Test struct definition:         : Tested tested = new Tested ( ) ; 
  Test C# function definition:    : Tested tested = new Tested ( ) ; 
  Test control definition:        : Tested tested = new Tested ( ) ; 
  Test C# declaration:            : Tested tested = new Tested ( ) ; 
  Handle C# declaration:          : Tested tested = new Tested ( ) ; 
  Test begin scope                : return tested ; 
  Test end scope                  : return tested ; 
  Test preproc statement:         : return tested ; 
  Test namespace definition:      : return tested ; 
  Test class definition:          : return tested ; 
  Test struct definition:         : return tested ; 
  Test C# function definition:    : return tested ; 
  Test control definition:        : return tested ; 
  Test C# declaration:            : return tested ; 
  Test C# executable:             : return tested ; 
  Handle C# executable:           : return tested ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public virtual bool test ( ) { 
  handle begin scope              : public virtual bool test ( ) { 
--- stack size = 4 ---
  Test end scope                  : public virtual bool test ( ) { 
  Test preproc statement:         : public virtual bool test ( ) { 
  Test namespace definition:      : public virtual bool test ( ) { 
  function def   : public virtual bool test ( ) { 
  Test class definition:          : public virtual bool test ( ) { 
  Test struct definition:         : public virtual bool test ( ) { 
  Test C# function definition:    : public virtual bool test ( ) { 
  Handle C# function definition:  : public virtual bool test ( ) { 
  Test begin scope                : ITestCode tested = getTested ( ) ; 
  data declar    : ITestCode tested = getTested ( ) ; 
  Test end scope                  : ITestCode tested = getTested ( ) ; 
  Test preproc statement:         : ITestCode tested = getTested ( ) ; 
  Test namespace definition:      : ITestCode tested = getTested ( ) ; 
  Test class definition:          : ITestCode tested = getTested ( ) ; 
  executable     : return tested . test ( ) ; 
  Test struct definition:         : ITestCode tested = getTested ( ) ; 
--- stack size = 3 ---
  Test C# function definition:    : ITestCode tested = getTested ( ) ; 
--- stack size = 2 ---
  Test control definition:        : ITestCode tested = getTested ( ) ; 
--- stack size = 1 ---
  Test C# declaration:            : ITestCode tested = getTested ( ) ; 
  Handle C# declaration:          : ITestCode tested = getTested ( ) ; 
  Test begin scope                : return tested . test ( ) ; 
  Test end scope                  : return tested . test ( ) ; 
  Test preproc statement:         : return tested . test ( ) ; 
  using declar   : using System ; 
  Test namespace definition:      : return tested . test ( ) ; 
  Test class definition:          : return tested . test ( ) ; 
  Test struct definition:         : return tested . test ( ) ; 
  using declar   : using System . Collections . Generic ; 
  Test C# function definition:    : return tested . test ( ) ; 
  Test control definition:        : return tested . test ( ) ; 
  Test C# declaration:            : return tested . test ( ) ; 
  using declar   : using System . Linq ; 
  Test C# executable:             : return tested . test ( ) ; 
  Handle C# executable:           : return tested . test ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  using declar   : using System . Text ; 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  using declar   : using System . Threading . Tasks ; 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  using declar   : using System . IO ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  using declar   : using MessagePassingComm ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  using declar   : using System . Threading ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Collections . Generic ; 
  Test end scope                  : using System . Collections . Generic ; 
  Test preproc statement:         : using System . Collections . Generic ; 
  Test namespace definition:      : using System . Collections . Generic ; 
  Test class definition:          : using System . Collections . Generic ; 
  Test struct definition:         : using System . Collections . Generic ; 
  Test C# function definition:    : using System . Collections . Generic ; 
  Test control definition:        : using System . Collections . Generic ; 
  Test C# declaration:            : using System . Collections . Generic ; 
  Handle C# declaration:          : using System . Collections . Generic ; 
  Test begin scope                : using System . Linq ; 
  Test end scope                  : using System . Linq ; 
  Test preproc statement:         : using System . Linq ; 
  Test namespace definition:      : using System . Linq ; 
  Test class definition:          : using System . Linq ; 
  Test struct definition:         : using System . Linq ; 
  Test C# function definition:    : using System . Linq ; 
  Test control definition:        : using System . Linq ; 
  Test C# declaration:            : using System . Linq ; 
  Handle C# declaration:          : using System . Linq ; 
  Test begin scope                : using System . Text ; 
  Test end scope                  : using System . Text ; 
  Test preproc statement:         : using System . Text ; 
  Test namespace definition:      : using System . Text ; 
  Test class definition:          : using System . Text ; 
  Test struct definition:         : using System . Text ; 
  Test C# function definition:    : using System . Text ; 
  Test control definition:        : using System . Text ; 
  Test C# declaration:            : using System . Text ; 
  Handle C# declaration:          : using System . Text ; 
  Test begin scope                : using System . Threading . Tasks ; 
  Test end scope                  : using System . Threading . Tasks ; 
  Test preproc statement:         : using System . Threading . Tasks ; 
  Test namespace definition:      : using System . Threading . Tasks ; 
  Test class definition:          : using System . Threading . Tasks ; 
  Test struct definition:         : using System . Threading . Tasks ; 
  Test C# function definition:    : using System . Threading . Tasks ; 
  Test control definition:        : using System . Threading . Tasks ; 
  Test C# declaration:            : using System . Threading . Tasks ; 
  Handle C# declaration:          : using System . Threading . Tasks ; 
  Test begin scope                : using System . IO ; 
  Test end scope                  : using System . IO ; 
  Test preproc statement:         : using System . IO ; 
  Test namespace definition:      : using System . IO ; 
  Test class definition:          : using System . IO ; 
  Test struct definition:         : using System . IO ; 
  Test C# function definition:    : using System . IO ; 
  Test control definition:        : using System . IO ; 
  Test C# declaration:            : using System . IO ; 
  Handle C# declaration:          : using System . IO ; 
  Test begin scope                : using MessagePassingComm ; 
  Test end scope                  : using MessagePassingComm ; 
  Test preproc statement:         : using MessagePassingComm ; 
  Test namespace definition:      : using MessagePassingComm ; 
  Test class definition:          : using MessagePassingComm ; 
  Test struct definition:         : using MessagePassingComm ; 
  Test C# function definition:    : using MessagePassingComm ; 
  Test control definition:        : using MessagePassingComm ; 
  Test C# declaration:            : using MessagePassingComm ; 
  Handle C# declaration:          : using MessagePassingComm ; 
  Test begin scope                : using System . Threading ; 
  Test end scope                  : using System . Threading ; 
  Test preproc statement:         : using System . Threading ; 
  Test namespace definition:      : using System . Threading ; 
  Test class definition:          : using System . Threading ; 
  Test struct definition:         : using System . Threading ; 
  Test C# function definition:    : using System . Threading ; 
  Test control definition:        : using System . Threading ; 
  Test C# declaration:            : using System . Threading ; 
  Handle C# declaration:          : using System . Threading ; 
  Test begin scope                : namespace Federation { 
  handle begin scope              : namespace Federation { 
--- stack size = 2 ---
  Test end scope                  : namespace Federation { 
  namespace def  : namespace Federation { 
  Test preproc statement:         : namespace Federation { 
  Test namespace definition:      : namespace Federation { 
  Handle namespace definition:    : namespace Federation { 
  Test begin scope                : public class RepoMock { 
  handle begin scope              : public class RepoMock { 
--- stack size = 3 ---
  Test end scope                  : public class RepoMock { 
  Test preproc statement:         : public class RepoMock { 
  class def      : public class RepoMock { 
  Test namespace definition:      : public class RepoMock { 
  Test class definition:          : public class RepoMock { 
  Handle class definition:        : public class RepoMock { 
  Test begin scope                : public string storagePath { 
  handle begin scope              : public string storagePath { 
--- stack size = 4 ---
  Test end scope                  : public string storagePath { 
  Test preproc statement:         : public string storagePath { 
  Test namespace definition:      : public string storagePath { 
  default:       : public string storagePath { 
  Test class definition:          : public string storagePath { 
  Test struct definition:         : public string storagePath { 
  default:       : get ; 
  Test C# function definition:    : public string storagePath { 
  Test control definition:        : public string storagePath { 
  default:       : set ; 
  Test C# declaration:            : public string storagePath { 
--- stack size = 3 ---
  Test C# executable:             : public string storagePath { 
  Test default:                   : public string storagePath { 
  Handle default:                 : public string storagePath { 
  Test begin scope                : get ; 
  executable     : = "../../../ConsoleApp2/RepoStorage" ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = "../../../ConsoleApp2/RepoStorage" ; 
  Test end scope                  : = "../../../ConsoleApp2/RepoStorage" ; 
  Test preproc statement:         : = "../../../ConsoleApp2/RepoStorage" ; 
  Test namespace definition:      : = "../../../ConsoleApp2/RepoStorage" ; 
  Test class definition:          : = "../../../ConsoleApp2/RepoStorage" ; 
  Test struct definition:         : = "../../../ConsoleApp2/RepoStorage" ; 
  Test C# function definition:    : = "../../../ConsoleApp2/RepoStorage" ; 
  Test control definition:        : = "../../../ConsoleApp2/RepoStorage" ; 
  Test C# declaration:            : = "../../../ConsoleApp2/RepoStorage" ; 
  Test C# executable:             : = "../../../ConsoleApp2/RepoStorage" ; 
  Handle C# executable:           : = "../../../ConsoleApp2/RepoStorage" ; 
  Test begin scope                : public string receivePath { 
  handle begin scope              : public string receivePath { 
--- stack size = 4 ---
  Test end scope                  : public string receivePath { 
  Test preproc statement:         : public string receivePath { 
  Test namespace definition:      : public string receivePath { 
  Test class definition:          : public string receivePath { 
  default:       : public string receivePath { 
  Test struct definition:         : public string receivePath { 
  Test C# function definition:    : public string receivePath { 
  Test control definition:        : public string receivePath { 
  default:       : get ; 
  Test C# declaration:            : public string receivePath { 
  Test C# executable:             : public string receivePath { 
  default:       : set ; 
  Test default:                   : public string receivePath { 
--- stack size = 3 ---
  Handle default:                 : public string receivePath { 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  executable     : = "../../../Buider/buildStorage" ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = "../../../Buider/buildStorage" ; 
  Test end scope                  : = "../../../Buider/buildStorage" ; 
  Test preproc statement:         : = "../../../Buider/buildStorage" ; 
  Test namespace definition:      : = "../../../Buider/buildStorage" ; 
  Test class definition:          : = "../../../Buider/buildStorage" ; 
  Test struct definition:         : = "../../../Buider/buildStorage" ; 
  Test C# function definition:    : = "../../../Buider/buildStorage" ; 
  Test control definition:        : = "../../../Buider/buildStorage" ; 
  Test C# declaration:            : = "../../../Buider/buildStorage" ; 
  Test C# executable:             : = "../../../Buider/buildStorage" ; 
  Handle C# executable:           : = "../../../Buider/buildStorage" ; 
  Test begin scope                : public string clientPath { 
  handle begin scope              : public string clientPath { 
--- stack size = 4 ---
  Test end scope                  : public string clientPath { 
  Test preproc statement:         : public string clientPath { 
  Test namespace definition:      : public string clientPath { 
  Test class definition:          : public string clientPath { 
  default:       : public string clientPath { 
  Test struct definition:         : public string clientPath { 
  Test C# function definition:    : public string clientPath { 
  default:       : get ; 
  Test control definition:        : public string clientPath { 
  Test C# declaration:            : public string clientPath { 
  Test C# executable:             : public string clientPath { 
  default:       : set ; 
  Test default:                   : public string clientPath { 
--- stack size = 3 ---
  Handle default:                 : public string clientPath { 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  executable     : = "../../../ClientStorage" ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = "../../../ClientStorage" ; 
  Test end scope                  : = "../../../ClientStorage" ; 
  Test preproc statement:         : = "../../../ClientStorage" ; 
  Test namespace definition:      : = "../../../ClientStorage" ; 
  Test class definition:          : = "../../../ClientStorage" ; 
  Test struct definition:         : = "../../../ClientStorage" ; 
  Test C# function definition:    : = "../../../ClientStorage" ; 
  Test control definition:        : = "../../../ClientStorage" ; 
  Test C# declaration:            : = "../../../ClientStorage" ; 
  Test C# executable:             : = "../../../ClientStorage" ; 
  Handle C# executable:           : = "../../../ClientStorage" ; 
  Test begin scope                : public List < string > files { 
  handle begin scope              : public List < string > files { 
--- stack size = 4 ---
  Test end scope                  : public List < string > files { 
  Test preproc statement:         : public List < string > files { 
  Test namespace definition:      : public List < string > files { 
  Test class definition:          : public List < string > files { 
  default:       : public List < string > files { 
  Test struct definition:         : public List < string > files { 
  default:       : get ; 
  Test C# function definition:    : public List < string > files { 
  Test control definition:        : public List < string > files { 
  default:       : set ; 
  Test C# declaration:            : public List < string > files { 
--- stack size = 3 ---
  Test C# executable:             : public List < string > files { 
  Test default:                   : public List < string > files { 
  Handle default:                 : public List < string > files { 
  Test begin scope                : get ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  function declar: = new List < string > ( ) ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = new List < string > ( ) ; 
  Test end scope                  : = new List < string > ( ) ; 
  Test preproc statement:         : = new List < string > ( ) ; 
  Test namespace definition:      : = new List < string > ( ) ; 
  Test class definition:          : = new List < string > ( ) ; 
  Test struct definition:         : = new List < string > ( ) ; 
  Test C# function definition:    : = new List < string > ( ) ; 
  Test control definition:        : = new List < string > ( ) ; 
  Test C# declaration:            : = new List < string > ( ) ; 
  Handle C# declaration:          : = new List < string > ( ) ; 
  Test begin scope                : public RepoMock ( ) { 
  handle begin scope              : public RepoMock ( ) { 
--- stack size = 4 ---
  Test end scope                  : public RepoMock ( ) { 
  Test preproc statement:         : public RepoMock ( ) { 
  Test namespace definition:      : public RepoMock ( ) { 
  function def   : public RepoMock ( ) { 
  Test class definition:          : public RepoMock ( ) { 
  Test struct definition:         : public RepoMock ( ) { 
  Test C# function definition:    : public RepoMock ( ) { 
  Handle C# function definition:  : public RepoMock ( ) { 
  Test begin scope                : 
    if ( ! Directory . Exists ( storagePath ) ) Directory . CreateDirectory ( storagePath ) ; 
  Test end scope                  : 
    if ( ! Directory . Exists ( storagePath ) ) Directory . CreateDirectory ( storagePath ) ; 
  Test preproc statement:         : 
    if ( ! Directory . Exists ( storagePath ) ) Directory . CreateDirectory ( storagePath ) ; 
  executable     : 
    if ( ! Directory . Exists ( storagePath ) ) Directory . CreateDirectory ( storagePath ) ; 
  Test namespace definition:      : 
    if ( ! Directory . Exists ( storagePath ) ) Directory . CreateDirectory ( storagePath ) ; 
  Test class definition:          : 
    if ( ! Directory . Exists ( storagePath ) ) Directory . CreateDirectory ( storagePath ) ; 
  Test struct definition:         : 
    if ( ! Directory . Exists ( storagePath ) ) Directory . CreateDirectory ( storagePath ) ; 
  Test C# function definition:    : 
    if ( ! Directory . Exists ( storagePath ) ) Directory . CreateDirectory ( storagePath ) ; 
  executable     : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  Test control definition:        : 
    if ( ! Directory . Exists ( storagePath ) ) Directory . CreateDirectory ( storagePath ) ; 
--- stack size = 3 ---
  Test C# declaration:            : 
    if ( ! Directory . Exists ( storagePath ) ) Directory . CreateDirectory ( storagePath ) ; 
  Test C# executable:             : 
    if ( ! Directory . Exists ( storagePath ) ) Directory . CreateDirectory ( storagePath ) ; 
  Handle C# executable:           : 
    if ( ! Directory . Exists ( storagePath ) ) Directory . CreateDirectory ( storagePath ) ; 
  Test begin scope                : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  Test end scope                  : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  Test preproc statement:         : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  Test namespace definition:      : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  Test class definition:          : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  Test struct definition:         : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  Test C# function definition:    : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  Test control definition:        : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  Test C# declaration:            : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  Test C# executable:             : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  Handle C# executable:           : 
    if ( ! Directory . Exists ( receivePath ) ) Directory . CreateDirectory ( receivePath ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private void getFilesHelper ( string path , string pattern ) { 
  handle begin scope              : private void getFilesHelper ( string path , string pattern ) { 
--- stack size = 4 ---
  Test end scope                  : private void getFilesHelper ( string path , string pattern ) { 
  Test preproc statement:         : private void getFilesHelper ( string path , string pattern ) { 
  Test namespace definition:      : private void getFilesHelper ( string path , string pattern ) { 
  function def   : private void getFilesHelper ( string path , string pattern ) { 
  Test class definition:          : private void getFilesHelper ( string path , string pattern ) { 
  Test struct definition:         : private void getFilesHelper ( string path , string pattern ) { 
  Test C# function definition:    : private void getFilesHelper ( string path , string pattern ) { 
  Handle C# function definition:  : private void getFilesHelper ( string path , string pattern ) { 
  Test begin scope                : string [ ] tempFiles = Directory . GetFiles ( path , pattern ) ; 
  Test end scope                  : string [ ] tempFiles = Directory . GetFiles ( path , pattern ) ; 
  executable     : string [ ] tempFiles = Directory . GetFiles ( path , pattern ) ; 
  Test preproc statement:         : string [ ] tempFiles = Directory . GetFiles ( path , pattern ) ; 
  Test namespace definition:      : string [ ] tempFiles = Directory . GetFiles ( path , pattern ) ; 
  Test class definition:          : string [ ] tempFiles = Directory . GetFiles ( path , pattern ) ; 
  Test struct definition:         : string [ ] tempFiles = Directory . GetFiles ( path , pattern ) ; 
  Test C# function definition:    : string [ ] tempFiles = Directory . GetFiles ( path , pattern ) ; 
  Test control definition:        : string [ ] tempFiles = Directory . GetFiles ( path , pattern ) ; 
  Test C# declaration:            : string [ ] tempFiles = Directory . GetFiles ( path , pattern ) ; 
  Test C# executable:             : string [ ] tempFiles = Directory . GetFiles ( path , pattern ) ; 
  Handle C# executable:           : string [ ] tempFiles = Directory . GetFiles ( path , pattern ) ; 
  Test begin scope                : for ( int i = 0 ; i < tempFiles . Count ( ) ; ++ i ) { 
  handle begin scope              : for ( int i = 0 ; i < tempFiles . Count ( ) ; ++ i ) { 
--- stack size = 5 ---
  Test end scope                  : for ( int i = 0 ; i < tempFiles . Count ( ) ; ++ i ) { 
  Test preproc statement:         : for ( int i = 0 ; i < tempFiles . Count ( ) ; ++ i ) { 
  Test namespace definition:      : for ( int i = 0 ; i < tempFiles . Count ( ) ; ++ i ) { 
  Test class definition:          : for ( int i = 0 ; i < tempFiles . Count ( ) ; ++ i ) { 
  control def    : for ( int i = 0 ; i < tempFiles . Count ( ) ; ++ i ) { 
  Test struct definition:         : for ( int i = 0 ; i < tempFiles . Count ( ) ; ++ i ) { 
  Test C# function definition:    : for ( int i = 0 ; i < tempFiles . Count ( ) ; ++ i ) { 
  Test control definition:        : for ( int i = 0 ; i < tempFiles . Count ( ) ; ++ i ) { 
  Handle control definition:      : for ( int i = 0 ; i < tempFiles . Count ( ) ; ++ i ) { 
  Test begin scope                : tempFiles [ i ] = Path . GetFullPath ( tempFiles [ i ] ) ; 
  Test end scope                  : tempFiles [ i ] = Path . GetFullPath ( tempFiles [ i ] ) ; 
  Test preproc statement:         : tempFiles [ i ] = Path . GetFullPath ( tempFiles [ i ] ) ; 
  Test namespace definition:      : tempFiles [ i ] = Path . GetFullPath ( tempFiles [ i ] ) ; 
  Test class definition:          : tempFiles [ i ] = Path . GetFullPath ( tempFiles [ i ] ) ; 
  Test struct definition:         : tempFiles [ i ] = Path . GetFullPath ( tempFiles [ i ] ) ; 
  Test C# function definition:    : tempFiles [ i ] = Path . GetFullPath ( tempFiles [ i ] ) ; 
  executable     : tempFiles [ i ] = Path . GetFullPath ( tempFiles [ i ] ) ; 
  Test control definition:        : tempFiles [ i ] = Path . GetFullPath ( tempFiles [ i ] ) ; 
--- stack size = 4 ---
  Test C# declaration:            : tempFiles [ i ] = Path . GetFullPath ( tempFiles [ i ] ) ; 
  Test C# executable:             : tempFiles [ i ] = Path . GetFullPath ( tempFiles [ i ] ) ; 
  Handle C# executable:           : tempFiles [ i ] = Path . GetFullPath ( tempFiles [ i ] ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  executable     : files . AddRange ( tempFiles ) ; 
  Test begin scope                : files . AddRange ( tempFiles ) ; 
  Test end scope                  : files . AddRange ( tempFiles ) ; 
  Test preproc statement:         : files . AddRange ( tempFiles ) ; 
  Test namespace definition:      : files . AddRange ( tempFiles ) ; 
  Test class definition:          : files . AddRange ( tempFiles ) ; 
  Test struct definition:         : files . AddRange ( tempFiles ) ; 
  Test C# function definition:    : files . AddRange ( tempFiles ) ; 
  Test control definition:        : files . AddRange ( tempFiles ) ; 
  executable     : string [ ] dirs = Directory . GetDirectories ( path ) ; 
  Test C# declaration:            : files . AddRange ( tempFiles ) ; 
  Test C# executable:             : files . AddRange ( tempFiles ) ; 
  Handle C# executable:           : files . AddRange ( tempFiles ) ; 
  Test begin scope                : string [ ] dirs = Directory . GetDirectories ( path ) ; 
  Test end scope                  : string [ ] dirs = Directory . GetDirectories ( path ) ; 
  Test preproc statement:         : string [ ] dirs = Directory . GetDirectories ( path ) ; 
  Test namespace definition:      : string [ ] dirs = Directory . GetDirectories ( path ) ; 
  Test class definition:          : string [ ] dirs = Directory . GetDirectories ( path ) ; 
  Test struct definition:         : string [ ] dirs = Directory . GetDirectories ( path ) ; 
  Test C# function definition:    : string [ ] dirs = Directory . GetDirectories ( path ) ; 
  Test control definition:        : string [ ] dirs = Directory . GetDirectories ( path ) ; 
  Test C# declaration:            : string [ ] dirs = Directory . GetDirectories ( path ) ; 
  Test C# executable:             : string [ ] dirs = Directory . GetDirectories ( path ) ; 
  Handle C# executable:           : string [ ] dirs = Directory . GetDirectories ( path ) ; 
  Test begin scope                : foreach ( string dir in dirs ) { 
  handle begin scope              : foreach ( string dir in dirs ) { 
--- stack size = 5 ---
  Test end scope                  : foreach ( string dir in dirs ) { 
  Test preproc statement:         : foreach ( string dir in dirs ) { 
  Test namespace definition:      : foreach ( string dir in dirs ) { 
  control def    : foreach ( string dir in dirs ) { 
  Test class definition:          : foreach ( string dir in dirs ) { 
  Test struct definition:         : foreach ( string dir in dirs ) { 
  Test C# function definition:    : foreach ( string dir in dirs ) { 
  Test control definition:        : foreach ( string dir in dirs ) { 
  Handle control definition:      : foreach ( string dir in dirs ) { 
  Test begin scope                : getFilesHelper ( dir , pattern ) ; 
  Test end scope                  : getFilesHelper ( dir , pattern ) ; 
  executable     : getFilesHelper ( dir , pattern ) ; 
  Test preproc statement:         : getFilesHelper ( dir , pattern ) ; 
--- stack size = 4 ---
  Test namespace definition:      : getFilesHelper ( dir , pattern ) ; 
--- stack size = 3 ---
  Test class definition:          : getFilesHelper ( dir , pattern ) ; 
  Test struct definition:         : getFilesHelper ( dir , pattern ) ; 
  Test C# function definition:    : getFilesHelper ( dir , pattern ) ; 
  Test control definition:        : getFilesHelper ( dir , pattern ) ; 
  Test C# declaration:            : getFilesHelper ( dir , pattern ) ; 
  Test C# executable:             : getFilesHelper ( dir , pattern ) ; 
  Handle C# executable:           : getFilesHelper ( dir , pattern ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public void getFiles ( string pattern , string flag ) { 
  handle begin scope              : public void getFiles ( string pattern , string flag ) { 
--- stack size = 4 ---
  Test end scope                  : public void getFiles ( string pattern , string flag ) { 
  Test preproc statement:         : public void getFiles ( string pattern , string flag ) { 
  Test namespace definition:      : public void getFiles ( string pattern , string flag ) { 
  function def   : public void getFiles ( string pattern , string flag ) { 
  Test class definition:          : public void getFiles ( string pattern , string flag ) { 
  Test struct definition:         : public void getFiles ( string pattern , string flag ) { 
  Test C# function definition:    : public void getFiles ( string pattern , string flag ) { 
  executable     : files . Clear ( ) ; 
  Handle C# function definition:  : public void getFiles ( string pattern , string flag ) { 
  Test begin scope                : files . Clear ( ) ; 
  Test end scope                  : files . Clear ( ) ; 
  Test preproc statement:         : files . Clear ( ) ; 
  Test namespace definition:      : files . Clear ( ) ; 
  Test class definition:          : files . Clear ( ) ; 
  Test struct definition:         : files . Clear ( ) ; 
  Test C# function definition:    : files . Clear ( ) ; 
  Test control definition:        : files . Clear ( ) ; 
  Test C# declaration:            : files . Clear ( ) ; 
  Test C# executable:             : files . Clear ( ) ; 
  Handle C# executable:           : files . Clear ( ) ; 
  Test begin scope                : if ( flag != null && flag == "c" ) { 
  handle begin scope              : if ( flag != null && flag == "c" ) { 
--- stack size = 5 ---
  Test end scope                  : if ( flag != null && flag == "c" ) { 
  Test preproc statement:         : if ( flag != null && flag == "c" ) { 
  Test namespace definition:      : if ( flag != null && flag == "c" ) { 
  control def    : if ( flag != null && flag == "c" ) { 
  Test class definition:          : if ( flag != null && flag == "c" ) { 
  Test struct definition:         : if ( flag != null && flag == "c" ) { 
  Test C# function definition:    : if ( flag != null && flag == "c" ) { 
  Test control definition:        : if ( flag != null && flag == "c" ) { 
  Handle control definition:      : if ( flag != null && flag == "c" ) { 
  Test begin scope                : getFilesHelper ( clientPath , pattern ) ; 
  executable     : getFilesHelper ( clientPath , pattern ) ; 
  Test end scope                  : getFilesHelper ( clientPath , pattern ) ; 
  Test preproc stateme
  Test preproc statement:         : getFilesHelper ( c
--- stack size = 4 ---
  Test namespace definition:      : getFilesHelper ( clientPath , pattern ) ; 
  Test class definition:          : getFilesHelper ( clientPath , pattern ) ; 
  Test struct definition:         : getFilesHelper ( clientPath , pattern ) ; 
  Test C# function definition:    : getFilesHelper ( clientPath , pattern ) ; 
  Test control definition:        : getFilesHelper ( clientPath , pattern ) ; 
  Test C# declaration:            : getFilesHelper ( clientPath , pattern ) ; 
  Test C# executable:             : getFilesHelper ( clientPath , pattern ) ; 
  Handle C# executable:           : getFilesHelper ( clientPath , pattern ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else if ( flag != null && flag == "t" ) { 
  handle begin scope              : else if ( flag != null && flag == "t" ) { 
--- stack size = 5 ---
  Test end scope                  : else if ( flag != null && flag == "t" ) { 
  Test preproc statement:         : else if ( flag != null && flag == "t" ) { 
  Test namespace definition:      : else if ( flag != null && flag == "t" ) { 
  control def    : else if ( flag != null && flag == "t" ) { 
  Test class definition:          : else if ( flag != null && flag == "t" ) { 
  Test struct definition:         : else if ( flag != null && flag == "t" ) { 
  Test C# function definition:    : else if ( flag != null && flag == "t" ) { 
  Test control definition:        : else if ( flag != null && flag == "t" ) { 
  Handle control definition:      : else if ( flag != null && flag == "t" ) { 
  Test begin scope                : getFilesHelper ( receivePath , pattern ) ; 
  executable     : getFilesHelper ( receivePath , pattern ) ; 
  Test end scope                  : getFilesHelper ( receivePath , pattern ) ; 
--- stack size = 4 ---
  Test preproc statement:         : getFilesHelper ( receivePath , pattern ) ; 
  Test namespace definition:      : getFilesHelper ( receivePath , pattern ) ; 
  Test class definition:          : getFilesHelper ( receivePath , pattern ) ; 
  Test struct definition:         : getFilesHelper ( receivePath , pattern ) ; 
  Test C# function definition:    : getFilesHelper ( receivePath , pattern ) ; 
  Test control definition:        : getFilesHelper ( receivePath , pattern ) ; 
  Test C# declaration:            : getFilesHelper ( receivePath , pattern ) ; 
  Test C# executable:             : getFilesHelper ( receivePath , pattern ) ; 
  Handle C# executable:           : getFilesHelper ( receivePath , pattern ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : getFilesHelper ( storagePath , pattern ) ; 
  Test end scope                  : getFilesHelper ( storagePath , pattern ) ; 
  Test preproc statement:         : getFilesHelper ( storagePath , pattern ) ; 
  executable     : getFilesHelper ( storagePath , pattern ) ; 
  Test namespace definition:      : getFilesHelper ( storagePath , pattern ) ; 
--- stack size = 4 ---
  Test class definition:          : getFilesHelper ( storagePath , pattern ) ; 
--- stack size = 3 ---
  Test struct definition:         : getFilesHelper ( storagePath , pattern ) ; 
  Test C# function definition:    : getFilesHelper ( storagePath , pattern ) ; 
  Test control definition:        : getFilesHelper ( storagePath , pattern ) ; 
  Test C# declaration:            : getFilesHelper ( storagePath , pattern ) ; 
  Test C# executable:             : getFilesHelper ( storagePath , pattern ) ; 
  Handle C# executable:           : getFilesHelper ( storagePath , pattern ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public bool sendFile ( string fileSpec , string flg ) { 
  handle begin scope              : public bool sendFile ( string fileSpec , string flg ) { 
--- stack size = 4 ---
  Test end scope                  : public bool sendFile ( string fileSpec , string flg ) { 
  Test preproc statement:         : public bool sendFile ( string fileSpec , string flg ) { 
  Test namespace definition:      : public bool sendFile ( string fileSpec , string flg ) { 
  function def   : public bool sendFile ( string fileSpec , string flg ) { 
  Test class definition:          : public bool sendFile ( string fileSpec , string flg ) { 
  Test struct definition:         : public bool sendFile ( string fileSpec , string flg ) { 
  Test C# function definition:    : public bool sendFile ( string fileSpec , string flg ) { 
  Handle C# function definition:  : public bool sendFile ( string fileSpec , string flg ) { 
  Test begin scope                : try { 
  handle begin scope              : try { 
--- stack size = 5 ---
  Test end scope                  : try { 
  Test preproc statement:         : try { 
  Test namespace definition:      : try { 
  control def    : try { 
  Test class definition:          : try { 
  Test struct definition:         : try { 
  Test C# function definition:    : try { 
  Test control definition:        : try { 
  Handle control definition:      : try { 
  Test begin scope                : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test end scope                  : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test preproc statement:         : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test namespace definition:      : string fileName = Path . GetFileName ( fileSpec ) ; 
  data declar    : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test class definition:          : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test struct definition:         : string fileName = Path . GetFileName ( fileSpec ) ; 
  data declar    : string destSpec = "" ; 
  Test C# function definition:    : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test control definition:        : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test C# declaration:            : string fileName = Path . GetFileName ( fileSpec ) ; 
  Handle C# declaration:          : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test begin scope                : string destSpec = "" ; 
  Test end scope                  : string destSpec = "" ; 
  Test preproc statement:         : string destSpec = "" ; 
  Test namespace definition:      : string destSpec = "" ; 
  Test class definition:          : string destSpec = "" ; 
  Test struct definition:         : string destSpec = "" ; 
  Test C# function definition:    : string destSpec = "" ; 
  Test control definition:        : string destSpec = "" ; 
  Test C# declaration:            : string destSpec = "" ; 
  Handle C# declaration:          : string destSpec = "" ; 
  Test begin scope                : if ( flg != null && flg == "c" ) { 
  handle begin scope              : if ( flg != null && flg == "c" ) { 
--- stack size = 6 ---
  Test end scope                  : if ( flg != null && flg == "c" ) { 
  Test preproc statement:         : if ( flg != null && flg == "c" ) { 
  Test namespace definition:      : if ( flg != null && flg == "c" ) { 
  Test class definition:          : if ( flg != null && flg == "c" ) { 
  control def    : if ( flg != null && flg == "c" ) { 
  Test struct definition:         : if ( flg != null && flg == "c" ) { 
  Test C# function definition:    : if ( flg != null && flg == "c" ) { 
  Test control definition:        : if ( flg != null && flg == "c" ) { 
  Handle control definition:      : if ( flg != null && flg == "c" ) { 
  Test begin scope                : destSpec = Path . Combine ( storagePath , fileName ) ; 
  Test end scope                  : destSpec = Path . Combine ( storagePath , fileName ) ; 
  Test preproc statement:         : destSpec = Path . Combine ( storagePath , fileName ) ; 
  executable     : destSpec = Path . Combine ( storagePath , fileName ) ; 
  Test namespace definition:      : destSpec = Path . Combine ( storagePath , fileName ) ; 
--- stack size = 5 ---
  Test class definition:          : destSpec = Path . Combine ( storagePath , fileName ) ; 
  Test struct definition:         : destSpec = Path . Combine ( storagePath , fileName ) ; 
  Test C# function definition:    : destSpec = Path . Combine ( storagePath , fileName ) ; 
  Test control definition:        : destSpec = Path . Combine ( storagePath , fileName ) ; 
  Test C# declaration:            : destSpec = Path . Combine ( storagePath , fileName ) ; 
  Test C# executable:             : destSpec = Path . Combine ( storagePath , fileName ) ; 
  Handle C# executable:           : destSpec = Path . Combine ( storagePath , fileName ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 6 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : destSpec = Path . Combine ( receivePath , fileName ) ; 
  Test end scope                  : destSpec = Path . Combine ( receivePath , fileName ) ; 
  Test preproc statement:         : destSpec = Path . Combine ( receivePath , fileName ) ; 
  Test namespace definition:      : destSpec = Path . Combine ( receivePath , fileName ) ; 
  Test class definition:          : destSpec = Path . Combine ( receivePath , fileName ) ; 
  executable     : destSpec = Path . Combine ( receivePath , fileName ) ; 
  Test struct definition:         : destSpec = Path . Combine ( receivePath , fileName ) ; 
--- stack size = 5 ---
  Test C# function definition:    : destSpec = Path . Combine ( receivePath , fileName ) ; 
  Test control definition:        : destSpec = Path . Combine ( receivePath , fileName ) ; 
  Test C# declaration:            : destSpec = Path . Combine ( receivePath , fileName ) ; 
  Test C# executable:             : destSpec = Path . Combine ( receivePath , fileName ) ; 
  Handle C# executable:           : destSpec = Path . Combine ( receivePath , fileName ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : File . Copy ( fileSpec , destSpec , true ) ; 
  Test end scope                  : File . Copy ( fileSpec , destSpec , true ) ; 
  executable     : File . Copy ( fileSpec , destSpec , true ) ; 
  Test preproc statement:         : File . Copy ( fileSpec , destSpec , true ) ; 
  executable     : return true ; 
  Test namespace definition:      : File . Copy ( fileSpec , destSpec , true ) ; 
--- stack size = 4 ---
  Test class definition:          : File . Copy ( fileSpec , destSpec , true ) ; 
  Test struct definition:         : File . Copy ( fileSpec , destSpec , true ) ; 
  Test C# function definition:    : File . Copy ( fileSpec , destSpec , true ) ; 
  Test control definition:        : File . Copy ( fileSpec , destSpec , true ) ; 
  Test C# declaration:            : File . Copy ( fileSpec , destSpec , true ) ; 
  Test C# executable:             : File . Copy ( fileSpec , destSpec , true ) ; 
  Handle C# executable:           : File . Copy ( fileSpec , destSpec , true ) ; 
  Test begin scope                : return true ; 
  Test end scope                  : return true ; 
  Test preproc statement:         : return true ; 
  Test namespace definition:      : return true ; 
  Test class definition:          : return true ; 
  Test struct definition:         : return true ; 
  Test C# function definition:    : return true ; 
  Test control definition:        : return true ; 
  Test C# declaration:            : return true ; 
  Test C# executable:             : return true ; 
  Handle C# executable:           : return true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : catch ( Exception ex ) { 
  handle begin scope              : catch ( Exception ex ) { 
--- stack size = 5 ---
  Test end scope                  : catch ( Exception ex ) { 
  Test preproc statement:         : catch ( Exception ex ) { 
  Test namespace definition:      : catch ( Exception ex ) { 
  control def    : catch ( Exception ex ) { 
  Test class definition:          : catch ( Exception ex ) { 
  Test struct definition:         : catch ( Exception ex ) { 
  Test C# function definition:    : catch ( Exception ex ) { 
  Test control definition:        : catch ( Exception ex ) { 
  Handle control definition:      : catch ( Exception ex ) { 
  Test begin scope                : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test end scope                  : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test preproc statement:         : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  executable     : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test namespace definition:      : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  executable     : return false ; 
  Test class definition:          : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
--- stack size = 4 ---
  Test struct definition:         : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
--- stack size = 3 ---
  Test C# function definition:    : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test control definition:        : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test C# declaration:            : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test C# executable:             : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Handle C# executable:           : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test begin scope                : return false ; 
  Test end scope                  : return false ; 
  Test preproc statement:         : return false ; 
  Test namespace definition:      : return false ; 
  Test class definition:          : return false ; 
  Test struct definition:         : return false ; 
  Test C# function definition:    : return false ; 
  Test control definition:        : return false ; 
  Test C# declaration:            : return false ; 
  Test C# executable:             : return false ; 
  Handle C# executable:           : return false ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public bool checkForRequest ( string request , RepoMock repo ) { 
  handle begin scope              : public bool checkForRequest ( string request , RepoMock repo ) { 
--- stack size = 4 ---
  Test end scope                  : public bool checkForRequest ( string request , RepoMock repo ) { 
  Test preproc statement:         : public bool checkForRequest ( string request , RepoMock repo ) { 
  function def   : public bool checkForRequest ( string request , RepoMock repo ) { 
  Test namespace definition:      : public bool checkForRequest ( string request , RepoMock repo ) { 
  Test class definition:          : public bool checkForRequest ( string request , RepoMock repo ) { 
  Test struct definition:         : public bool checkForRequest ( string request , RepoMock repo ) { 
  data declar    : string flag = "r" ; 
  Test C# function definition:    : public bool checkForRequest ( string request , RepoMock repo ) { 
  Handle C# function definition:  : public bool checkForRequest ( string request , RepoMock repo ) { 
  Test begin scope                : string flag = "r" ; 
  Test end scope                  : string flag = "r" ; 
  Test preproc statement:         : string flag = "r" ; 
  Test namespace definition:      : string flag = "r" ; 
  Test class definition:          : string flag = "r" ; 
  executable     : repo . getFiles ( ".xml" , flag ) ; 
  Test struct definition:         : string flag = "r" ; 
  Test C# function definition:    : string flag = "r" ; 
  Test control definition:        : string flag = "r" ; 
  Test C# declaration:            : string flag = "r" ; 
  Handle C# declaration:          : string flag = "r" ; 
  Test begin scope                : repo . getFiles ( ".xml" , flag ) ; 
  Test end scope                  : repo . getFiles ( ".xml" , flag ) ; 
  Test preproc statement:         : repo . getFiles ( ".xml" , flag ) ; 
  Test namespace definition:      : repo . getFiles ( ".xml" , flag ) ; 
  Test class definition:          : repo . getFiles ( ".xml" , flag ) ; 
  Test struct definition:         : repo . getFiles ( ".xml" , flag ) ; 
  Test C# function definition:    : repo . getFiles ( ".xml" , flag ) ; 
  Test control definition:        : repo . getFiles ( ".xml" , flag ) ; 
  Test C# declaration:            : repo . getFiles ( ".xml" , flag ) ; 
  Test C# executable:             : repo . getFiles ( ".xml" , flag ) ; 
  Handle C# executable:           : repo . getFiles ( ".xml" , flag ) ; 
  Test begin scope                : if ( repo . files != null ) { 
  handle begin scope              : if ( repo . files != null ) { 
--- stack size = 5 ---
  Test end scope                  : if ( repo . files != null ) { 
  Test preproc statement:         : if ( repo . files != null ) { 
  Test namespace definition:      : if ( repo . files != null ) { 
  control def    : if ( repo . files != null ) { 
  Test class definition:          : if ( repo . files != null ) { 
  Test struct definition:         : if ( repo . files != null ) { 
  executable     : return true ; 
  Test C# function definition:    : if ( repo . files != null ) { 
--- stack size = 4 ---
  Test control definition:        : if ( repo . files != null ) { 
  Handle control definition:      : if ( repo . files != null ) { 
  Test begin scope                : return true ; 
  Test end scope                  : return true ; 
  Test preproc statement:         : return true ; 
  Test namespace definition:      : return true ; 
  Test class definition:          : return true ; 
  Test struct definition:         : return true ; 
  Test C# function definition:    : return true ; 
  Test control definition:        : return true ; 
  Test C# declaration:            : return true ; 
  Test C# executable:             : return true ; 
  Handle C# executable:           : return true ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  Test namespace definition:      : else { 
  control def    : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  executable     : return false ; 
  Handle control definition:      : else { 
--- stack size = 4 ---
  Test begin scope                : return false ; 
--- stack size = 3 ---
  Test end scope                  : return false ; 
  Test preproc statement:         : return false ; 
  Test namespace definition:      : return false ; 
  Test class definition:          : return false ; 
  Test struct definition:         : return false ; 
  Test C# function definition:    : return false ; 
  Test control definition:        : return false ; 
  Test C# declaration:            : return false ; 
  Test C# executable:             : return false ; 
  Handle C# executable:           : return false ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public bool loadFilesToTest ( RepoMock repo ) { 
  handle begin scope              : public bool loadFilesToTest ( RepoMock repo ) { 
--- stack size = 4 ---
  Test end scope                  : public bool loadFilesToTest ( RepoMock repo ) { 
  Test preproc statement:         : public bool loadFilesToTest ( RepoMock repo ) { 
  function def   : public bool loadFilesToTest ( RepoMock repo ) { 
  Test namespace definition:      : public bool loadFilesToTest ( RepoMock repo ) { 
  Test class definition:          : public bool loadFilesToTest ( RepoMock repo ) { 
  Test struct definition:         : public bool loadFilesToTest ( RepoMock repo ) { 
  data declar    : string flag = "r" ; 
  Test C# function definition:    : public bool loadFilesToTest ( RepoMock repo ) { 
  Handle C# function definition:  : public bool loadFilesToTest ( RepoMock repo ) { 
  Test begin scope                : string flag = "r" ; 
  Test end scope                  : string flag = "r" ; 
  Test preproc statement:         : string flag = "r" ; 
  executable     : repo . getFiles ( ".dll" , flag ) ; 
  Test namespace definition:      : string flag = "r" ; 
  Test class definition:          : string flag = "r" ; 
  Test struct definition:         : string flag = "r" ; 
  Test C# function definition:    : string flag = "r" ; 
  Test control definition:        : string flag = "r" ; 
  Test C# declaration:            : string flag = "r" ; 
  Handle C# declaration:          : string flag = "r" ; 
  Test begin scope                : repo . getFiles ( ".dll" , flag ) ; 
  Test end scope                  : repo . getFiles ( ".dll" , flag ) ; 
  executable     : Console . WriteLine ( repo . files . Count ( ) ) ; 
  Test preproc statement:         : repo . getFiles ( ".dll" , flag ) ; 
  Test namespace definition:      : repo . getFiles ( ".dll" , flag ) ; 
  Test class definition:          : repo . getFiles ( ".dll" , flag ) ; 
  Test struct definition:         : repo . getFiles ( ".dll" , flag ) ; 
  Test C# function definition:    : repo . getFiles ( ".dll" , flag ) ; 
  Test control definition:        : repo . getFiles ( ".dll" , flag ) ; 
  Test C# declaration:            : repo . getFiles ( ".dll" , flag ) ; 
  Test C# executable:             : repo . getFiles ( ".dll" , flag ) ; 
  executable     : if ( repo . files . Count ( ) > 0 ) return true ; 
  Handle C# executable:           : repo . getFiles ( ".dll" , flag ) ; 
  Test begin scope                : Console . WriteLine ( repo . files . Count ( ) ) ; 
  default:       : else return false ; 
  Test end scope                  : Console . WriteLine ( repo . files . Count ( ) ) ; 
--- stack size = 3 ---
  Test preproc statement:         : Console . WriteLine ( repo . files . Count ( ) ) ; 
--- stack size = 2 ---
  Test namespace definition:      : Console . WriteLine ( repo . files . Count ( ) ) ; 
  Test class definition:          : Console . WriteLine ( repo . files . Count ( ) ) ; 
  Test struct definition:         : Console . WriteLine ( repo . files . Count ( ) ) ; 
  Test C# function definition:    : Console . WriteLine ( repo . files . Count ( ) ) ; 
  Test control definition:        : Console . WriteLine ( repo . files . Count ( ) ) ; 
  Test C# declaration:            : Console . WriteLine ( repo . files . Count ( ) ) ; 
  Test C# executable:             : Console . WriteLine ( repo . files . Count ( ) ) ; 
  Handle C# executable:           : Console . WriteLine ( repo . files . Count ( ) ) ; 
  Test begin scope                : if ( repo . files . Count ( ) > 0 ) return true ; 
  Test end scope                  : if ( repo . files . Count ( ) > 0 ) return true ; 
  Test preproc statement:         : if ( repo . files . Count ( ) > 0 ) return true ; 
  Test namespace definition:      : if ( repo . files . Count ( ) > 0 ) return true ; 
  Test class definition:          : if ( repo . files . Count ( ) > 0 ) return true ; 
  Test struct definition:         : if ( repo . files . Count ( ) > 0 ) return true ; 
  Test C# function definition:    : if ( repo . files . Count ( ) > 0 ) return true ; 
  Test control definition:        : if ( repo . files . Count ( ) > 0 ) return true ; 
  Test C# declaration:            : if ( repo . files . Count ( ) > 0 ) return true ; 
  Test C# executable:             : if ( repo . files . Count ( ) > 0 ) return true ; 
  Handle C# executable:           : if ( repo . files . Count ( ) > 0 ) return true ; 
  Test begin scope                : else return false ; 
  Test end scope                  : else return false ; 
  Test preproc statement:         : else return false ; 
  Test namespace definition:      : else return false ; 
  Test class definition:          : else return false ; 
  Test struct definition:         : else return false ; 
  Test C# function definition:    : else return false ; 
  Test control definition:        : else return false ; 
  Test C# declaration:            : else return false ; 
  Test C# executable:             : else return false ; 
  Test default:                   : else return false ; 
  Handle default:                 : else return false ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public class MockRepoTest { 
  handle begin scope              : public class MockRepoTest { 
--- stack size = 3 ---
  Test end scope                  : public class MockRepoTest { 
  class def      : public class MockRepoTest { 
  Test preproc statement:         : public class MockRepoTest { 
  Test namespace definition:      : public class MockRepoTest { 
  Test class definition:          : public class MockRepoTest { 
  Handle class definition:        : public class MockRepoTest { 
  Test begin scope                : private static Comm comm { 
  handle begin scope              : private static Comm comm { 
--- stack size = 4 ---
  Test end scope                  : private static Comm comm { 
  Test preproc statement:         : private static Comm comm { 
  Test namespace definition:      : private static Comm comm { 
  default:       : private static Comm comm { 
  Test class definition:          : private static Comm comm { 
  Test struct definition:         : private static Comm comm { 
  default:       : get ; 
  Test C# function definition:    : private static Comm comm { 
  Test control definition:        : private static Comm comm { 
  default:       : set ; 
  Test C# declaration:            : private static Comm comm { 
--- stack size = 3 ---
  Test C# executable:             : private static Comm comm { 
  Test default:                   : private static Comm comm { 
  Handle default:                 : private static Comm comm { 
  Test begin scope                : get ; 
  executable     : = null ; 
  Test end scope                  : get ; 
  Test preproc statement:         : get ; 
  Test namespace definition:      : get ; 
  Test class definition:          : get ; 
  Test struct definition:         : get ; 
  Test C# function definition:    : get ; 
  Test control definition:        : get ; 
  Test C# declaration:            : get ; 
  Test C# executable:             : get ; 
  Test default:                   : get ; 
  Handle default:                 : get ; 
  Test begin scope                : set ; 
  Test end scope                  : set ; 
  Test preproc statement:         : set ; 
  Test namespace definition:      : set ; 
  Test class definition:          : set ; 
  Test struct definition:         : set ; 
  Test C# function definition:    : set ; 
  Test control definition:        : set ; 
  Test C# declaration:            : set ; 
  Test C# executable:             : set ; 
  Test default:                   : set ; 
  Handle default:                 : set ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : = null ; 
  Test end scope                  : = null ; 
  Test preproc statement:         : = null ; 
  Test namespace definition:      : = null ; 
  Test class definition:          : = null ; 
  Test struct definition:         : = null ; 
  Test C# function definition:    : = null ; 
  Test control definition:        : = null ; 
  Test C# declaration:            : = null ; 
  Test C# executable:             : = null ; 
  Handle C# executable:           : = null ; 
  Test begin scope                : public void repoThread ( ) { 
  handle begin scope              : public void repoThread ( ) { 
--- stack size = 4 ---
  Test end scope                  : public void repoThread ( ) { 
  Test preproc statement:         : public void repoThread ( ) { 
  function def   : public void repoThread ( ) { 
  Test namespace definition:      : public void repoThread ( ) { 
  Test class definition:          : public void repoThread ( ) { 
  Test struct definition:         : public void repoThread ( ) { 
  Test C# function definition:    : public void repoThread ( ) { 
  Handle C# function definition:  : public void repoThread ( ) { 
  executable     : RepoEnvironment . verbose = true ; 
  Test begin scope                : RepoEnvironment . verbose = true ; 
  Test end scope                  : RepoEnvironment . verbose = true ; 
  Test preproc statement:         : RepoEnvironment . verbose = true ; 
  Test namespace definition:      : RepoEnvironment . verbose = true ; 
  Test class definition:          : RepoEnvironment . verbose = true ; 
  executable     : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  Test struct definition:         : RepoEnvironment . verbose = true ; 
  Test C# function definition:    : RepoEnvironment . verbose = true ; 
  Test control definition:        : RepoEnvironment . verbose = true ; 
  data declar    : Thread listenTrd = null ; 
  Test C# declaration:            : RepoEnvironment . verbose = true ; 
  Test C# executable:             : RepoEnvironment . verbose = true ; 
  Handle C# executable:           : RepoEnvironment . verbose = true ; 
  Test begin scope                : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  Test end scope                  : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  executable     : comm = new Comm ( , 8095 ) ; 
  Test preproc statement:         : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  Test namespace definition:      : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  Test class definition:          : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  Test struct definition:         : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  executable     : listenTrd = new Thread ( listen ) ; 
  Test C# function definition:    : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  Test control definition:        : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  Test C# declaration:            : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  executable     : listenTrd . Start ( ) ; 
  Test C# executable:             : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
--- stack size = 3 ---
  Handle C# executable:           : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  Test begin scope                : Thread listenTrd = null ; 
  Test end scope                  : Thread listenTrd = null ; 
  Test preproc statement:         : Thread listenTrd = null ; 
  Test namespace definition:      : Thread listenTrd = null ; 
  Test class definition:          : Thread listenTrd = null ; 
  Test struct definition:         : Thread listenTrd = null ; 
  Test C# function definition:    : Thread listenTrd = null ; 
  Test control definition:        : Thread listenTrd = null ; 
  Test C# declaration:            : Thread listenTrd = null ; 
  Handle C# declaration:          : Thread listenTrd = null ; 
  Test begin scope                : comm = new Comm ( , 8095 ) ; 
  Test end scope                  : comm = new Comm ( , 8095 ) ; 
  Test preproc statement:         : comm = new Comm ( , 8095 ) ; 
  Test namespace definition:      : comm = new Comm ( , 8095 ) ; 
  Test class definition:          : comm = new Comm ( , 8095 ) ; 
  Test struct definition:         : comm = new Comm ( , 8095 ) ; 
  Test C# function definition:    : comm = new Comm ( , 8095 ) ; 
  Test control definition:        : comm = new Comm ( , 8095 ) ; 
  Test C# declaration:            : comm = new Comm ( , 8095 ) ; 
  Test C# executable:             : comm = new Comm ( , 8095 ) ; 
  Handle C# executable:           : comm = new Comm ( , 8095 ) ; 
  Test begin scope                : listenTrd = new Thread ( listen ) ; 
  Test end scope                  : listenTrd = new Thread ( listen ) ; 
  Test preproc statement:         : listenTrd = new Thread ( listen ) ; 
  Test namespace definition:      : listenTrd = new Thread ( listen ) ; 
  Test class definition:          : listenTrd = new Thread ( listen ) ; 
  Test struct definition:         : listenTrd = new Thread ( listen ) ; 
  Test C# function definition:    : listenTrd = new Thread ( listen ) ; 
  Test control definition:        : listenTrd = new Thread ( listen ) ; 
  Test C# declaration:            : listenTrd = new Thread ( listen ) ; 
  Test C# executable:             : listenTrd = new Thread ( listen ) ; 
  Handle C# executable:           : listenTrd = new Thread ( listen ) ; 
  Test begin scope                : listenTrd . Start ( ) ; 
  Test end scope                  : listenTrd . Start ( ) ; 
  Test preproc statement:         : listenTrd . Start ( ) ; 
  Test namespace definition:      : listenTrd . Start ( ) ; 
  Test class definition:          : listenTrd . Start ( ) ; 
  Test struct definition:         : listenTrd . Start ( ) ; 
  Test C# function definition:    : listenTrd . Start ( ) ; 
  Test control definition:        : listenTrd . Start ( ) ; 
  Test C# declaration:            : listenTrd . Start ( ) ; 
  Test C# executable:             : listenTrd . Start ( ) ; 
  Handle C# executable:           : listenTrd . Start ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : static void listen ( ) { 
  handle begin scope              : static void listen ( ) { 
--- stack size = 4 ---
  Test end scope                  : static void listen ( ) { 
  Test preproc statement:         : static void listen ( ) { 
  Test namespace definition:      : static void listen ( ) { 
  Test class definition:          : static void listen ( ) { 
  function def   : static void listen ( ) { 
  Test struct definition:         : static void listen ( ) { 
  Test C# function definition:    : static void listen ( ) { 
  Handle C# function definition:  : static void listen ( ) { 
  Test begin scope                : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test end scope                  : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test class definition:          : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : 
    Console . WriteLine ( "\n        Repository Listener Started Listening for messages" ) ; 
  Test C# function definition:    : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test control definition:        : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# declaration:            : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test begin scope                : 
    Console . WriteLine ( "\n        Repository Listener Started Listening for messages" ) ; 
  Test end scope                  : 
    Console . WriteLine ( "\n        Repository Listener Started Listening for messages" ) ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n        Repository Listener Started Listening for messages" ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n        Repository Listener Started Listening for messages" ) ; 
  Test class definition:          : 
    Console . WriteLine ( "\n        Repository Listener Started Listening for messages" ) ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n        Repository Listener Started Listening for messages" ) ; 
  Test C# function definition:    : 
    Console . WriteLine ( "\n        Repository Listener Started Listening for messages" ) ; 
  Test control definition:        : 
    Console . WriteLine ( "\n        Repository Listener Started Listening for messages" ) ; 
  Test C# declaration:            : 
    Console . WriteLine ( "\n        Repository Listener Started Listening for messages" ) ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n        Repository Listener Started Listening for messages" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n        Repository Listener Started Listening for messages" ) ; 
  Test begin scope                : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test end scope                  : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test class definition:          : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# function definition:    : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test control definition:        : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# declaration:            : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test begin scope                : while ( true ) { 
  handle begin scope              : while ( true ) { 
--- stack size = 5 ---
  Test end scope                  : while ( true ) { 
  Test preproc statement:         : while ( true ) { 
  Test namespace definition:      : while ( true ) { 
  control def    : while ( true ) { 
  Test class definition:          : while ( true ) { 
  Test struct definition:         : while ( true ) { 
  Test C# function definition:    : while ( true ) { 
  Test control definition:        : while ( true ) { 
  data declar    : CommMessage crcvMsg = null ; 
  Handle control definition:      : while ( true ) { 
  Test begin scope                : CommMessage crcvMsg = null ; 
  Test end scope                  : CommMessage crcvMsg = null ; 
  Test preproc statement:         : CommMessage crcvMsg = null ; 
  Test namespace definition:      : CommMessage crcvMsg = null ; 
  Test class definition:          : CommMessage crcvMsg = null ; 
  Test struct definition:         : CommMessage crcvMsg = null ; 
  Test C# function definition:    : CommMessage crcvMsg = null ; 
  Test control definition:        : CommMessage crcvMsg = null ; 
  function declar: crcvMsg = comm . getMessage ( ) ; 
  Test C# declaration:            : CommMessage crcvMsg = null ; 
  Handle C# declaration:          : CommMessage crcvMsg = null ; 
  Test begin scope                : crcvMsg = comm . getMessage ( ) ; 
  Test end scope                  : crcvMsg = comm . getMessage ( ) ; 
  Test preproc statement:         : crcvMsg = comm . getMessage ( ) ; 
  Test namespace definition:      : crcvMsg = comm . getMessage ( ) ; 
  executable     : if ( RepoEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test class definition:          : crcvMsg = comm . getMessage ( ) ; 
  Test struct definition:         : crcvMsg = comm . getMessage ( ) ; 
  Test C# function definition:    : crcvMsg = comm . getMessage ( ) ; 
  Test control definition:        : crcvMsg = comm . getMessage ( ) ; 
  Test C# declaration:            : crcvMsg = comm . getMessage ( ) ; 
  Handle C# declaration:          : crcvMsg = comm . getMessage ( ) ; 
  Test begin scope                : if ( RepoEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test end scope                  : if ( RepoEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test preproc statement:         : if ( RepoEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test namespace definition:      : if ( RepoEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test class definition:          : if ( RepoEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test struct definition:         : if ( RepoEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test C# function definition:    : if ( RepoEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test control definition:        : if ( RepoEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test C# declaration:            : if ( RepoEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test C# executable:             : if ( RepoEnvironment . verbose ) crcvMsg . show ( ) ; 
  Handle C# executable:           : if ( RepoEnvironment . verbose ) crcvMsg . show ( ) ; 
  Test begin scope                : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "reqfromCbuilder" ) || crcvMsg . command . Equals ( "reqfrombuilder" ) ) ) { 
  handle begin scope              : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "reqfromCbuilder" ) || crcvMsg . command . Equals ( "reqfrombuilder" ) ) ) { 
--- stack size = 6 ---
  Test end scope                  : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "reqfromCbuilder" ) || crcvMsg . command . Equals ( "reqfrombuilder" ) ) ) { 
  Test preproc statement:         : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "reqfromCbuilder" ) || crcvMsg . command . Equals ( "reqfrombuilder" ) ) ) { 
  Test namespace definition:      : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "reqfromCbuilder" ) || crcvMsg . command . Equals ( "reqfrombuilder" ) ) ) { 
  control def    : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "reqfromCbuilder" ) || crcvMsg . command . Equals ( "reqfrombuilder" ) ) ) { 
  Test class definition:          : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "reqfromCbuilder" ) || crcvMsg . command . Equals ( "reqfrombuilder" ) ) ) { 
  Test struct definition:         : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "reqfromCbuilder" ) || crcvMsg . command . Equals ( "reqfrombuilder" ) ) ) { 
  Test C# function definition:    : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "reqfromCbuilder" ) || crcvMsg . command . Equals ( "reqfrombuilder" ) ) ) { 
  Test control definition:        : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "reqfromCbuilder" ) || crcvMsg . command . Equals ( "reqfrombuilder" ) ) ) { 
  Handle control definition:      : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "reqfromCbuilder" ) || crcvMsg . command . Equals ( "reqfrombuilder" ) ) ) { 
  executable     : sendFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  Test begin scope                : sendFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
--- stack size = 5 ---
  Test end scope                  : sendFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  Test preproc statement:         : sendFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  Test namespace definition:      : sendFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  Test class definition:          : sendFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  Test struct definition:         : sendFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  Test C# function definition:    : sendFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  Test control definition:        : sendFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  Test C# declaration:            : sendFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  Test C# executable:             : sendFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  Handle C# executable:           : sendFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "deleterequest" ) || crcvMsg . command . Equals ( "deletefiles" ) ) ) { 
  handle begin scope              : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "deleterequest" ) || crcvMsg . command . Equals ( "deletefiles" ) ) ) { 
--- stack size = 6 ---
  Test end scope                  : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "deleterequest" ) || crcvMsg . command . Equals ( "deletefiles" ) ) ) { 
  Test preproc statement:         : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "deleterequest" ) || crcvMsg . command . Equals ( "deletefiles" ) ) ) { 
  Test namespace definition:      : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "deleterequest" ) || crcvMsg . command . Equals ( "deletefiles" ) ) ) { 
  Test class definition:          : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "deleterequest" ) || crcvMsg . command . Equals ( "deletefiles" ) ) ) { 
  control def    : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "deleterequest" ) || crcvMsg . command . Equals ( "deletefiles" ) ) ) { 
  Test struct definition:         : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "deleterequest" ) || crcvMsg . command . Equals ( "deletefiles" ) ) ) { 
  Test C# function definition:    : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "deleterequest" ) || crcvMsg . command . Equals ( "deletefiles" ) ) ) { 
  Test control definition:        : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "deleterequest" ) || crcvMsg . command . Equals ( "deletefiles" ) ) ) { 
  Handle control definition:      : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "deleterequest" ) || crcvMsg . command . Equals ( "deletefiles" ) ) ) { 
  Test begin scope                : deleteFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  executable     : deleteFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  Test end scope                  : deleteFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
--- stack size = 5 ---
  Test preproc statement:         : deleteFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  Test namespace definition:      : deleteFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  Test class definition:          : deleteFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  Test struct definition:         : deleteFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  Test C# function definition:    : deleteFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  Test control definition:        : deleteFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  Test C# declaration:            : deleteFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  Test C# executable:             : deleteFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  Handle C# executable:           : deleteFiles ( crcvMsg . port , crcvMsg . body , crcvMsg . command ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "csfilenamesreq" ) || crcvMsg . command . Equals ( "xmlfilenamesreq" ) ) ) { 
  handle begin scope              : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "csfilenamesreq" ) || crcvMsg . command . Equals ( "xmlfilenamesreq" ) ) ) { 
--- stack size = 6 ---
  Test end scope                  : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "csfilenamesreq" ) || crcvMsg . command . Equals ( "xmlfilenamesreq" ) ) ) { 
  Test preproc statement:         : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "csfilenamesreq" ) || crcvMsg . command . Equals ( "xmlfilenamesreq" ) ) ) { 
  Test namespace definition:      : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "csfilenamesreq" ) || crcvMsg . command . Equals ( "xmlfilenamesreq" ) ) ) { 
  Test class definition:          : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "csfilenamesreq" ) || crcvMsg . command . Equals ( "xmlfilenamesreq" ) ) ) { 
  control def    : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "csfilenamesreq" ) || crcvMsg . command . Equals ( "xmlfilenamesreq" ) ) ) { 
  Test struct definition:         : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "csfilenamesreq" ) || crcvMsg . command . Equals ( "xmlfilenamesreq" ) ) ) { 
  Test C# function definition:    : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "csfilenamesreq" ) || crcvMsg . command . Equals ( "xmlfilenamesreq" ) ) ) { 
  Test control definition:        : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "csfilenamesreq" ) || crcvMsg . command . Equals ( "xmlfilenamesreq" ) ) ) { 
  Handle control definition:      : 
    if ( crcvMsg . port != 0 && ( crcvMsg . command . Equals ( "csfilenamesreq" ) || crcvMsg . command . Equals ( "xmlfilenamesreq" ) ) ) { 
  executable     : sendFilenames ( crcvMsg . port , crcvMsg . command ) ; 
  Test begin scope                : sendFilenames ( crcvMsg . port , crcvMsg . command ) ; 
--- stack size = 5 ---
  Test end scope                  : sendFilenames ( crcvMsg . port , crcvMsg . command ) ; 
  Test preproc statement:         : sendFilenames ( crcvMsg . port , crcvMsg . command ) ; 
  Test namespace definition:      : sendFilenames ( crcvMsg . port , crcvMsg . command ) ; 
  Test class definition:          : sendFilenames ( crcvMsg . port , crcvMsg . command ) ; 
  Test struct definition:         : sendFilenames ( crcvMsg . port , crcvMsg . command ) ; 
  Test C# function definition:    : sendFilenames ( crcvMsg . port , crcvMsg . command ) ; 
  Test control definition:        : sendFilenames ( crcvMsg . port , crcvMsg . command ) ; 
  Test C# declaration:            : sendFilenames ( crcvMsg . port , crcvMsg . command ) ; 
  Test C# executable:             : sendFilenames ( crcvMsg . port , crcvMsg . command ) ; 
  Handle C# executable:           : sendFilenames ( crcvMsg . port , crcvMsg . command ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "ContentReq" ) ) { 
  handle begin scope              : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "ContentReq" ) ) { 
--- stack size = 6 ---
  Test end scope                  : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "ContentReq" ) ) { 
  Test preproc statement:         : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "ContentReq" ) ) { 
  Test namespace definition:      : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "ContentReq" ) ) { 
  control def    : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "ContentReq" ) ) { 
  Test class definition:          : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "ContentReq" ) ) { 
  Test struct definition:         : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "ContentReq" ) ) { 
  Test C# function definition:    : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "ContentReq" ) ) { 
  Test control definition:        : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "ContentReq" ) ) { 
  Handle control definition:      : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "ContentReq" ) ) { 
  Test begin scope                : sendContent ( crcvMsg . port , crcvMsg . body ) ; 
  Test end scope                  : sendContent ( crcvMsg . port , crcvMsg . body ) ; 
  Test preproc statement:         : sendContent ( crcvMsg . port , crcvMsg . body ) ; 
  Test namespace definition:      : sendContent ( crcvMsg . port , crcvMsg . body ) ; 
  executable     : sendContent ( crcvMsg . port , crcvMsg . body ) ; 
  Test class definition:          : sendContent ( crcvMsg . port , crcvMsg . body ) ; 
--- stack size = 5 ---
  Test struct definition:         : sendContent ( crcvMsg . port , crcvMsg . body ) ; 
  Test C# function definition:    : sendContent ( crcvMsg . port , crcvMsg . body ) ; 
  Test control definition:        : sendContent ( crcvMsg . port , crcvMsg . body ) ; 
  Test C# declaration:            : sendContent ( crcvMsg . port , crcvMsg . body ) ; 
  Test C# executable:             : sendContent ( crcvMsg . port , crcvMsg . body ) ; 
  Handle C# executable:           : sendContent ( crcvMsg . port , crcvMsg . body ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "xmlstring" ) ) { 
  handle begin scope              : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "xmlstring" ) ) { 
--- stack size = 6 ---
  Test end scope                  : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "xmlstring" ) ) { 
  Test preproc statement:         : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "xmlstring" ) ) { 
  Test namespace definition:      : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "xmlstring" ) ) { 
  Test class definition:          : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "xmlstring" ) ) { 
  control def    : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "xmlstring" ) ) { 
  Test struct definition:         : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "xmlstring" ) ) { 
  Test C# function definition:    : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "xmlstring" ) ) { 
  Test control definition:        : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "xmlstring" ) ) { 
  Handle control definition:      : if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "xmlstring" ) ) { 
  Test begin scope                : saveXmlFiles ( crcvMsg . port , crcvMsg . body ) ; 
  Test end scope                  : saveXmlFiles ( crcvMsg . port , crcvMsg . body ) ; 
  executable     : saveXmlFiles ( crcvMsg . port , crcvMsg . body ) ; 
  Test preproc statement:         : saveXmlFiles ( crcvMsg . port , crcvMsg . body ) ; 
--- stack size = 5 ---
  Test namespace definition:      : saveXmlFiles ( crcvMsg . port , crcvMsg . body ) ; 
  Test class definition:          : saveXmlFiles ( crcvMsg . port , crcvMsg . body ) ; 
  Test struct definition:         : saveXmlFiles ( crcvMsg . port , crcvMsg . body ) ; 
  Test C# function definition:    : saveXmlFiles ( crcvMsg . port , crcvMsg . body ) ; 
  Test control definition:        : saveXmlFiles ( crcvMsg . port , crcvMsg . body ) ; 
  Test C# declaration:            : saveXmlFiles ( crcvMsg . port , crcvMsg . body ) ; 
  Test C# executable:             : saveXmlFiles ( crcvMsg . port , crcvMsg . body ) ; 
  Handle C# executable:           : saveXmlFiles ( crcvMsg . port , crcvMsg . body ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "logTransferCompleted" ) ) { 
  handle begin scope              : 
    if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "logTransferCompleted" ) ) { 
--- stack size = 6 ---
  Test end scope                  : 
    if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "logTransferCompleted" ) ) { 
  Test preproc statement:         : 
    if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "logTransferCompleted" ) ) { 
  Test namespace definition:      : 
    if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "logTransferCompleted" ) ) { 
  Test class definition:          : 
    if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "logTransferCompleted" ) ) { 
  Test struct definition:         : 
    if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "logTransferCompleted" ) ) { 
  control def    : 
    if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "logTransferCompleted" ) ) { 
  Test C# function definition:    : 
    if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "logTransferCompleted" ) ) { 
  Test control definition:        : 
    if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "logTransferCompleted" ) ) { 
  Handle control definition:      : 
    if ( crcvMsg . port != 0 && crcvMsg . command . Equals ( "logTransferCompleted" ) ) { 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  executable     : sndMsg . command = "show" ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . command = "show" ; 
  Test end scope                  : sndMsg . command = "show" ; 
  Test preproc statement:         : sndMsg . command = "show" ; 
  Test namespace definition:      : sndMsg . command = "show" ; 
  Test class definition:          : sndMsg . command = "show" ; 
  Test struct definition:         : sndMsg . command = "show" ; 
  Test C# function definition:    : sndMsg . command = "show" ; 
  Test control definition:        : sndMsg . command = "show" ; 
  executable     : sndMsg . to = + crcvMsg . port + "/IPluggableComm" ; 
  Test C# declaration:            : sndMsg . command = "show" ; 
  Test C# executable:             : sndMsg . command = "show" ; 
  Handle C# executable:           : sndMsg . command = "show" ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : sndMsg . from = ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : sndMsg . body = "logsreceived" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : sndMsg . port = 8095 ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = + crcvMsg . port + "/IPluggableComm" ; 
  Test end scope                  : sndMsg . to = + crcvMsg . port + "/IPluggableComm" ; 
  Test preproc statement:         : sndMsg . to = + crcvMsg . port + "/IPluggableComm" ; 
  Test namespace definition:      : sndMsg . to = + crcvMsg . port + "/IPluggableComm" ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : sndMsg . to = + crcvMsg . port + "/IPluggableComm" ; 
--- stack size = 5 ---
  Test struct definition:         : sndMsg . to = + crcvMsg . port + "/IPluggableComm" ; 
  Test C# function definition:    : sndMsg . to = + crcvMsg . port + "/IPluggableComm" ; 
  Test control definition:        : sndMsg . to = + crcvMsg . port + "/IPluggableComm" ; 
  Test C# declaration:            : sndMsg . to = + crcvMsg . port + "/IPluggableComm" ; 
  Test C# executable:             : sndMsg . to = + crcvMsg . port + "/IPluggableComm" ; 
  Handle C# executable:           : sndMsg . to = + crcvMsg . port + "/IPluggableComm" ; 
  executable     : Thread . Sleep ( 2000 ) ; 
  Test begin scope                : sndMsg . from = ; 
--- stack size = 4 ---
  Test end scope                  : sndMsg . from = ; 
--- stack size = 3 ---
  Test preproc statement:         : sndMsg . from = ; 
  Test namespace definition:      : sndMsg . from = ; 
  Test class definition:          : sndMsg . from = ; 
  Test struct definition:         : sndMsg . from = ; 
  Test C# function definition:    : sndMsg . from = ; 
  Test control definition:        : sndMsg . from = ; 
  Test C# declaration:            : sndMsg . from = ; 
  Test C# executable:             : sndMsg . from = ; 
  Handle C# executable:           : sndMsg . from = ; 
  Test begin scope                : sndMsg . body = "logsreceived" ; 
  Test end scope                  : sndMsg . body = "logsreceived" ; 
  Test preproc statement:         : sndMsg . body = "logsreceived" ; 
  Test namespace definition:      : sndMsg . body = "logsreceived" ; 
  Test class definition:          : sndMsg . body = "logsreceived" ; 
  Test struct definition:         : sndMsg . body = "logsreceived" ; 
  Test C# function definition:    : sndMsg . body = "logsreceived" ; 
  Test control definition:        : sndMsg . body = "logsreceived" ; 
  Test C# declaration:            : sndMsg . body = "logsreceived" ; 
  Test C# executable:             : sndMsg . body = "logsreceived" ; 
  Handle C# executable:           : sndMsg . body = "logsreceived" ; 
  Test begin scope                : sndMsg . port = 8095 ; 
  Test end scope                  : sndMsg . port = 8095 ; 
  Test preproc statement:         : sndMsg . port = 8095 ; 
  Test namespace definition:      : sndMsg . port = 8095 ; 
  Test class definition:          : sndMsg . port = 8095 ; 
  Test struct definition:         : sndMsg . port = 8095 ; 
  Test C# function definition:    : sndMsg . port = 8095 ; 
  Test control definition:        : sndMsg . port = 8095 ; 
  Test C# declaration:            : sndMsg . port = 8095 ; 
  Test C# executable:             : sndMsg . port = 8095 ; 
  Handle C# executable:           : sndMsg . port = 8095 ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : Thread . Sleep ( 2000 ) ; 
  Test end scope                  : Thread . Sleep ( 2000 ) ; 
  Test preproc statement:         : Thread . Sleep ( 2000 ) ; 
  Test namespace definition:      : Thread . Sleep ( 2000 ) ; 
  Test class definition:          : Thread . Sleep ( 2000 ) ; 
  Test struct definition:         : Thread . Sleep ( 2000 ) ; 
  Test C# function definition:    : Thread . Sleep ( 2000 ) ; 
  Test control definition:        : Thread . Sleep ( 2000 ) ; 
  Test C# declaration:            : Thread . Sleep ( 2000 ) ; 
  Test C# executable:             : Thread . Sleep ( 2000 ) ; 
  Handle C# executable:           : Thread . Sleep ( 2000 ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : private static void deleteFiles ( int port , string body , string command ) { 
  handle begin scope              : private static void deleteFiles ( int port , string body , string command ) { 
--- stack size = 4 ---
  Test end scope                  : private static void deleteFiles ( int port , string body , string command ) { 
  Test preproc statement:         : private static void deleteFiles ( int port , string body , string command ) { 
  Test namespace definition:      : private static void deleteFiles ( int port , string body , string command ) { 
  Test class definition:          : private static void deleteFiles ( int port , string body , string command ) { 
  function def   : private static void deleteFiles ( int port , string body , string command ) { 
  Test struct definition:         : private static void deleteFiles ( int port , string body , string command ) { 
  Test C# function definition:    : private static void deleteFiles ( int port , string body , string command ) { 
  Handle C# function definition:  : private static void deleteFiles ( int port , string body , string command ) { 
  Test begin scope                : try { 
  handle begin scope              : try { 
--- stack size = 5 ---
  Test end scope                  : try { 
  Test preproc statement:         : try { 
  control def    : try { 
  Test namespace definition:      : try { 
  Test class definition:          : try { 
  Test struct definition:         : try { 
  Test C# function definition:    : try { 
  Test control definition:        : try { 
  Handle control definition:      : try { 
  Test begin scope                : string [ ] fnames = body . Split ( ' ' ) ; 
  Test end scope                  : string [ ] fnames = body . Split ( ' ' ) ; 
  Test preproc statement:         : string [ ] fnames = body . Split ( ' ' ) ; 
  Test namespace definition:      : string [ ] fnames = body . Split ( ' ' ) ; 
  Test class definition:          : string [ ] fnames = body . Split ( ' ' ) ; 
  Test struct definition:         : string [ ] fnames = body . Split ( ' ' ) ; 
  Test C# function definition:    : string [ ] fnames = body . Split ( ' ' ) ; 
  Test control definition:        : string [ ] fnames = body . Split ( ' ' ) ; 
  Test C# declaration:            : string [ ] fnames = body . Split ( ' ' ) ; 
  Test C# executable:             : string [ ] fnames = body . Split ( ' ' ) ; 
  executable     : string [ ] fnames = body . Split ( ' ' ) ; 
  Handle C# executable:           : string [ ] fnames = body . Split ( ' ' ) ; 
  Test begin scope                : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test end scope                  : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test preproc statement:         : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test namespace definition:      : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test class definition:          : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test struct definition:         : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test C# function definition:    : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  executable     : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test control definition:        : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test C# declaration:            : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test C# executable:             : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Handle C# executable:           : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test begin scope                : List < string > names = new List < string > ( ) ; 
  Test end scope                  : List < string > names = new List < string > ( ) ; 
  Test preproc statement:         : List < string > names = new List < string > ( ) ; 
  Test namespace definition:      : List < string > names = new List < string > ( ) ; 
  Test class definition:          : List < string > names = new List < string > ( ) ; 
  Test struct definition:         : List < string > names = new List < string > ( ) ; 
  function declar: List < string > names = new List < string > ( ) ; 
  Test C# function definition:    : List < string > names = new List < string > ( ) ; 
  Test control definition:        : List < string > names = new List < string > ( ) ; 
  Test C# declaration:            : List < string > names = new List < string > ( ) ; 
  Handle C# declaration:          : List < string > names = new List < string > ( ) ; 
  Test begin scope                : List < string > files = new List < string > ( ) ; 
  Test end scope                  : List < string > files = new List < string > ( ) ; 
  Test preproc statement:         : List < string > files = new List < string > ( ) ; 
  Test namespace definition:      : List < string > files = new List < string > ( ) ; 
  function declar: List < string > files = new List < string > ( ) ; 
  Test class definition:          : List < string > files = new List < string > ( ) ; 
  Test struct definition:         : List < string > files = new List < string > ( ) ; 
  Test C# function definition:    : List < string > files = new List < string > ( ) ; 
  Test control definition:        : List < string > files = new List < string > ( ) ; 
  Test C# declaration:            : List < string > files = new List < string > ( ) ; 
  Handle C# declaration:          : List < string > files = new List < string > ( ) ; 
  Test begin scope                : foreach ( string file in fnames ) { 
  handle begin scope              : foreach ( string file in fnames ) { 
--- stack size = 6 ---
  Test end scope                  : foreach ( string file in fnames ) { 
  Test preproc statement:         : foreach ( string file in fnames ) { 
  Test namespace definition:      : foreach ( string file in fnames ) { 
  control def    : foreach ( string file in fnames ) { 
  Test class definition:          : foreach ( string file in fnames ) { 
  Test struct definition:         : foreach ( string file in fnames ) { 
  Test C# function definition:    : foreach ( string file in fnames ) { 
  Test control definition:        : foreach ( string file in fnames ) { 
  Handle control definition:      : foreach ( string file in fnames ) { 
  Test begin scope                : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Test end scope                  : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Test preproc statement:         : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Test namespace definition:      : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  executable     : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Test class definition:          : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Test struct definition:         : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Test C# function definition:    : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Test control definition:        : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Test C# declaration:            : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Test C# executable:             : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Handle C# executable:           : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Test begin scope                : try { 
  handle begin scope              : try { 
--- stack size = 7 ---
  Test end scope                  : try { 
  Test preproc statement:         : try { 
  control def    : try { 
  Test namespace definition:      : try { 
  Test class definition:          : try { 
  Test struct definition:         : try { 
  Test C# function definition:    : try { 
  Test control definition:        : try { 
  Handle control definition:      : try { 
  Test begin scope                : File . Delete ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test end scope                  : File . Delete ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test preproc statement:         : File . Delete ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test namespace definition:      : File . Delete ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test class definition:          : File . Delete ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test struct definition:         : File . Delete ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test C# function definition:    : File . Delete ( Path . GetFileName ( list [ 0 ] ) ) ; 
  executable     : File . Delete ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test control definition:        : File . Delete ( Path . GetFileName ( list [ 0 ] ) ) ; 
--- stack size = 6 ---
  Test C# declaration:            : File . Delete ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test C# executable:             : File . Delete ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Handle C# executable:           : File . Delete ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : catch ( Exception ex ) { 
  handle begin scope              : catch ( Exception ex ) { 
--- stack size = 7 ---
  Test end scope                  : catch ( Exception ex ) { 
  Test preproc statement:         : catch ( Exception ex ) { 
  Test namespace definition:      : catch ( Exception ex ) { 
  control def    : catch ( Exception ex ) { 
  Test class definition:          : catch ( Exception ex ) { 
  Test struct definition:         : catch ( Exception ex ) { 
  Test C# function definition:    : catch ( Exception ex ) { 
  Test control definition:        : catch ( Exception ex ) { 
  Handle control definition:      : catch ( Exception ex ) { 
  Test begin scope                : Console . WriteLine ( ex . Message ) ; 
  Test end scope                  : Console . WriteLine ( ex . Message ) ; 
  executable     : Console . WriteLine ( ex . Message ) ; 
  Test preproc statement:         : Console . WriteLine ( ex . Message ) ; 
  Test namespace definition:      : Console . WriteLine ( ex . Message ) ; 
  Test class definition:          : Console . WriteLine ( ex . Message ) ; 
  Test struct definition:         : Console . WriteLine ( ex . Message ) ; 
  Test C# function definition:    : Console . WriteLine ( ex . Message ) ; 
  Test control definition:        : Console . WriteLine ( ex . Message ) ; 
  Test C# declaration:            : Console . WriteLine ( ex . Message ) ; 
  Test C# executable:             : Console . WriteLine ( ex . Message ) ; 
  Handle C# executable:           : Console . WriteLine ( ex . Message ) ; 
  Test begin scope                : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  data declar    : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test end scope                  : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test preproc statement:         : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg1 . command = command ; 
  Test namespace definition:      : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test class definition:          : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test struct definition:         : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg1 . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test control definition:        : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg1 . to = ; 
  Test C# declaration:            : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  Handle C# declaration:          : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test begin scope                : sndMsg1 . command = command ; 
  executable     : sndMsg1 . from = ; 
  Test end scope                  : sndMsg1 . command = command ; 
  Test preproc statement:         : sndMsg1 . command = command ; 
  Test namespace definition:      : sndMsg1 . command = command ; 
  Test class definition:          : sndMsg1 . command = command ; 
  Test struct definition:         : sndMsg1 . command = command ; 
  Test C# function definition:    : sndMsg1 . command = command ; 
  Test control definition:        : sndMsg1 . command = command ; 
  executable     : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Test C# declaration:            : sndMsg1 . command = command ; 
  Test C# executable:             : sndMsg1 . command = command ; 
  Handle C# executable:           : sndMsg1 . command = command ; 
  Test begin scope                : sndMsg1 . author = "Dinesh Dhamotharan" ; 
  executable     : sndMsg1 . port = 8095 ; 
  Test end scope                  : sndMsg1 . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg1 . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg1 . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg1 . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg1 . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg1 . author = "Dinesh Dhamotharan" ; 
  executable     : comm . postMessage ( sndMsg1 ) ; 
  Test control definition:        : sndMsg1 . author = "Dinesh Dhamotharan" ; 
--- stack size = 6 ---
  Test C# declaration:            : sndMsg1 . author = "Dinesh Dhamotharan" ; 
--- stack size = 5 ---
  Test C# executable:             : sndMsg1 . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg1 . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg1 . to = ; 
  Test end scope                  : sndMsg1 . to = ; 
  Test preproc statement:         : sndMsg1 . to = ; 
  Test namespace definition:      : sndMsg1 . to = ; 
  Test class definition:          : sndMsg1 . to = ; 
  Test struct definition:         : sndMsg1 . to = ; 
  Test C# function definition:    : sndMsg1 . to = ; 
  Test control definition:        : sndMsg1 . to = ; 
  Test C# declaration:            : sndMsg1 . to = ; 
  Test C# executable:             : sndMsg1 . to = ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Handle C# executable:           : sndMsg1 . to = ; 
  Test begin scope                : sndMsg1 . from = ; 
  Test end scope                  : sndMsg1 . from = ; 
  Test preproc statement:         : sndMsg1 . from = ; 
  Test namespace definition:      : sndMsg1 . from = ; 
  executable     : sndMsg . command = command ; 
  Test class definition:          : sndMsg1 . from = ; 
  Test struct definition:         : sndMsg1 . from = ; 
  Test C# function definition:    : sndMsg1 . from = ; 
  Test control definition:        : sndMsg1 . from = ; 
  Test C# declaration:            : sndMsg1 . from = ; 
  Test C# executable:             : sndMsg1 . from = ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg1 . from = ; 
  Test begin scope                : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Test end scope                  : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Test preproc statement:         : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Test namespace definition:      : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Test class definition:          : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  executable     : sndMsg . to = ; 
  Test struct definition:         : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Test C# function definition:    : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Test control definition:        : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Test C# declaration:            : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  executable     : sndMsg . from = ; 
  Test C# executable:             : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Handle C# executable:           : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Test begin scope                : sndMsg1 . port = 8095 ; 
  Test end scope                  : sndMsg1 . port = 8095 ; 
  Test preproc statement:         : sndMsg1 . port = 8095 ; 
  Test namespace definition:      : sndMsg1 . port = 8095 ; 
  Test class definition:          : sndMsg1 . port = 8095 ; 
  executable     : sndMsg . body = "success" ; 
  Test struct definition:         : sndMsg1 . port = 8095 ; 
  Test C# function definition:    : sndMsg1 . port = 8095 ; 
  Test control definition:        : sndMsg1 . port = 8095 ; 
  Test C# declaration:            : sndMsg1 . port = 8095 ; 
  Test C# executable:             : sndMsg1 . port = 8095 ; 
  Handle C# executable:           : sndMsg1 . port = 8095 ; 
  Test begin scope                : comm . postMessage ( sndMsg1 ) ; 
  Test end scope                  : comm . postMessage ( sndMsg1 ) ; 
  executable     : sndMsg . port = 8095 ; 
  Test preproc statement:         : comm . postMessage ( sndMsg1 ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg1 ) ; 
  Test class definition:          : comm . postMessage ( sndMsg1 ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg1 ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg1 ) ; 
  Test control definition:        : comm . postMessage ( sndMsg1 ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg1 ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg1 ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg1 ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
--- stack size = 4 ---
  Handle end scope                : } 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test begin scope                : sndMsg . command = command ; 
  Test end scope                  : sndMsg . command = command ; 
  Test preproc statement:         : sndMsg . command = command ; 
  Test namespace definition:      : sndMsg . command = command ; 
  Test class definition:          : sndMsg . command = command ; 
  Test struct definition:         : sndMsg . command = command ; 
  Test C# function definition:    : sndMsg . command = command ; 
  Test control definition:        : sndMsg . command = command ; 
  Test C# declaration:            : sndMsg . command = command ; 
  Test C# executable:             : sndMsg . command = command ; 
  Handle C# executable:           : sndMsg . command = command ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = ; 
  Test end scope                  : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . to = ; 
  Test class definition:          : sndMsg . to = ; 
  Test struct definition:         : sndMsg . to = ; 
  Test C# function definition:    : sndMsg . to = ; 
  Test control definition:        : sndMsg . to = ; 
  Test C# declaration:            : sndMsg . to = ; 
  Test C# executable:             : sndMsg . to = ; 
  Handle C# executable:           : sndMsg . to = ; 
  Test begin scope                : sndMsg . from = ; 
  Test end scope                  : sndMsg . from = ; 
  Test preproc statement:         : sndMsg . from = ; 
  Test namespace definition:      : sndMsg . from = ; 
  Test class definition:          : sndMsg . from = ; 
  Test struct definition:         : sndMsg . from = ; 
  Test C# function definition:    : sndMsg . from = ; 
  Test control definition:        : sndMsg . from = ; 
  Test C# declaration:            : sndMsg . from = ; 
  Test C# executable:             : sndMsg . from = ; 
  Handle C# executable:           : sndMsg . from = ; 
  Test begin scope                : sndMsg . body = "success" ; 
  Test end scope                  : sndMsg . body = "success" ; 
  Test preproc statement:         : sndMsg . body = "success" ; 
  Test namespace definition:      : sndMsg . body = "success" ; 
  Test class definition:          : sndMsg . body = "success" ; 
  Test struct definition:         : sndMsg . body = "success" ; 
  Test C# function definition:    : sndMsg . body = "success" ; 
  Test control definition:        : sndMsg . body = "success" ; 
  Test C# declaration:            : sndMsg . body = "success" ; 
  Test C# executable:             : sndMsg . body = "success" ; 
  Handle C# executable:           : sndMsg . body = "success" ; 
  Test begin scope                : sndMsg . port = 8095 ; 
  Test end scope                  : sndMsg . port = 8095 ; 
  Test preproc statement:         : sndMsg . port = 8095 ; 
  Test namespace definition:      : sndMsg . port = 8095 ; 
  Test class definition:          : sndMsg . port = 8095 ; 
  Test struct definition:         : sndMsg . port = 8095 ; 
  Test C# function definition:    : sndMsg . port = 8095 ; 
  Test control definition:        : sndMsg . port = 8095 ; 
  Test C# declaration:            : sndMsg . port = 8095 ; 
  Test C# executable:             : sndMsg . port = 8095 ; 
  Handle C# executable:           : sndMsg . port = 8095 ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : catch ( Exception ex ) { 
  handle begin scope              : catch ( Exception ex ) { 
--- stack size = 5 ---
  Test end scope                  : catch ( Exception ex ) { 
  Test preproc statement:         : catch ( Exception ex ) { 
  control def    : catch ( Exception ex ) { 
  Test namespace definition:      : catch ( Exception ex ) { 
  Test class definition:          : catch ( Exception ex ) { 
  Test struct definition:         : catch ( Exception ex ) { 
  Test C# function definition:    : catch ( Exception ex ) { 
  Test control definition:        : catch ( Exception ex ) { 
  Handle control definition:      : catch ( Exception ex ) { 
  Test begin scope                : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test end scope                  : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test preproc statement:         : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test namespace definition:      : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test class definition:          : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  executable     : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test struct definition:         : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test C# function definition:    : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test control definition:        : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test C# declaration:            : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test C# executable:             : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Handle C# executable:           : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test begin scope                : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test end scope                  : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  data declar    : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test preproc statement:         : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test namespace definition:      : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg1 . command = command ; 
  Test class definition:          : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test struct definition:         : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# function definition:    : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg1 . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# declaration:            : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg1 . to = ; 
  Handle C# declaration:          : CommMessage sndMsg1 = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test begin scope                : sndMsg1 . command = command ; 
  Test end scope                  : sndMsg1 . command = command ; 
  executable     : sndMsg1 . from = ; 
  Test preproc statement:         : sndMsg1 . command = command ; 
  Test namespace definition:      : sndMsg1 . command = command ; 
  Test class definition:          : sndMsg1 . command = command ; 
  Test struct definition:         : sndMsg1 . command = command ; 
  Test C# function definition:    : sndMsg1 . command = command ; 
  Test control definition:        : sndMsg1 . command = command ; 
  executable     : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Test C# declaration:            : sndMsg1 . command = command ; 
  Test C# executable:             : sndMsg1 . command = command ; 
  Handle C# executable:           : sndMsg1 . command = command ; 
  Test begin scope                : sndMsg1 . author = "Dinesh Dhamotharan" ; 
  executable     : sndMsg1 . port = 8095 ; 
  Test end scope                  : sndMsg1 . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg1 . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg1 . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg1 . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg1 . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg1 . author = "Dinesh Dhamotharan" ; 
  executable     : comm . postMessage ( sndMsg1 ) ; 
  Test control definition:        : sndMsg1 . author = "Dinesh Dhamotharan" ; 
--- stack size = 4 ---
  Test C# declaration:            : sndMsg1 . author = "Dinesh Dhamotharan" ; 
--- stack size = 3 ---
  Test C# executable:             : sndMsg1 . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg1 . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg1 . to = ; 
  Test end scope                  : sndMsg1 . to = ; 
  Test preproc statement:         : sndMsg1 . to = ; 
  Test namespace definition:      : sndMsg1 . to = ; 
  Test class definition:          : sndMsg1 . to = ; 
  Test struct definition:         : sndMsg1 . to = ; 
  Test C# function definition:    : sndMsg1 . to = ; 
  Test control definition:        : sndMsg1 . to = ; 
  Test C# declaration:            : sndMsg1 . to = ; 
  Test C# executable:             : sndMsg1 . to = ; 
  Handle C# executable:           : sndMsg1 . to = ; 
  Test begin scope                : sndMsg1 . from = ; 
  Test end scope                  : sndMsg1 . from = ; 
  Test preproc statement:         : sndMsg1 . from = ; 
  Test namespace definition:      : sndMsg1 . from = ; 
  Test class definition:          : sndMsg1 . from = ; 
  Test struct definition:         : sndMsg1 . from = ; 
  Test C# function definition:    : sndMsg1 . from = ; 
  Test control definition:        : sndMsg1 . from = ; 
  Test C# declaration:            : sndMsg1 . from = ; 
  Test C# executable:             : sndMsg1 . from = ; 
  Handle C# executable:           : sndMsg1 . from = ; 
  Test begin scope                : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Test end scope                  : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Test preproc statement:         : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Test namespace definition:      : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Test class definition:          : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Test struct definition:         : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Test C# function definition:    : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Test control definition:        : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Test C# declaration:            : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Test C# executable:             : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Handle C# executable:           : sndMsg1 . body = "Deletion failed with the exception" + ex . Message ; 
  Test begin scope                : sndMsg1 . port = 8095 ; 
  Test end scope                  : sndMsg1 . port = 8095 ; 
  Test preproc statement:         : sndMsg1 . port = 8095 ; 
  Test namespace definition:      : sndMsg1 . port = 8095 ; 
  Test class definition:          : sndMsg1 . port = 8095 ; 
  Test struct definition:         : sndMsg1 . port = 8095 ; 
  Test C# function definition:    : sndMsg1 . port = 8095 ; 
  Test control definition:        : sndMsg1 . port = 8095 ; 
  Test C# declaration:            : sndMsg1 . port = 8095 ; 
  Test C# executable:             : sndMsg1 . port = 8095 ; 
  Handle C# executable:           : sndMsg1 . port = 8095 ; 
  Test begin scope                : comm . postMessage ( sndMsg1 ) ; 
  Test end scope                  : comm . postMessage ( sndMsg1 ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg1 ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg1 ) ; 
  Test class definition:          : comm . postMessage ( sndMsg1 ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg1 ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg1 ) ; 
  Test control definition:        : comm . postMessage ( sndMsg1 ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg1 ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg1 ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg1 ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public static void saveXmlFiles ( int portno , string body ) { 
  handle begin scope              : public static void saveXmlFiles ( int portno , string body ) { 
--- stack size = 4 ---
  Test end scope                  : public static void saveXmlFiles ( int portno , string body ) { 
  Test preproc statement:         : public static void saveXmlFiles ( int portno , string body ) { 
  Test namespace definition:      : public static void saveXmlFiles ( int portno , string body ) { 
  function def   : public static void saveXmlFiles ( int portno , string body ) { 
  Test class definition:          : public static void saveXmlFiles ( int portno , string body ) { 
  Test struct definition:         : public static void saveXmlFiles ( int portno , string body ) { 
  Test C# function definition:    : public static void saveXmlFiles ( int portno , string body ) { 
  Handle C# function definition:  : public static void saveXmlFiles ( int portno , string body ) { 
  Test begin scope                : try { 
  handle begin scope              : try { 
--- stack size = 5 ---
  Test end scope                  : try { 
  Test preproc statement:         : try { 
  control def    : try { 
  Test namespace definition:      : try { 
  Test class definition:          : try { 
  Test struct definition:         : try { 
  Test C# function definition:    : try { 
  Test control definition:        : try { 
  Handle control definition:      : try { 
  Test begin scope                : string [ ] values = body . Split ( ',' ) ; 
  Test end scope                  : string [ ] values = body . Split ( ',' ) ; 
  Test preproc statement:         : string [ ] values = body . Split ( ',' ) ; 
  Test namespace definition:      : string [ ] values = body . Split ( ',' ) ; 
  Test class definition:          : string [ ] values = body . Split ( ',' ) ; 
  Test struct definition:         : string [ ] values = body . Split ( ',' ) ; 
  Test C# function definition:    : string [ ] values = body . Split ( ',' ) ; 
  executable     : string [ ] values = body . Split ( ',' ) ; 
  Test control definition:        : string [ ] values = body . Split ( ',' ) ; 
  Test C# declaration:            : string [ ] values = body . Split ( ',' ) ; 
  Test C# executable:             : string [ ] values = body . Split ( ',' ) ; 
  Handle C# executable:           : string [ ] values = body . Split ( ',' ) ; 
  Test begin scope                : string path = @ RepoEnvironment . fileStorage + "/" + values [ 0 ] ; 
  Test end scope                  : string path = @ RepoEnvironment . fileStorage + "/" + values [ 0 ] ; 
  Test preproc statement:         : string path = @ RepoEnvironment . fileStorage + "/" + values [ 0 ] ; 
  data declar    : string path = @ RepoEnvironment . fileStorage + "/" + values [ 0 ] ; 
  Test namespace definition:      : string path = @ RepoEnvironment . fileStorage + "/" + values [ 0 ] ; 
  Test class definition:          : string path = @ RepoEnvironment . fileStorage + "/" + values [ 0 ] ; 
  Test struct definition:         : string path = @ RepoEnvironment . fileStorage + "/" + values [ 0 ] ; 
  Test C# function definition:    : string path = @ RepoEnvironment . fileStorage + "/" + values [ 0 ] ; 
  Test control definition:        : string path = @ RepoEnvironment . fileStorage + "/" + values [ 0 ] ; 
  Test C# declaration:            : string path = @ RepoEnvironment . fileStorage + "/" + values [ 0 ] ; 
  Handle C# declaration:          : string path = @ RepoEnvironment . fileStorage + "/" + values [ 0 ] ; 
  executable     : File . WriteAllText ( path , values [ 1 ] ) ; 
  Test begin scope                : File . WriteAllText ( path , values [ 1 ] ) ; 
  Test end scope                  : File . WriteAllText ( path , values [ 1 ] ) ; 
  Test preproc statement:         : File . WriteAllText ( path , values [ 1 ] ) ; 
  Test namespace definition:      : File . WriteAllText ( path , values [ 1 ] ) ; 
  Test class definition:          : File . WriteAllText ( path , values [ 1 ] ) ; 
  Test struct definition:         : File . WriteAllText ( path , values [ 1 ] ) ; 
  Test C# function definition:    : File . WriteAllText ( path , values [ 1 ] ) ; 
  Test control definition:        : File . WriteAllText ( path , values [ 1 ] ) ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# declaration:            : File . WriteAllText ( path , values [ 1 ] ) ; 
  Test C# executable:             : File . WriteAllText ( path , values [ 1 ] ) ; 
  Handle C# executable:           : File . WriteAllText ( path , values [ 1 ] ) ; 
  executable     : sndMsg . command = "xmlsaved" ; 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . to = ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . from = ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . body = "xmlsaved" ; 
  Test begin scope                : sndMsg . command = "xmlsaved" ; 
  Test end scope                  : sndMsg . command = "xmlsaved" ; 
  Test preproc statement:         : sndMsg . command = "xmlsaved" ; 
  Test namespace definition:      : sndMsg . command = "xmlsaved" ; 
  executable     : sndMsg . port = 8095 ; 
  Test class definition:          : sndMsg . command = "xmlsaved" ; 
  Test struct definition:         : sndMsg . command = "xmlsaved" ; 
  Test C# function definition:    : sndMsg . command = "xmlsaved" ; 
  Test control definition:        : sndMsg . command = "xmlsaved" ; 
  Test C# declaration:            : sndMsg . command = "xmlsaved" ; 
  Test C# executable:             : sndMsg . command = "xmlsaved" ; 
  Handle C# executable:           : sndMsg . command = "xmlsaved" ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
--- stack size = 4 ---
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = ; 
  Test end scope                  : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . to = ; 
  Test class definition:          : sndMsg . to = ; 
  Test struct definition:         : sndMsg . to = ; 
  Test C# function definition:    : sndMsg . to = ; 
  Test control definition:        : sndMsg . to = ; 
  Test C# declaration:            : sndMsg . to = ; 
  Test C# executable:             : sndMsg . to = ; 
  Handle C# executable:           : sndMsg . to = ; 
  Test begin scope                : sndMsg . from = ; 
  Test end scope                  : sndMsg . from = ; 
  Test preproc statement:         : sndMsg . from = ; 
  Test namespace definition:      : sndMsg . from = ; 
  Test class definition:          : sndMsg . from = ; 
  Test struct definition:         : sndMsg . from = ; 
  Test C# function definition:    : sndMsg . from = ; 
  Test control definition:        : sndMsg . from = ; 
  Test C# declaration:            : sndMsg . from = ; 
  Test C# executable:             : sndMsg . from = ; 
  Handle C# executable:           : sndMsg . from = ; 
  Test begin scope                : sndMsg . body = "xmlsaved" ; 
  Test end scope                  : sndMsg . body = "xmlsaved" ; 
  Test preproc statement:         : sndMsg . body = "xmlsaved" ; 
  Test namespace definition:      : sndMsg . body = "xmlsaved" ; 
  Test class definition:          : sndMsg . body = "xmlsaved" ; 
  Test struct definition:         : sndMsg . body = "xmlsaved" ; 
  Test C# function definition:    : sndMsg . body = "xmlsaved" ; 
  Test control definition:        : sndMsg . body = "xmlsaved" ; 
  Test C# declaration:            : sndMsg . body = "xmlsaved" ; 
  Test C# executable:             : sndMsg . body = "xmlsaved" ; 
  Handle C# executable:           : sndMsg . body = "xmlsaved" ; 
  Test begin scope                : sndMsg . port = 8095 ; 
  Test end scope                  : sndMsg . port = 8095 ; 
  Test preproc statement:         : sndMsg . port = 8095 ; 
  Test namespace definition:      : sndMsg . port = 8095 ; 
  Test class definition:          : sndMsg . port = 8095 ; 
  Test struct definition:         : sndMsg . port = 8095 ; 
  Test C# function definition:    : sndMsg . port = 8095 ; 
  Test control definition:        : sndMsg . port = 8095 ; 
  Test C# declaration:            : sndMsg . port = 8095 ; 
  Test C# executable:             : sndMsg . port = 8095 ; 
  Handle C# executable:           : sndMsg . port = 8095 ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : catch ( Exception ex ) { 
  handle begin scope              : catch ( Exception ex ) { 
--- stack size = 5 ---
  Test end scope                  : catch ( Exception ex ) { 
  Test preproc statement:         : catch ( Exception ex ) { 
  control def    : catch ( Exception ex ) { 
  Test namespace definition:      : catch ( Exception ex ) { 
  Test class definition:          : catch ( Exception ex ) { 
  Test struct definition:         : catch ( Exception ex ) { 
  Test C# function definition:    : catch ( Exception ex ) { 
  Test control definition:        : catch ( Exception ex ) { 
  Handle control definition:      : catch ( Exception ex ) { 
  Test begin scope                : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test end scope                  : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test preproc statement:         : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  executable     : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test namespace definition:      : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
--- stack size = 4 ---
  Test class definition:          : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
--- stack size = 3 ---
  Test struct definition:         : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test C# function definition:    : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test control definition:        : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test C# declaration:            : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test C# executable:             : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Handle C# executable:           : Console . Write ( "\n--{0}--\n" , ex . Message ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public static void sendContent ( int portno , string fileName ) { 
  handle begin scope              : public static void sendContent ( int portno , string fileName ) { 
--- stack size = 4 ---
  Test end scope                  : public static void sendContent ( int portno , string fileName ) { 
  Test preproc statement:         : public static void sendContent ( int portno , string fileName ) { 
  Test namespace definition:      : public static void sendContent ( int portno , string fileName ) { 
  function def   : public static void sendContent ( int portno , string fileName ) { 
  Test class definition:          : public static void sendContent ( int portno , string fileName ) { 
  Test struct definition:         : public static void sendContent ( int portno , string fileName ) { 
  data declar    : string body = "" ; 
  Test C# function definition:    : public static void sendContent ( int portno , string fileName ) { 
  Handle C# function definition:  : public static void sendContent ( int portno , string fileName ) { 
  Test begin scope                : string body = "" ; 
  Test end scope                  : string body = "" ; 
  Test preproc statement:         : string body = "" ; 
  Test namespace definition:      : string body = "" ; 
  Test class definition:          : string body = "" ; 
  Test struct definition:         : string body = "" ; 
  Test C# function definition:    : string body = "" ; 
  Test control definition:        : string body = "" ; 
  Test C# declaration:            : string body = "" ; 
  Handle C# declaration:          : string body = "" ; 
  Test begin scope                : try { 
  handle begin scope              : try { 
--- stack size = 5 ---
  Test end scope                  : try { 
  Test preproc statement:         : try { 
  control def    : try { 
  Test namespace definition:      : try { 
  Test class definition:          : try { 
  Test struct definition:         : try { 
  Test C# function definition:    : try { 
  Test control definition:        : try { 
  Handle control definition:      : try { 
  Test begin scope                : 
    string path = System . IO . Path . Combine ( RepoEnvironment . fileStorage , fileName ) ; 
  Test end scope                  : 
    string path = System . IO . Path . Combine ( RepoEnvironment . fileStorage , fileName ) ; 
  Test preproc statement:         : 
    string path = System . IO . Path . Combine ( RepoEnvironment . fileStorage , fileName ) ; 
  Test namespace definition:      : 
    string path = System . IO . Path . Combine ( RepoEnvironment . fileStorage , fileName ) ; 
  Test class definition:          : 
    string path = System . IO . Path . Combine ( RepoEnvironment . fileStorage , fileName ) ; 
  Test struct definition:         : 
    string path = System . IO . Path . Combine ( RepoEnvironment . fileStorage , fileName ) ; 
  data declar    : 
    string path = System . IO . Path . Combine ( RepoEnvironment . fileStorage , fileName ) ; 
  Test C# function definition:    : 
    string path = System . IO . Path . Combine ( RepoEnvironment . fileStorage , fileName ) ; 
  Test control definition:        : 
    string path = System . IO . Path . Combine ( RepoEnvironment . fileStorage , fileName ) ; 
  Test C# declaration:            : 
    string path = System . IO . Path . Combine ( RepoEnvironment . fileStorage , fileName ) ; 
  executable     : body = File . ReadAllText ( path ) ; 
  Handle C# declaration:          : 
    string path = System . IO . Path . Combine ( RepoEnvironment . fileStorage , fileName ) ; 
--- stack size = 4 ---
  Test begin scope                : body = File . ReadAllText ( path ) ; 
  Test end scope                  : body = File . ReadAllText ( path ) ; 
  Test preproc statement:         : body = File . ReadAllText ( path ) ; 
  Test namespace definition:      : body = File . ReadAllText ( path ) ; 
  Test class definition:          : body = File . ReadAllText ( path ) ; 
  Test struct definition:         : body = File . ReadAllText ( path ) ; 
  Test C# function definition:    : body = File . ReadAllText ( path ) ; 
  Test control definition:        : body = File . ReadAllText ( path ) ; 
  Test C# declaration:            : body = File . ReadAllText ( path ) ; 
  Test C# executable:             : body = File . ReadAllText ( path ) ; 
  Handle C# executable:           : body = File . ReadAllText ( path ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : catch ( Exception ex ) { 
  handle begin scope              : catch ( Exception ex ) { 
--- stack size = 5 ---
  Test end scope                  : catch ( Exception ex ) { 
  Test preproc statement:         : catch ( Exception ex ) { 
  control def    : catch ( Exception ex ) { 
  Test namespace definition:      : catch ( Exception ex ) { 
  Test class definition:          : catch ( Exception ex ) { 
  Test struct definition:         : catch ( Exception ex ) { 
  Test C# function definition:    : catch ( Exception ex ) { 
  Test control definition:        : catch ( Exception ex ) { 
  executable     : body = ex . Message ; 
  Handle control definition:      : catch ( Exception ex ) { 
--- stack size = 4 ---
  Test begin scope                : body = ex . Message ; 
  Test end scope                  : body = ex . Message ; 
  Test preproc statement:         : body = ex . Message ; 
  Test namespace definition:      : body = ex . Message ; 
  Test class definition:          : body = ex . Message ; 
  Test struct definition:         : body = ex . Message ; 
  Test C# function definition:    : body = ex . Message ; 
  Test control definition:        : body = ex . Message ; 
  Test C# declaration:            : body = ex . Message ; 
  Test C# executable:             : body = ex . Message ; 
  Handle C# executable:           : body = ex . Message ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . command = "fileContents" ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test begin scope                : sndMsg . command = "fileContents" ; 
  Test end scope                  : sndMsg . command = "fileContents" ; 
  Test preproc statement:         : sndMsg . command = "fileContents" ; 
  executable     : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . command = "fileContents" ; 
  Test class definition:          : sndMsg . command = "fileContents" ; 
  Test struct definition:         : sndMsg . command = "fileContents" ; 
  Test C# function definition:    : sndMsg . command = "fileContents" ; 
  Test control definition:        : sndMsg . command = "fileContents" ; 
  executable     : sndMsg . from = ; 
  Test C# declaration:            : sndMsg . command = "fileContents" ; 
  Test C# executable:             : sndMsg . command = "fileContents" ; 
  Handle C# executable:           : sndMsg . command = "fileContents" ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : sndMsg . body = body ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  executable     : sndMsg . port = 8095 ; 
  Test begin scope                : sndMsg . to = ; 
  Test end scope                  : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . to = ; 
  Test class definition:          : sndMsg . to = ; 
  Test struct definition:         : sndMsg . to = ; 
  Test C# function definition:    : sndMsg . to = ; 
  Test control definition:        : sndMsg . to = ; 
  Test C# declaration:            : sndMsg . to = ; 
  Test C# executable:             : sndMsg . to = ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : sndMsg . to = ; 
--- stack size = 3 ---
  Test begin scope                : sndMsg . from = ; 
  Test end scope                  : sndMsg . from = ; 
  Test preproc statement:         : sndMsg . from = ; 
  Test namespace definition:      : sndMsg . from = ; 
  Test class definition:          : sndMsg . from = ; 
  Test struct definition:         : sndMsg . from = ; 
  Test C# function definition:    : sndMsg . from = ; 
  Test control definition:        : sndMsg . from = ; 
  Test C# declaration:            : sndMsg . from = ; 
  Test C# executable:             : sndMsg . from = ; 
  Handle C# executable:           : sndMsg . from = ; 
  Test begin scope                : sndMsg . body = body ; 
  Test end scope                  : sndMsg . body = body ; 
  Test preproc statement:         : sndMsg . body = body ; 
  Test namespace definition:      : sndMsg . body = body ; 
  Test class definition:          : sndMsg . body = body ; 
  Test struct definition:         : sndMsg . body = body ; 
  Test C# function definition:    : sndMsg . body = body ; 
  Test control definition:        : sndMsg . body = body ; 
  Test C# declaration:            : sndMsg . body = body ; 
  Test C# executable:             : sndMsg . body = body ; 
  Handle C# executable:           : sndMsg . body = body ; 
  Test begin scope                : sndMsg . port = 8095 ; 
  Test end scope                  : sndMsg . port = 8095 ; 
  Test preproc statement:         : sndMsg . port = 8095 ; 
  Test namespace definition:      : sndMsg . port = 8095 ; 
  Test class definition:          : sndMsg . port = 8095 ; 
  Test struct definition:         : sndMsg . port = 8095 ; 
  Test C# function definition:    : sndMsg . port = 8095 ; 
  Test control definition:        : sndMsg . port = 8095 ; 
  Test C# declaration:            : sndMsg . port = 8095 ; 
  Test C# executable:             : sndMsg . port = 8095 ; 
  Handle C# executable:           : sndMsg . port = 8095 ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public static void sendFilenames ( int portno , string type ) { 
  handle begin scope              : public static void sendFilenames ( int portno , string type ) { 
--- stack size = 4 ---
  Test end scope                  : public static void sendFilenames ( int portno , string type ) { 
  Test preproc statement:         : public static void sendFilenames ( int portno , string type ) { 
  Test namespace definition:      : public static void sendFilenames ( int portno , string type ) { 
  function def   : public static void sendFilenames ( int portno , string type ) { 
  Test class definition:          : public static void sendFilenames ( int portno , string type ) { 
  Test struct definition:         : public static void sendFilenames ( int portno , string type ) { 
  data declar    : string ext = "" ; 
  Test C# function definition:    : public static void sendFilenames ( int portno , string type ) { 
  Handle C# function definition:  : public static void sendFilenames ( int portno , string type ) { 
  data declar    : string path = "" ; 
  Test begin scope                : string ext = "" ; 
  Test end scope                  : string ext = "" ; 
  Test preproc statement:         : string ext = "" ; 
  data declar    : string command = "" ; 
  Test namespace definition:      : string ext = "" ; 
  Test class definition:          : string ext = "" ; 
  Test struct definition:         : string ext = "" ; 
  Test C# function definition:    : string ext = "" ; 
  Test control definition:        : string ext = "" ; 
  Test C# declaration:            : string ext = "" ; 
  Handle C# declaration:          : string ext = "" ; 
  Test begin scope                : string path = "" ; 
  Test end scope                  : string path = "" ; 
  Test preproc statement:         : string path = "" ; 
  Test namespace definition:      : string path = "" ; 
  Test class definition:          : string path = "" ; 
  Test struct definition:         : string path = "" ; 
  Test C# function definition:    : string path = "" ; 
  Test control definition:        : string path = "" ; 
  Test C# declaration:            : string path = "" ; 
  Handle C# declaration:          : string path = "" ; 
  Test begin scope                : string command = "" ; 
  Test end scope                  : string command = "" ; 
  Test preproc statement:         : string command = "" ; 
  Test namespace definition:      : string command = "" ; 
  Test class definition:          : string command = "" ; 
  Test struct definition:         : string command = "" ; 
  Test C# function definition:    : string command = "" ; 
  Test control definition:        : string command = "" ; 
  Test C# declaration:            : string command = "" ; 
  Handle C# declaration:          : string command = "" ; 
  Test begin scope                : if ( type . Equals ( "csfilenamesreq" ) ) { 
  handle begin scope              : if ( type . Equals ( "csfilenamesreq" ) ) { 
--- stack size = 5 ---
  Test end scope                  : if ( type . Equals ( "csfilenamesreq" ) ) { 
  Test preproc statement:         : if ( type . Equals ( "csfilenamesreq" ) ) { 
  Test namespace definition:      : if ( type . Equals ( "csfilenamesreq" ) ) { 
  control def    : if ( type . Equals ( "csfilenamesreq" ) ) { 
  Test class definition:          : if ( type . Equals ( "csfilenamesreq" ) ) { 
  Test struct definition:         : if ( type . Equals ( "csfilenamesreq" ) ) { 
  executable     : ext = "*.cs" ; 
  Test C# function definition:    : if ( type . Equals ( "csfilenamesreq" ) ) { 
  Test control definition:        : if ( type . Equals ( "csfilenamesreq" ) ) { 
  Handle control definition:      : if ( type . Equals ( "csfilenamesreq" ) ) { 
  Test begin scope                : ext = "*.cs" ; 
  executable     : path = RepoEnvironment . fileStorage ; 
  Test end scope                  : ext = "*.cs" ; 
  Test preproc statement:         : ext = "*.cs" ; 
  Test namespace definition:      : ext = "*.cs" ; 
  Test class definition:          : ext = "*.cs" ; 
  executable     : command = "csFileListFromRepo" ; 
  Test struct definition:         : ext = "*.cs" ; 
--- stack size = 4 ---
  Test C# function definition:    : ext = "*.cs" ; 
  Test control definition:        : ext = "*.cs" ; 
  Test C# declaration:            : ext = "*.cs" ; 
  Test C# executable:             : ext = "*.cs" ; 
  Handle C# executable:           : ext = "*.cs" ; 
  Test begin scope                : path = RepoEnvironment . fileStorage ; 
  Test end scope                  : path = RepoEnvironment . fileStorage ; 
  Test preproc statement:         : path = RepoEnvironment . fileStorage ; 
  Test namespace definition:      : path = RepoEnvironment . fileStorage ; 
  Test class definition:          : path = RepoEnvironment . fileStorage ; 
  Test struct definition:         : path = RepoEnvironment . fileStorage ; 
  Test C# function definition:    : path = RepoEnvironment . fileStorage ; 
  Test control definition:        : path = RepoEnvironment . fileStorage ; 
  Test C# declaration:            : path = RepoEnvironment . fileStorage ; 
  Test C# executable:             : path = RepoEnvironment . fileStorage ; 
  Handle C# executable:           : path = RepoEnvironment . fileStorage ; 
  Test begin scope                : command = "csFileListFromRepo" ; 
  Test end scope                  : command = "csFileListFromRepo" ; 
  Test preproc statement:         : command = "csFileListFromRepo" ; 
  Test namespace definition:      : command = "csFileListFromRepo" ; 
  Test class definition:          : command = "csFileListFromRepo" ; 
  Test struct definition:         : command = "csFileListFromRepo" ; 
  Test C# function definition:    : command = "csFileListFromRepo" ; 
  Test control definition:        : command = "csFileListFromRepo" ; 
  Test C# declaration:            : command = "csFileListFromRepo" ; 
  Test C# executable:             : command = "csFileListFromRepo" ; 
  Handle C# executable:           : command = "csFileListFromRepo" ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  executable     : ext = "*.xml" ; 
  Handle control definition:      : else { 
  Test begin scope                : ext = "*.xml" ; 
  Test end scope                  : ext = "*.xml" ; 
  Test preproc statement:         : ext = "*.xml" ; 
  Test namespace definition:      : ext = "*.xml" ; 
  Test class definition:          : ext = "*.xml" ; 
  executable     : path = RepoEnvironment . fileStorage ; 
  Test struct definition:         : ext = "*.xml" ; 
  Test C# function definition:    : ext = "*.xml" ; 
  Test control definition:        : ext = "*.xml" ; 
  executable     : command = "xmlFileListFromRepo" ; 
  Test C# declaration:            : ext = "*.xml" ; 
--- stack size = 4 ---
  Test C# executable:             : ext = "*.xml" ; 
  Handle C# executable:           : ext = "*.xml" ; 
  Test begin scope                : path = RepoEnvironment . fileStorage ; 
  Test end scope                  : path = RepoEnvironment . fileStorage ; 
  Test preproc statement:         : path = RepoEnvironment . fileStorage ; 
  Test namespace definition:      : path = RepoEnvironment . fileStorage ; 
  Test class definition:          : path = RepoEnvironment . fileStorage ; 
  Test struct definition:         : path = RepoEnvironment . fileStorage ; 
  Test C# function definition:    : path = RepoEnvironment . fileStorage ; 
  Test control definition:        : path = RepoEnvironment . fileStorage ; 
  executable     : string [ ] list = Directory . GetFiles ( path , ext ) ; 
  Test C# declaration:            : path = RepoEnvironment . fileStorage ; 
  Test C# executable:             : path = RepoEnvironment . fileStorage ; 
  data declar    : string filenames = "" ; 
  Handle C# executable:           : path = RepoEnvironment . fileStorage ; 
  Test begin scope                : command = "xmlFileListFromRepo" ; 
  Test end scope                  : command = "xmlFileListFromRepo" ; 
  Test preproc statement:         : command = "xmlFileListFromRepo" ; 
  Test namespace definition:      : command = "xmlFileListFromRepo" ; 
  Test class definition:          : command = "xmlFileListFromRepo" ; 
  Test struct definition:         : command = "xmlFileListFromRepo" ; 
  Test C# function definition:    : command = "xmlFileListFromRepo" ; 
  Test control definition:        : command = "xmlFileListFromRepo" ; 
  Test C# declaration:            : command = "xmlFileListFromRepo" ; 
  Test C# executable:             : command = "xmlFileListFromRepo" ; 
  Handle C# executable:           : command = "xmlFileListFromRepo" ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : string [ ] list = Directory . GetFiles ( path , ext ) ; 
  Test end scope                  : string [ ] list = Directory . GetFiles ( path , ext ) ; 
  Test preproc statement:         : string [ ] list = Directory . GetFiles ( path , ext ) ; 
  Test namespace definition:      : string [ ] list = Directory . GetFiles ( path , ext ) ; 
  Test class definition:          : string [ ] list = Directory . GetFiles ( path , ext ) ; 
  Test struct definition:         : string [ ] list = Directory . GetFiles ( path , ext ) ; 
  Test C# function definition:    : string [ ] list = Directory . GetFiles ( path , ext ) ; 
  Test control definition:        : string [ ] list = Directory . GetFiles ( path , ext ) ; 
  Test C# declaration:            : string [ ] list = Directory . GetFiles ( path , ext ) ; 
  Test C# executable:             : string [ ] list = Directory . GetFiles ( path , ext ) ; 
  Handle C# executable:           : string [ ] list = Directory . GetFiles ( path , ext ) ; 
  Test begin scope                : string filenames = "" ; 
  Test end scope                  : string filenames = "" ; 
  Test preproc statement:         : string filenames = "" ; 
  Test namespace definition:      : string filenames = "" ; 
  Test class definition:          : string filenames = "" ; 
  Test struct definition:         : string filenames = "" ; 
  Test C# function definition:    : string filenames = "" ; 
  Test control definition:        : string filenames = "" ; 
  Test C# declaration:            : string filenames = "" ; 
  Handle C# declaration:          : string filenames = "" ; 
  Test begin scope                : foreach ( string fileone in list ) { 
  handle begin scope              : foreach ( string fileone in list ) { 
--- stack size = 5 ---
  Test end scope                  : foreach ( string fileone in list ) { 
  Test preproc statement:         : foreach ( string fileone in list ) { 
  Test namespace definition:      : foreach ( string fileone in list ) { 
  control def    : foreach ( string fileone in list ) { 
  Test class definition:          : foreach ( string fileone in list ) { 
  Test struct definition:         : foreach ( string fileone in list ) { 
  Test C# function definition:    : foreach ( string fileone in list ) { 
  Test control definition:        : foreach ( string fileone in list ) { 
  Handle control definition:      : foreach ( string fileone in list ) { 
  Test begin scope                : filenames = filenames + Path . GetFileName ( fileone ) + " " ; 
  Test end scope                  : filenames = filenames + Path . GetFileName ( fileone ) + " " ; 
  Test preproc statement:         : filenames = filenames + Path . GetFileName ( fileone ) + " " ; 
  executable     : filenames = filenames + Path . GetFileName ( fileone ) + " " ; 
  Test namespace definition:      : filenames = filenames + Path . GetFileName ( fileone ) + " " ; 
--- stack size = 4 ---
  Test class definition:          : filenames = filenames + Path . GetFileName ( fileone ) + " " ; 
  Test struct definition:         : filenames = filenames + Path . GetFileName ( fileone ) + " " ; 
  Test C# function definition:    : filenames = filenames + Path . GetFileName ( fileone ) + " " ; 
  Test control definition:        : filenames = filenames + Path . GetFileName ( fileone ) + " " ; 
  Test C# declaration:            : filenames = filenames + Path . GetFileName ( fileone ) + " " ; 
  Test C# executable:             : filenames = filenames + Path . GetFileName ( fileone ) + " " ; 
  Handle C# executable:           : filenames = filenames + Path . GetFileName ( fileone ) + " " ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . command = command ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . to = ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  executable     : sndMsg . from = ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . request ) ; 
  Test begin scope                : sndMsg . command = command ; 
  Test end scope                  : sndMsg . command = command ; 
  executable     : sndMsg . body = filenames ; 
  Test preproc statement:         : sndMsg . command = command ; 
  Test namespace definition:      : sndMsg . command = command ; 
  Test class definition:          : sndMsg . command = command ; 
  Test struct definition:         : sndMsg . command = command ; 
  executable     : sndMsg . port = 8095 ; 
  Test C# function definition:    : sndMsg . command = command ; 
  Test control definition:        : sndMsg . command = command ; 
  Test C# declaration:            : sndMsg . command = command ; 
  Test C# executable:             : sndMsg . command = command ; 
  Handle C# executable:           : sndMsg . command = command ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
--- stack size = 3 ---
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = ; 
  Test end scope                  : sndMsg . to = ; 
  Test preproc statement:         : sndMsg . to = ; 
  Test namespace definition:      : sndMsg . to = ; 
  Test class definition:          : sndMsg . to = ; 
  Test struct definition:         : sndMsg . to = ; 
  Test C# function definition:    : sndMsg . to = ; 
  Test control definition:        : sndMsg . to = ; 
  Test C# declaration:            : sndMsg . to = ; 
  Test C# executable:             : sndMsg . to = ; 
  Handle C# executable:           : sndMsg . to = ; 
  Test begin scope                : sndMsg . from = ; 
  Test end scope                  : sndMsg . from = ; 
  Test preproc statement:         : sndMsg . from = ; 
  Test namespace definition:      : sndMsg . from = ; 
  Test class definition:          : sndMsg . from = ; 
  Test struct definition:         : sndMsg . from = ; 
  Test C# function definition:    : sndMsg . from = ; 
  Test control definition:        : sndMsg . from = ; 
  Test C# declaration:            : sndMsg . from = ; 
  Test C# executable:             : sndMsg . from = ; 
  Handle C# executable:           : sndMsg . from = ; 
  Test begin scope                : sndMsg . body = filenames ; 
  Test end scope                  : sndMsg . body = filenames ; 
  Test preproc statement:         : sndMsg . body = filenames ; 
  Test namespace definition:      : sndMsg . body = filenames ; 
  Test class definition:          : sndMsg . body = filenames ; 
  Test struct definition:         : sndMsg . body = filenames ; 
  Test C# function definition:    : sndMsg . body = filenames ; 
  Test control definition:        : sndMsg . body = filenames ; 
  Test C# declaration:            : sndMsg . body = filenames ; 
  Test C# executable:             : sndMsg . body = filenames ; 
  Handle C# executable:           : sndMsg . body = filenames ; 
  Test begin scope                : sndMsg . port = 8095 ; 
  Test end scope                  : sndMsg . port = 8095 ; 
  Test preproc statement:         : sndMsg . port = 8095 ; 
  Test namespace definition:      : sndMsg . port = 8095 ; 
  Test class definition:          : sndMsg . port = 8095 ; 
  Test struct definition:         : sndMsg . port = 8095 ; 
  Test C# function definition:    : sndMsg . port = 8095 ; 
  Test control definition:        : sndMsg . port = 8095 ; 
  Test C# declaration:            : sndMsg . port = 8095 ; 
  Test C# executable:             : sndMsg . port = 8095 ; 
  Handle C# executable:           : sndMsg . port = 8095 ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    public static void sendFiles ( int portno , string addrAndFiles , string flag ) { 
  handle begin scope              : 
    public static void sendFiles ( int portno , string addrAndFiles , string flag ) { 
--- stack size = 4 ---
  Test end scope                  : 
    public static void sendFiles ( int portno , string addrAndFiles , string flag ) { 
  Test preproc statement:         : 
    public static void sendFiles ( int portno , string addrAndFiles , string flag ) { 
  Test namespace definition:      : 
    public static void sendFiles ( int portno , string addrAndFiles , string flag ) { 
  function def   : 
    public static void sendFiles ( int portno , string addrAndFiles , string flag ) { 
  Test class definition:          : 
    public static void sendFiles ( int portno , string addrAndFiles , string flag ) { 
  Test struct definition:         : 
    public static void sendFiles ( int portno , string addrAndFiles , string flag ) { 
  Test C# function definition:    : 
    public static void sendFiles ( int portno , string addrAndFiles , string flag ) { 
  Handle C# function definition:  : 
    public static void sendFiles ( int portno , string addrAndFiles , string flag ) { 
  executable     : string [ ] values = addrAndFiles . Split ( ',' ) ; 
  Test begin scope                : string [ ] values = addrAndFiles . Split ( ',' ) ; 
  Test end scope                  : string [ ] values = addrAndFiles . Split ( ',' ) ; 
  data declar    : string addr = "" ; 
  Test preproc statement:         : string [ ] values = addrAndFiles . Split ( ',' ) ; 
  Test namespace definition:      : string [ ] values = addrAndFiles . Split ( ',' ) ; 
  data declar    : string filenames = "" ; 
  Test class definition:          : string [ ] values = addrAndFiles . Split ( ',' ) ; 
  Test struct definition:         : string [ ] values = addrAndFiles . Split ( ',' ) ; 
  Test C# function definition:    : string [ ] values = addrAndFiles . Split ( ',' ) ; 
  data declar    : string body = "" ; 
  Test control definition:        : string [ ] values = addrAndFiles . Split ( ',' ) ; 
  Test C# declaration:            : string [ ] values = addrAndFiles . Split ( ',' ) ; 
  data declar    : string flg = "" ; 
  Test C# executable:             : string [ ] values = addrAndFiles . Split ( ',' ) ; 
  Handle C# executable:           : string [ ] values = addrAndFiles . Split ( ',' ) ; 
  Test begin scope                : string addr = "" ; 
  Test end scope                  : string addr = "" ; 
  Test preproc statement:         : string addr = "" ; 
  Test namespace definition:      : string addr = "" ; 
  Test class definition:          : string addr = "" ; 
  Test struct definition:         : string addr = "" ; 
  Test C# function definition:    : string addr = "" ; 
  Test control definition:        : string addr = "" ; 
  Test C# declaration:            : string addr = "" ; 
  Handle C# declaration:          : string addr = "" ; 
  Test begin scope                : string filenames = "" ; 
  Test end scope                  : string filenames = "" ; 
  Test preproc statement:         : string filenames = "" ; 
  Test namespace definition:      : string filenames = "" ; 
  Test class definition:          : string filenames = "" ; 
  Test struct definition:         : string filenames = "" ; 
  Test C# function definition:    : string filenames = "" ; 
  Test control definition:        : string filenames = "" ; 
  Test C# declaration:            : string filenames = "" ; 
  Handle C# declaration:          : string filenames = "" ; 
  Test begin scope                : string body = "" ; 
  Test end scope                  : string body = "" ; 
  Test preproc statement:         : string body = "" ; 
  Test namespace definition:      : string body = "" ; 
  Test class definition:          : string body = "" ; 
  Test struct definition:         : string body = "" ; 
  Test C# function definition:    : string body = "" ; 
  Test control definition:        : string body = "" ; 
  Test C# declaration:            : string body = "" ; 
  Handle C# declaration:          : string body = "" ; 
  Test begin scope                : string flg = "" ; 
  Test end scope                  : string flg = "" ; 
  Test preproc statement:         : string flg = "" ; 
  Test namespace definition:      : string flg = "" ; 
  Test class definition:          : string flg = "" ; 
  Test struct definition:         : string flg = "" ; 
  Test C# function definition:    : string flg = "" ; 
  Test control definition:        : string flg = "" ; 
  Test C# declaration:            : string flg = "" ; 
  Handle C# declaration:          : string flg = "" ; 
  Test begin scope                : if ( flag . Equals ( "reqfrombuilder" ) ) { 
  handle begin scope              : if ( flag . Equals ( "reqfrombuilder" ) ) { 
--- stack size = 5 ---
  Test end scope                  : if ( flag . Equals ( "reqfrombuilder" ) ) { 
  Test preproc statement:         : if ( flag . Equals ( "reqfrombuilder" ) ) { 
  Test namespace definition:      : if ( flag . Equals ( "reqfrombuilder" ) ) { 
  control def    : if ( flag . Equals ( "reqfrombuilder" ) ) { 
  Test class definition:          : if ( flag . Equals ( "reqfrombuilder" ) ) { 
  Test struct definition:         : if ( flag . Equals ( "reqfrombuilder" ) ) { 
  Test C# function definition:    : if ( flag . Equals ( "reqfrombuilder" ) ) { 
  executable     : addr = BuildEnvironment . fileStorage ; 
  Test control definition:        : if ( flag . Equals ( "reqfrombuilder" ) ) { 
  Handle control definition:      : if ( flag . Equals ( "reqfrombuilder" ) ) { 
  Test begin scope                : addr = BuildEnvironment . fileStorage ; 
  Test end scope                  : addr = BuildEnvironment . fileStorage ; 
  executable     : filenames = values [ 0 ] ; 
  Test preproc statement:         : addr = BuildEnvironment . fileStorage ; 
  Test namespace definition:      : addr = BuildEnvironment . fileStorage ; 
  Test class definition:          : addr = BuildEnvironment . fileStorage ; 
  Test struct definition:         : addr = BuildEnvironment . fileStorage ; 
  executable     : body = values [ 0 ] ; 
  Test C# function definition:    : addr = BuildEnvironment . fileStorage ; 
  Test control definition:        : addr = BuildEnvironment . fileStorage ; 
  Test C# declaration:            : addr = BuildEnvironment . fileStorage ; 
  executable     : flg = "r2b" ; 
  Test C# executable:             : addr = BuildEnvironment . fileStorage ; 
--- stack size = 4 ---
  Handle C# executable:           : addr = BuildEnvironment . fileStorage ; 
  Test begin scope                : filenames = values [ 0 ] ; 
  Test end scope                  : filenames = values [ 0 ] ; 
  Test preproc statement:         : filenames = values [ 0 ] ; 
  Test namespace definition:      : filenames = values [ 0 ] ; 
  Test class definition:          : filenames = values [ 0 ] ; 
  Test struct definition:         : filenames = values [ 0 ] ; 
  Test C# function definition:    : filenames = values [ 0 ] ; 
  Test control definition:        : filenames = values [ 0 ] ; 
  Test C# declaration:            : filenames = values [ 0 ] ; 
  Test C# executable:             : filenames = values [ 0 ] ; 
  Handle C# executable:           : filenames = values [ 0 ] ; 
  Test begin scope                : body = values [ 0 ] ; 
  Test end scope                  : body = values [ 0 ] ; 
  Test preproc statement:         : body = values [ 0 ] ; 
  Test namespace definition:      : body = values [ 0 ] ; 
  Test class definition:          : body = values [ 0 ] ; 
  Test struct definition:         : body = values [ 0 ] ; 
  Test C# function definition:    : body = values [ 0 ] ; 
  Test control definition:        : body = values [ 0 ] ; 
  Test C# declaration:            : body = values [ 0 ] ; 
  Test C# executable:             : body = values [ 0 ] ; 
  Handle C# executable:           : body = values [ 0 ] ; 
  Test begin scope                : flg = "r2b" ; 
  Test end scope                  : flg = "r2b" ; 
  Test preproc statement:         : flg = "r2b" ; 
  Test namespace definition:      : flg = "r2b" ; 
  Test class definition:          : flg = "r2b" ; 
  Test struct definition:         : flg = "r2b" ; 
  Test C# function definition:    : flg = "r2b" ; 
  Test control definition:        : flg = "r2b" ; 
  Test C# declaration:            : flg = "r2b" ; 
  Test C# executable:             : flg = "r2b" ; 
  Handle C# executable:           : flg = "r2b" ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : else { 
  handle begin scope              : else { 
--- stack size = 5 ---
  Test end scope                  : else { 
  Test preproc statement:         : else { 
  control def    : else { 
  Test namespace definition:      : else { 
  Test class definition:          : else { 
  Test struct definition:         : else { 
  Test C# function definition:    : else { 
  Test control definition:        : else { 
  Handle control definition:      : else { 
  Test begin scope                : addr = values [ 0 ] ; 
  Test end scope                  : addr = values [ 0 ] ; 
  executable     : addr = values [ 0 ] ; 
  Test preproc statement:         : addr = values [ 0 ] ; 
  Test namespace definition:      : addr = values [ 0 ] ; 
  Test class definition:          : addr = values [ 0 ] ; 
  Test struct definition:         : addr = values [ 0 ] ; 
  Test C# function definition:    : addr = values [ 0 ] ; 
  executable     : filenames = values [ 1 ] ; 
  Test control definition:        : addr = values [ 0 ] ; 
  Test C# declaration:            : addr = values [ 0 ] ; 
  Test C# executable:             : addr = values [ 0 ] ; 
  Handle C# executable:           : addr = values [ 0 ] ; 
  executable     : body = "TransferCompleted" ; 
  Test begin scope                : filenames = values [ 1 ] ; 
  Test end scope                  : filenames = values [ 1 ] ; 
  Test preproc statement:         : filenames = values [ 1 ] ; 
  executable     : flg = "r2cb" ; 
  Test namespace definition:      : filenames = values [ 1 ] ; 
--- stack size = 4 ---
  Test class definition:          : filenames = values [ 1 ] ; 
  Test struct definition:         : filenames = values [ 1 ] ; 
  Test C# function definition:    : filenames = values [ 1 ] ; 
  Test control definition:        : filenames = values [ 1 ] ; 
  Test C# declaration:            : filenames = values [ 1 ] ; 
  Test C# executable:             : filenames = values [ 1 ] ; 
  executable     : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Handle C# executable:           : filenames = values [ 1 ] ; 
  Test begin scope                : body = "TransferCompleted" ; 
  Test end scope                  : body = "TransferCompleted" ; 
  Test preproc statement:         : body = "TransferCompleted" ; 
  Test namespace definition:      : body = "TransferCompleted" ; 
  executable     : 
    Console . WriteLine ( "\n    Repository started sending files to the requested location" ) ; 
  Test class definition:          : body = "TransferCompleted" ; 
  Test struct definition:         : body = "TransferCompleted" ; 
  Test C# function definition:    : body = "TransferCompleted" ; 
  Test control definition:        : body = "TransferCompleted" ; 
  executable     : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# declaration:            : body = "TransferCompleted" ; 
  Test C# executable:             : body = "TransferCompleted" ; 
  Handle C# executable:           : body = "TransferCompleted" ; 
  Test begin scope                : flg = "r2cb" ; 
  Test end scope                  : flg = "r2cb" ; 
  Test preproc statement:         : flg = "r2cb" ; 
  Test namespace definition:      : flg = "r2cb" ; 
  data declar    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test class definition:          : flg = "r2cb" ; 
  Test struct definition:         : flg = "r2cb" ; 
  Test C# function definition:    : flg = "r2cb" ; 
  Test control definition:        : flg = "r2cb" ; 
  Test C# declaration:            : flg = "r2cb" ; 
  executable     : sndMsg . command = "show" ; 
  Test C# executable:             : flg = "r2cb" ; 
  Handle C# executable:           : flg = "r2cb" ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test class definition:          : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : sndMsg . from = ; 
  Test C# function definition:    : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test control definition:        : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : sndMsg . body = "8095" ; 
  Test C# declaration:            : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : 
    Console . WriteLine ( "\n    Repository started sending files to the requested location" ) ; 
  Test end scope                  : 
    Console . WriteLine ( "\n    Repository started sending files to the requested location" ) ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n    Repository started sending files to the requested location" ) ; 
  data declar    : List < string > names = getClientFileList ( filenames ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n    Repository started sending files to the requested location" ) ; 
  Test class definition:          : 
    Console . WriteLine ( "\n    Repository started sending files to the requested location" ) ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n    Repository started sending files to the requested location" ) ; 
  Test C# function definition:    : 
    Console . WriteLine ( "\n    Repository started sending files to the requested location" ) ; 
  Test control definition:        : 
    Console . WriteLine ( "\n    Repository started sending files to the requested location" ) ; 
  Test C# declaration:            : 
    Console . WriteLine ( "\n    Repository started sending files to the requested location" ) ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n    Repository started sending files to the requested location" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n    Repository started sending files to the requested location" ) ; 
  Test begin scope                : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test end scope                  : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test class definition:          : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# function definition:    : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test control definition:        : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# declaration:            : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test begin scope                : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test end scope                  : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test preproc statement:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test namespace definition:      : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test class definition:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test struct definition:         : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test C# function definition:    : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test control definition:        : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test C# declaration:            : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Handle C# declaration:          : CommMessage sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test begin scope                : sndMsg . command = "show" ; 
  Test end scope                  : sndMsg . command = "show" ; 
  Test preproc statement:         : sndMsg . command = "show" ; 
  Test namespace definition:      : sndMsg . command = "show" ; 
  Test class definition:          : sndMsg . command = "show" ; 
  Test struct definition:         : sndMsg . command = "show" ; 
  Test C# function definition:    : sndMsg . command = "show" ; 
  Test control definition:        : sndMsg . command = "show" ; 
  Test C# declaration:            : sndMsg . command = "show" ; 
  Test C# executable:             : sndMsg . command = "show" ; 
  Handle C# executable:           : sndMsg . command = "show" ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test end scope                  : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test preproc statement:         : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test namespace definition:      : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test class definition:          : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test struct definition:         : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test C# function definition:    : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test control definition:        : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test C# declaration:            : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test C# executable:             : sndMsg . to = + portno + "/IPluggableComm" ; 
  Handle C# executable:           : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test begin scope                : sndMsg . from = ; 
  Test end scope                  : sndMsg . from = ; 
  Test preproc statement:         : sndMsg . from = ; 
  Test namespace definition:      : sndMsg . from = ; 
  Test class definition:          : sndMsg . from = ; 
  Test struct definition:         : sndMsg . from = ; 
  Test C# function definition:    : sndMsg . from = ; 
  Test control definition:        : sndMsg . from = ; 
  Test C# declaration:            : sndMsg . from = ; 
  Test C# executable:             : sndMsg . from = ; 
  Handle C# executable:           : sndMsg . from = ; 
  Test begin scope                : sndMsg . body = "8095" ; 
  Test end scope                  : sndMsg . body = "8095" ; 
  Test preproc statement:         : sndMsg . body = "8095" ; 
  Test namespace definition:      : sndMsg . body = "8095" ; 
  Test class definition:          : sndMsg . body = "8095" ; 
  Test struct definition:         : sndMsg . body = "8095" ; 
  Test C# function definition:    : sndMsg . body = "8095" ; 
  Test control definition:        : sndMsg . body = "8095" ; 
  Test C# declaration:            : sndMsg . body = "8095" ; 
  Test C# executable:             : sndMsg . body = "8095" ; 
  Handle C# executable:           : sndMsg . body = "8095" ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : List < string > names = getClientFileList ( filenames ) ; 
  Test end scope                  : List < string > names = getClientFileList ( filenames ) ; 
  Test preproc statement:         : List < string > names = getClientFileList ( filenames ) ; 
  Test namespace definition:      : List < string > names = getClientFileList ( filenames ) ; 
  Test class definition:          : List < string > names = getClientFileList ( filenames ) ; 
  Test struct definition:         : List < string > names = getClientFileList ( filenames ) ; 
  Test C# function definition:    : List < string > names = getClientFileList ( filenames ) ; 
  Test control definition:        : List < string > names = getClientFileList ( filenames ) ; 
  Test C# declaration:            : List < string > names = getClientFileList ( filenames ) ; 
  Handle C# declaration:          : List < string > names = getClientFileList ( filenames ) ; 
  Test begin scope                : foreach ( string file in names ) { 
  handle begin scope              : foreach ( string file in names ) { 
--- stack size = 5 ---
  Test end scope                  : foreach ( string file in names ) { 
  Test preproc statement:         : foreach ( string file in names ) { 
  Test namespace definition:      : foreach ( string file in names ) { 
  control def    : foreach ( string file in names ) { 
  Test class definition:          : foreach ( string file in names ) { 
  Test struct definition:         : foreach ( string file in names ) { 
  Test C# function definition:    : foreach ( string file in names ) { 
  data declar    : string fileSpec = file ; 
  Test control definition:        : foreach ( string file in names ) { 
  Handle control definition:      : foreach ( string file in names ) { 
  Test begin scope                : string fileSpec = file ; 
  Test end scope                  : string fileSpec = file ; 
  Test preproc statement:         : string fileSpec = file ; 
  Test namespace definition:      : string fileSpec = file ; 
  Test class definition:          : string fileSpec = file ; 
  Test struct definition:         : string fileSpec = file ; 
  Test C# function definition:    : string fileSpec = file ; 
  Test control definition:        : string fileSpec = file ; 
  Test C# declaration:            : string fileSpec = file ; 
  Handle C# declaration:          : string fileSpec = file ; 
  data declar    : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test begin scope                : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test end scope                  : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test preproc statement:         : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test namespace definition:      : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test class definition:          : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test struct definition:         : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test C# function definition:    : string fileName = Path . GetFileName ( fileSpec ) ; 
  executable     : Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , addr ) ; 
  Test control definition:        : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test C# declaration:            : string fileName = Path . GetFileName ( fileSpec ) ; 
  Handle C# declaration:          : string fileName = Path . GetFileName ( fileSpec ) ; 
  Test begin scope                : Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , addr ) ; 
  Test end scope                  : Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , addr ) ; 
  Test preproc statement:         : Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , addr ) ; 
  Test namespace definition:      : Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , addr ) ; 
  Test class definition:          : Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , addr ) ; 
  executable     : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test struct definition:         : Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , addr ) ; 
  Test C# function definition:    : Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , addr ) ; 
  data declar    : bool transferSuccess = true ; 
  Test control definition:        : Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , addr ) ; 
  Test C# declaration:            : Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , addr ) ; 
  data declar    : int check = 1 ; 
  Test C# executable:             : Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , addr ) ; 
  Handle C# executable:           : Console . Write ( "\n sending \"{0}\" to \"{1}\"" , fileName , addr ) ; 
  Test begin scope                : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test end scope                  : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test preproc statement:         : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test namespace definition:      : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test class definition:          : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test struct definition:         : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test C# function definition:    : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test control definition:        : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test C# declaration:            : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test C# executable:             : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Handle C# executable:           : 
    TestUtilities . putLine ( string . Format ( "transferring file \"{0}\"" , file ) ) ; 
  Test begin scope                : bool transferSuccess = true ; 
  Test end scope                  : bool transferSuccess = true ; 
  Test preproc statement:         : bool transferSuccess = true ; 
  Test namespace definition:      : bool transferSuccess = true ; 
  Test class definition:          : bool transferSuccess = true ; 
  Test struct definition:         : bool transferSuccess = true ; 
  Test C# function definition:    : bool transferSuccess = true ; 
  Test control definition:        : bool transferSuccess = true ; 
  Test C# declaration:            : bool transferSuccess = true ; 
  Handle C# declaration:          : bool transferSuccess = true ; 
  Test begin scope                : int check = 1 ; 
  Test end scope                  : int check = 1 ; 
  Test preproc statement:         : int check = 1 ; 
  Test namespace definition:      : int check = 1 ; 
  Test class definition:          : int check = 1 ; 
  Test struct definition:         : int check = 1 ; 
  Test C# function definition:    : int check = 1 ; 
  Test control definition:        : int check = 1 ; 
  Test C# declaration:            : int check = 1 ; 
  Handle C# declaration:          : int check = 1 ; 
  Test begin scope                : do { 
  handle begin scope              : do { 
--- stack size = 6 ---
  Test end scope                  : do { 
  Test preproc statement:         : do { 
  Test namespace definition:      : do { 
  control def    : do { 
  Test class definition:          : do { 
  Test struct definition:         : do { 
  Test C# function definition:    : do { 
  Test control definition:        : do { 
  Handle control definition:      : do { 
  Test begin scope                : transferSuccess = comm . postFile ( file , flg , addr ) ; 
  Test end scope                  : transferSuccess = comm . postFile ( file , flg , addr ) ; 
  Test preproc statement:         : transferSuccess = comm . postFile ( file , flg , addr ) ; 
  Test namespace definition:      : transferSuccess = comm . postFile ( file , flg , addr ) ; 
  Test class definition:          : transferSuccess = comm . postFile ( file , flg , addr ) ; 
  executable     : transferSuccess = comm . postFile ( file , flg , addr ) ; 
  Test struct definition:         : transferSuccess = comm . postFile ( file , flg , addr ) ; 
  Test C# function definition:    : transferSuccess = comm . postFile ( file , flg , addr ) ; 
  executable     : check ++ ; 
  Test control definition:        : transferSuccess = comm . postFile ( file , flg , addr ) ; 
--- stack size = 5 ---
  Test C# declaration:            : transferSuccess = comm . postFile ( file , flg , addr ) ; 
  Test C# executable:             : transferSuccess = comm . postFile ( file , flg , addr ) ; 
  Handle C# executable:           : transferSuccess = comm . postFile ( file , flg , addr ) ; 
  Test begin scope                : check ++ ; 
  Test end scope                  : check ++ ; 
  Test preproc statement:         : check ++ ; 
  Test namespace definition:      : check ++ ; 
  Test class definition:          : check ++ ; 
  Test struct definition:         : check ++ ; 
  executable     : while ( ( ! transferSuccess ) && ( check < = 10 ) ) ; 
  Test C# function definition:    : check ++ ; 
  Test control definition:        : check ++ ; 
  Test C# declaration:            : check ++ ; 
  Test C# executable:             : check ++ ; 
  Handle C# executable:           : check ++ ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : while ( ( ! transferSuccess ) && ( check < = 10 ) ) ; 
  Test end scope                  : while ( ( ! transferSuccess ) && ( check < = 10 ) ) ; 
  executable     : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test preproc statement:         : while ( ( ! transferSuccess ) && ( check < = 10 ) ) ; 
  Test namespace definition:      : while ( ( ! transferSuccess ) && ( check < = 10 ) ) ; 
  Test class definition:          : while ( ( ! transferSuccess ) && ( check < = 10 ) ) ; 
  Test struct definition:         : while ( ( ! transferSuccess ) && ( check < = 10 ) ) ; 
  executable     : Thread . Sleep ( 2000 ) ; 
  Test C# function definition:    : while ( ( ! transferSuccess ) && ( check < = 10 ) ) ; 
--- stack size = 4 ---
  Test control definition:        : while ( ( ! transferSuccess ) && ( check < = 10 ) ) ; 
  Test C# declaration:            : while ( ( ! transferSuccess ) && ( check < = 10 ) ) ; 
  Test C# executable:             : while ( ( ! transferSuccess ) && ( check < = 10 ) ) ; 
  Handle C# executable:           : while ( ( ! transferSuccess ) && ( check < = 10 ) ) ; 
  Test begin scope                : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test end scope                  : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  executable     : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test preproc statement:         : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test namespace definition:      : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test class definition:          : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  executable     : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test struct definition:         : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test C# function definition:    : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test control definition:        : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  executable     : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# declaration:            : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test C# executable:             : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Handle C# executable:           : TestUtilities . checkResult ( transferSuccess , "transfer" ) ; 
  Test begin scope                : Thread . Sleep ( 2000 ) ; 
  executable     : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test end scope                  : Thread . Sleep ( 2000 ) ; 
  Test preproc statement:         : Thread . Sleep ( 2000 ) ; 
  Test namespace definition:      : Thread . Sleep ( 2000 ) ; 
  Test class definition:          : Thread . Sleep ( 2000 ) ; 
  Test struct definition:         : Thread . Sleep ( 2000 ) ; 
  executable     : sndMsg . command = "TransferCompleted" ; 
  Test C# function definition:    : Thread . Sleep ( 2000 ) ; 
  Test control definition:        : Thread . Sleep ( 2000 ) ; 
  Test C# declaration:            : Thread . Sleep ( 2000 ) ; 
  Test C# executable:             : Thread . Sleep ( 2000 ) ; 
  Handle C# executable:           : Thread . Sleep ( 2000 ) ; 
  executable     : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test end scope                  : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : sndMsg . from = ; 
  Test class definition:          : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : sndMsg . body = body ; 
  Test C# function definition:    : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test control definition:        : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# declaration:            : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : sndMsg . port = 8095 ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  executable     : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : Console . WriteLine ( "\n                     File transfer completed" ) ; 
--- stack size = 3 ---
  Test end scope                  : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test preproc statement:         : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test namespace definition:      : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test class definition:          : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test struct definition:         : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test C# function definition:    : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test control definition:        : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test C# declaration:            : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test C# executable:             : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Handle C# executable:           : Console . WriteLine ( "\n                     File transfer completed" ) ; 
  Test begin scope                : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test end scope                  : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test preproc statement:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test namespace definition:      : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test class definition:          : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test struct definition:         : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# function definition:    : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test control definition:        : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# declaration:            : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test C# executable:             : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Handle C# executable:           : 
    Console . WriteLine ( "\n        =================================================" ) ; 
  Test begin scope                : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test end scope                  : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test preproc statement:         : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test namespace definition:      : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test class definition:          : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test struct definition:         : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test C# function definition:    : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test control definition:        : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test C# declaration:            : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test C# executable:             : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Handle C# executable:           : sndMsg = new CommMessage ( CommMessage . MessageType . connect ) ; 
  Test begin scope                : sndMsg . command = "TransferCompleted" ; 
  Test end scope                  : sndMsg . command = "TransferCompleted" ; 
  Test preproc statement:         : sndMsg . command = "TransferCompleted" ; 
  Test namespace definition:      : sndMsg . command = "TransferCompleted" ; 
  Test class definition:          : sndMsg . command = "TransferCompleted" ; 
  Test struct definition:         : sndMsg . command = "TransferCompleted" ; 
  Test C# function definition:    : sndMsg . command = "TransferCompleted" ; 
  Test control definition:        : sndMsg . command = "TransferCompleted" ; 
  Test C# declaration:            : sndMsg . command = "TransferCompleted" ; 
  Test C# executable:             : sndMsg . command = "TransferCompleted" ; 
  Handle C# executable:           : sndMsg . command = "TransferCompleted" ; 
  Test begin scope                : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test end scope                  : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test preproc statement:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test namespace definition:      : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test class definition:          : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test struct definition:         : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# function definition:    : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test control definition:        : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# declaration:            : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test C# executable:             : sndMsg . author = "Dinesh Dhamotharan" ; 
  Handle C# executable:           : sndMsg . author = "Dinesh Dhamotharan" ; 
  Test begin scope                : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test end scope                  : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test preproc statement:         : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test namespace definition:      : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test class definition:          : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test struct definition:         : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test C# function definition:    : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test control definition:        : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test C# declaration:            : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test C# executable:             : sndMsg . to = + portno + "/IPluggableComm" ; 
  Handle C# executable:           : sndMsg . to = + portno + "/IPluggableComm" ; 
  Test begin scope                : sndMsg . from = ; 
  Test end scope                  : sndMsg . from = ; 
  Test preproc statement:         : sndMsg . from = ; 
  Test namespace definition:      : sndMsg . from = ; 
  Test class definition:          : sndMsg . from = ; 
  Test struct definition:         : sndMsg . from = ; 
  Test C# function definition:    : sndMsg . from = ; 
  Test control definition:        : sndMsg . from = ; 
  Test C# declaration:            : sndMsg . from = ; 
  Test C# executable:             : sndMsg . from = ; 
  Handle C# executable:           : sndMsg . from = ; 
  Test begin scope                : sndMsg . body = body ; 
  Test end scope                  : sndMsg . body = body ; 
  Test preproc statement:         : sndMsg . body = body ; 
  Test namespace definition:      : sndMsg . body = body ; 
  Test class definition:          : sndMsg . body = body ; 
  Test struct definition:         : sndMsg . body = body ; 
  Test C# function definition:    : sndMsg . body = body ; 
  Test control definition:        : sndMsg . body = body ; 
  Test C# declaration:            : sndMsg . body = body ; 
  Test C# executable:             : sndMsg . body = body ; 
  Handle C# executable:           : sndMsg . body = body ; 
  Test begin scope                : sndMsg . port = 8095 ; 
  Test end scope                  : sndMsg . port = 8095 ; 
  Test preproc statement:         : sndMsg . port = 8095 ; 
  Test namespace definition:      : sndMsg . port = 8095 ; 
  Test class definition:          : sndMsg . port = 8095 ; 
  Test struct definition:         : sndMsg . port = 8095 ; 
  Test C# function definition:    : sndMsg . port = 8095 ; 
  Test control definition:        : sndMsg . port = 8095 ; 
  Test C# declaration:            : sndMsg . port = 8095 ; 
  Test C# executable:             : sndMsg . port = 8095 ; 
  Handle C# executable:           : sndMsg . port = 8095 ; 
  Test begin scope                : comm . postMessage ( sndMsg ) ; 
  Test end scope                  : comm . postMessage ( sndMsg ) ; 
  Test preproc statement:         : comm . postMessage ( sndMsg ) ; 
  Test namespace definition:      : comm . postMessage ( sndMsg ) ; 
  Test class definition:          : comm . postMessage ( sndMsg ) ; 
  Test struct definition:         : comm . postMessage ( sndMsg ) ; 
  Test C# function definition:    : comm . postMessage ( sndMsg ) ; 
  Test control definition:        : comm . postMessage ( sndMsg ) ; 
  Test C# declaration:            : comm . postMessage ( sndMsg ) ; 
  Test C# executable:             : comm . postMessage ( sndMsg ) ; 
  Handle C# executable:           : comm . postMessage ( sndMsg ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : public static List < string > getClientFileList ( string filenames ) { 
  handle begin scope              : public static List < string > getClientFileList ( string filenames ) { 
--- stack size = 4 ---
  Test end scope                  : public static List < string > getClientFileList ( string filenames ) { 
  Test preproc statement:         : public static List < string > getClientFileList ( string filenames ) { 
  function def   : public static List < string > getClientFileList ( string filenames ) { 
  Test namespace definition:      : public static List < string > getClientFileList ( string filenames ) { 
  Test class definition:          : public static List < string > getClientFileList ( string filenames ) { 
  Test struct definition:         : public static List < string > getClientFileList ( string filenames ) { 
  Test C# function definition:    : public static List < string > getClientFileList ( string filenames ) { 
  Handle C# function definition:  : public static List < string > getClientFileList ( string filenames ) { 
  executable     : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Test begin scope                : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Test end scope                  : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Test preproc statement:         : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Test namespace definition:      : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Test class definition:          : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Test struct definition:         : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Test C# function definition:    : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Test control definition:        : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Test C# declaration:            : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Test C# executable:             : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Handle C# executable:           : string [ ] fnames = filenames . Split ( ' ' ) ; 
  Test begin scope                : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  executable     : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test end scope                  : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test preproc statement:         : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test namespace definition:      : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  data declar    : List < string > names = new List < string > ( ) ; 
  Test class definition:          : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test struct definition:         : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test C# function definition:    : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test control definition:        : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test C# declaration:            : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test C# executable:             : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  data declar    : List < string > files = new List < string > ( ) ; 
  Handle C# executable:           : 
    fnames = fnames . Where ( arr = > ! String . IsNullOrEmpty ( arr ) ) . ToArray ( ) ; 
  Test begin scope                : List < string > names = new List < string > ( ) ; 
  Test end scope                  : List < string > names = new List < string > ( ) ; 
  Test preproc statement:         : List < string > names = new List < string > ( ) ; 
  Test namespace definition:      : List < string > names = new List < string > ( ) ; 
  Test class definition:          : List < string > names = new List < string > ( ) ; 
  Test struct definition:         : List < string > names = new List < string > ( ) ; 
  Test C# function definition:    : List < string > names = new List < string > ( ) ; 
  Test control definition:        : List < string > names = new List < string > ( ) ; 
  Test C# declaration:            : List < string > names = new List < string > ( ) ; 
  Handle C# declaration:          : List < string > names = new List < string > ( ) ; 
  Test begin scope                : List < string > files = new List < string > ( ) ; 
  Test end scope                  : List < string > files = new List < string > ( ) ; 
  Test preproc statement:         : List < string > files = new List < string > ( ) ; 
  Test namespace definition:      : List < string > files = new List < string > ( ) ; 
  Test class definition:          : List < string > files = new List < string > ( ) ; 
  Test struct definition:         : List < string > files = new List < string > ( ) ; 
  Test C# function definition:    : List < string > files = new List < string > ( ) ; 
  Test control definition:        : List < string > files = new List < string > ( ) ; 
  Test C# declaration:            : List < string > files = new List < string > ( ) ; 
  Handle C# declaration:          : List < string > files = new List < string > ( ) ; 
  Test begin scope                : foreach ( string file in fnames ) { 
  handle begin scope              : foreach ( string file in fnames ) { 
--- stack size = 5 ---
  Test end scope                  : foreach ( string file in fnames ) { 
  Test preproc statement:         : foreach ( string file in fnames ) { 
  Test namespace definition:      : foreach ( string file in fnames ) { 
  control def    : foreach ( string file in fnames ) { 
  Test class definition:          : foreach ( string file in fnames ) { 
  Test struct definition:         : foreach ( string file in fnames ) { 
  Test C# function definition:    : foreach ( string file in fnames ) { 
  Test control definition:        : foreach ( string file in fnames ) { 
  Handle control definition:      : foreach ( string file in fnames ) { 
  Test begin scope                : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Test end scope                  : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Test preproc statement:         : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Test namespace definition:      : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Test class definition:          : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  executable     : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Test struct definition:         : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Test C# function definition:    : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Test control definition:        : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Test C# declaration:            : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Test C# executable:             : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Handle C# executable:           : 
    string [ ] list = Directory . GetFiles ( RepoEnvironment . fileStorage , file ) ; 
  Test begin scope                : if ( list . Count ( ) > 0 ) names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
  executable     : if ( list . Count ( ) > 0 ) names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test end scope                  : if ( list . Count ( ) > 0 ) names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
--- stack size = 4 ---
  Test preproc statement:         : if ( list . Count ( ) > 0 ) names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test namespace definition:      : if ( list . Count ( ) > 0 ) names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
  executable     : return names ; 
  Test class definition:          : if ( list . Count ( ) > 0 ) names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
--- stack size = 3 ---
  Test struct definition:         : if ( list . Count ( ) > 0 ) names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test C# function definition:    : if ( list . Count ( ) > 0 ) names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Preproc Stmt   : # if ( TEST_MOCKREPO ) 
  Test control definition:        : if ( list . Count ( ) > 0 ) names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test C# declaration:            : if ( list . Count ( ) > 0 ) names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test C# executable:             : if ( list . Count ( ) > 0 ) names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Handle C# executable:           : if ( list . Count ( ) > 0 ) names . Add ( Path . GetFileName ( list [ 0 ] ) ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : return names ; 
  Test end scope                  : return names ; 
  Test preproc statement:         : return names ; 
  Test namespace definition:      : return names ; 
  Test class definition:          : return names ; 
  Test struct definition:         : return names ; 
  Test C# function definition:    : return names ; 
  Test control definition:        : return names ; 
  Test C# declaration:            : return names ; 
  Test C# executable:             : return names ; 
  Handle C# executable:           : return names ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : # if ( TEST_MOCKREPO ) 
  Test end scope                  : # if ( TEST_MOCKREPO ) 
  Test preproc statement:         : # if ( TEST_MOCKREPO ) 
  Handle preproc statement:       : # if ( TEST_MOCKREPO ) 
  Test begin scope                : static void Main ( string [ ] args ) { 
  handle begin scope              : static void Main ( string [ ] args ) { 
--- stack size = 4 ---
  Test end scope                  : static void Main ( string [ ] args ) { 
  Test preproc statement:         : static void Main ( string [ ] args ) { 
  Test namespace definition:      : static void Main ( string [ ] args ) { 
  function def   : static void Main ( string [ ] args ) { 
  Test class definition:          : static void Main ( string [ ] args ) { 
  Test struct definition:         : static void Main ( string [ ] args ) { 
  Test C# function definition:    : static void Main ( string [ ] args ) { 
  Handle C# function definition:  : static void Main ( string [ ] args ) { 
  executable     : Console . Title = "Repository" ; 
  Test begin scope                : Console . Title = "Repository" ; 
  Test end scope                  : Console . Title = "Repository" ; 
  Test preproc statement:         : Console . Title = "Repository" ; 
  Test namespace definition:      : Console . Title = "Repository" ; 
  Test class definition:          : Console . Title = "Repository" ; 
  Test struct definition:         : Console . Title = "Repository" ; 
  executable     : Console . BackgroundColor = ConsoleColor . White ; 
  Test C# function definition:    : Console . Title = "Repository" ; 
  Test control definition:        : Console . Title = "Repository" ; 
  Test C# declaration:            : Console . Title = "Repository" ; 
  Test C# executable:             : Console . Title = "Repository" ; 
  Handle C# executable:           : Console . Title = "Repository" ; 
  Test begin scope                : Console . BackgroundColor = ConsoleColor . White ; 
  executable     : Console . ForegroundColor = ConsoleColor . DarkGreen ; 
  Test end scope                  : Console . BackgroundColor = ConsoleColor . White ; 
  Test preproc statement:         : Console . BackgroundColor = ConsoleColor . White ; 
  Test namespace definition:      : Console . BackgroundColor = ConsoleColor . White ; 
  executable     : Console . Write ( "\n Starting Repository" ) ; 
  Test class definition:          : Console . BackgroundColor = ConsoleColor . White ; 
  Test struct definition:         : Console . BackgroundColor = ConsoleColor . White ; 
  Test C# function definition:    : Console . BackgroundColor = ConsoleColor . White ; 
  Test control definition:        : Console . BackgroundColor = ConsoleColor . White ; 
  executable     : Console . Write ( "\n===============================" ) ; 
  Test C# declaration:            : Console . BackgroundColor = ConsoleColor . White ; 
  Test C# executable:             : Console . BackgroundColor = ConsoleColor . White ; 
  Handle C# executable:           : Console . BackgroundColor = ConsoleColor . White ; 
  data declar    : RepoMock repo = new RepoMock ( ) ; 
  Test begin scope                : Console . ForegroundColor = ConsoleColor . DarkGreen ; 
  Test end scope                  : Console . ForegroundColor = ConsoleColor . DarkGreen ; 
  Test preproc statement:         : Console . ForegroundColor = ConsoleColor . DarkGreen ; 
  executable     : RepoEnvironment . verbose = true ; 
  Test namespace definition:      : Console . ForegroundColor = ConsoleColor . DarkGreen ; 
  Test class definition:          : Console . ForegroundColor = ConsoleColor . DarkGreen ; 
  Test struct definition:         : Console . ForegroundColor = ConsoleColor . DarkGreen ; 
  Test C# function definition:    : Console . ForegroundColor = ConsoleColor . DarkGreen ; 
  executable     : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  Test control definition:        : Console . ForegroundColor = ConsoleColor . DarkGreen ; 
  Test C# declaration:            : Console . ForegroundColor = ConsoleColor . DarkGreen ; 
  data declar    : Thread listenTrd = null ; 
  Test C# executable:             : Console . ForegroundColor = ConsoleColor . DarkGreen ; 
  Handle C# executable:           : Console . ForegroundColor = ConsoleColor . DarkGreen ; 
  Test begin scope                : Console . Write ( "\n Starting Repository" ) ; 
  Test end scope                  : Console . Write ( "\n Starting Repository" ) ; 
  Test preproc statement:         : Console . Write ( "\n Starting Repository" ) ; 
  executable     : comm = new Comm ( , 8095 ) ; 
  Test namespace definition:      : Console . Write ( "\n Starting Repository" ) ; 
  Test class definition:          : Console . Write ( "\n Starting Repository" ) ; 
  Test struct definition:         : Console . Write ( "\n Starting Repository" ) ; 
  Test C# function definition:    : Console . Write ( "\n Starting Repository" ) ; 
  executable     : listenTrd = new Thread ( listen ) ; 
  Test control definition:        : Console . Write ( "\n Starting Repository" ) ; 
  Test C# declaration:            : Console . Write ( "\n Starting Repository" ) ; 
  Test C# executable:             : Console . Write ( "\n Starting Repository" ) ; 
  executable     : listenTrd . Start ( ) ; 
  Handle C# executable:           : Console . Write ( "\n Starting Repository" ) ; 
--- stack size = 3 ---
  Test begin scope                : Console . Write ( "\n===============================" ) ; 
  Preproc Stmt   : # endif 
  Test end scope                  : Console . Write ( "\n===============================" ) ; 
--- stack size = 2 ---
  Test preproc statement:         : Console . Write ( "\n===============================" ) ; 
--- stack size = 1 ---
  Test namespace definition:      : Console . Write ( "\n===============================" ) ; 
  Test class definition:          : Console . Write ( "\n===============================" ) ; 
  Test struct definition:         : Console . Write ( "\n===============================" ) ; 
  Test C# function definition:    : Console . Write ( "\n===============================" ) ; 
  Test control definition:        : Console . Write ( "\n===============================" ) ; 
  Test C# declaration:            : Console . Write ( "\n===============================" ) ; 
  Test C# executable:             : Console . Write ( "\n===============================" ) ; 
  Handle C# executable:           : Console . Write ( "\n===============================" ) ; 
  Test begin scope                : RepoMock repo = new RepoMock ( ) ; 
  Test end scope                  : RepoMock repo = new RepoMock ( ) ; 
  Test preproc statement:         : RepoMock repo = new RepoMock ( ) ; 
  Test namespace definition:      : RepoMock repo = new RepoMock ( ) ; 
  Test class definition:          : RepoMock repo = new RepoMock ( ) ; 
  Test struct definition:         : RepoMock repo = new RepoMock ( ) ; 
  Test C# function definition:    : RepoMock repo = new RepoMock ( ) ; 
  Test control definition:        : RepoMock repo = new RepoMock ( ) ; 
  Test C# declaration:            : RepoMock repo = new RepoMock ( ) ; 
  Handle C# declaration:          : RepoMock repo = new RepoMock ( ) ; 
  Test begin scope                : RepoEnvironment . verbose = true ; 
  Test end scope                  : RepoEnvironment . verbose = true ; 
  Test preproc statement:         : RepoEnvironment . verbose = true ; 
  Test namespace definition:      : RepoEnvironment . verbose = true ; 
  Test class definition:          : RepoEnvironment . verbose = true ; 
  using declar   : using System ; 
  Test struct definition:         : RepoEnvironment . verbose = true ; 
  Test C# function definition:    : RepoEnvironment . verbose = true ; 
  Test control definition:        : RepoEnvironment . verbose = true ; 
  using declar   : using System . Collections . Generic ; 
  Test C# declaration:            : RepoEnvironment . verbose = true ; 
  Test C# executable:             : RepoEnvironment . verbose = true ; 
  using declar   : using System . Linq ; 
  Handle C# executable:           : RepoEnvironment . verbose = true ; 
  Test begin scope                : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  using declar   : using System . Text ; 
  Test end scope                  : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  Test preproc statement:         : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  using declar   : using System . Threading . Tasks ; 
  Test namespace definition:      : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  using declar   : using System . ServiceModel ; 
  Test class definition:          : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  Test struct definition:         : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  using declar   : using System . Runtime . Serialization ; 
  Test C# function definition:    : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  Test control definition:        : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  using declar   : using System . Threading ; 
  Test C# declaration:            : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  Test C# executable:             : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  Handle C# executable:           : TestUtilities . vbtitle ( "Testing Repo" , '=' ) ; 
  Test begin scope                : Thread listenTrd = null ; 
  Test end scope                  : Thread listenTrd = null ; 
  Test preproc statement:         : Thread listenTrd = null ; 
  Test namespace definition:      : Thread listenTrd = null ; 
  Test class definition:          : Thread listenTrd = null ; 
  Test struct definition:         : Thread listenTrd = null ; 
  Test C# function definition:    : Thread listenTrd = null ; 
  Test control definition:        : Thread listenTrd = null ; 
  Test C# declaration:            : Thread listenTrd = null ; 
  Handle C# declaration:          : Thread listenTrd = null ; 
  Test begin scope                : comm = new Comm ( , 8095 ) ; 
  Test end scope                  : comm = new Comm ( , 8095 ) ; 
  Test preproc statement:         : comm = new Comm ( , 8095 ) ; 
  Test namespace definition:      : comm = new Comm ( , 8095 ) ; 
  Test class definition:          : comm = new Comm ( , 8095 ) ; 
  Test struct definition:         : comm = new Comm ( , 8095 ) ; 
  Test C# function definition:    : comm = new Comm ( , 8095 ) ; 
  Test control definition:        : comm = new Comm ( , 8095 ) ; 
  Test C# declaration:            : comm = new Comm ( , 8095 ) ; 
  Test C# executable:             : comm = new Comm ( , 8095 ) ; 
  Handle C# executable:           : comm = new Comm ( , 8095 ) ; 
  Test begin scope                : listenTrd = new Thread ( listen ) ; 
  Test end scope                  : listenTrd = new Thread ( listen ) ; 
  Test preproc statement:         : listenTrd = new Thread ( listen ) ; 
  Test namespace definition:      : listenTrd = new Thread ( listen ) ; 
  Test class definition:          : listenTrd = new Thread ( listen ) ; 
  Test struct definition:         : listenTrd = new Thread ( listen ) ; 
  Test C# function definition:    : listenTrd = new Thread ( listen ) ; 
  Test control definition:        : listenTrd = new Thread ( listen ) ; 
  Test C# declaration:            : listenTrd = new Thread ( listen ) ; 
  Test C# executable:             : listenTrd = new Thread ( listen ) ; 
  Handle C# executable:           : listenTrd = new Thread ( listen ) ; 
  Test begin scope                : listenTrd . Start ( ) ; 
  Test end scope                  : listenTrd . Start ( ) ; 
  Test preproc statement:         : listenTrd . Start ( ) ; 
  Test namespace definition:      : listenTrd . Start ( ) ; 
  Test class definition:          : listenTrd . Start ( ) ; 
  Test struct definition:         : listenTrd . Start ( ) ; 
  Test C# function definition:    : listenTrd . Start ( ) ; 
  Test control definition:        : listenTrd . Start ( ) ; 
  Test C# declaration:            : listenTrd . Start ( ) ; 
  Test C# executable:             : listenTrd . Start ( ) ; 
  Handle C# executable:           : listenTrd . Start ( ) ; 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : # endif 
  Test end scope                  : # endif 
  Test preproc statement:         : # endif 
  Handle preproc statement:       : # endif 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : } 
  Test end scope                  : } 
  Handle end scope                : } 
  Test begin scope                : using System ; 
  Test end scope                  : using System ; 
  Test preproc statement:         : using System ; 
  Test namespace definition:      : using System ; 
  Test class definition:          : using System ; 
  Test struct definition:         : using System ; 
  Test C# function definition:    : using System ; 
  Test control definition:        : using System ; 
  Test C# declaration:            : using System ; 
  Handle C# declaration:          : using System ; 
  Test begin scope                : using System . Collections . Generic ; 
  Test end scope                  : using System . Collections . Generic ; 
  Test preproc statement:         : using System . Collections . Generic ; 
  Test namespace definition:      : using System . Collections . Generic ; 
  Test class definition:          : using System . Collections . Generic ; 
  Test struct definition:         : using System . Collections . Generic ; 
  Test C# function definition:    : using System . Collections . Generic ; 
  Test control definition:        : using System . Collections . Generic ; 
  Test C# declaration:            : using System . Collections . Generi